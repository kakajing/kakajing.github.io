<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余鸢</title>
  
  <subtitle>每天学习一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kakajing.github.io/"/>
  <updated>2018-08-06T08:49:30.636Z</updated>
  <id>http://kakajing.github.io/</id>
  
  <author>
    <name>余鸢</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号开发(四)：用户管理和自定义菜单以及微信网页开发</title>
    <link href="http://kakajing.github.io/2018/08/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)%EF%BC%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95%E4%BB%A5%E5%8F%8A%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/08/06/微信公众号开发(四)：用户管理和自定义菜单以及微信网页开发/</id>
    <published>2018-08-06T08:48:36.000Z</published>
    <updated>2018-08-06T08:49:30.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户标签管理"><a href="#用户标签管理" class="headerlink" title="用户标签管理"></a>用户标签管理</h1><p>一个公众号里的用户可能是来自不同地方不同行业或者不同渠道，这时为了更方便的区分用户，需要把用户归类到不同的组里。</p><a id="more"></a><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>获取用户标签管理的接口地址，修改<strong>server/wechat-lib/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> api = &#123;</div><div class="line">    ...</div><div class="line">    tags: &#123;</div><div class="line">        <span class="attr">create</span>: base + <span class="string">'tags/create?'</span>,             <span class="comment">// 创建标签</span></div><div class="line">        fetch: base + <span class="string">'tags/get?'</span>,                 <span class="comment">// 获取公众号已创建的标签</span></div><div class="line">        update: base + <span class="string">'tags/update?'</span>,             <span class="comment">// 编辑标签</span></div><div class="line">        del: base + <span class="string">'tags/delete?'</span>,                <span class="comment">// 删除标签</span></div><div class="line">        fetchUsers: base + <span class="string">'user/tag/get?'</span>,        <span class="comment">// 获取标签下粉丝列表</span></div><div class="line">        batchTag: base + <span class="string">'tags/members/batchtagging?'</span>,  <span class="comment">// 批量为用户打标签</span></div><div class="line">        batchUnTag: base + <span class="string">'tags/members/batchuntagging?'</span>,  <span class="comment">// 批量为用户取消标签</span></div><div class="line">        getTagList: base + <span class="string">'tags/getidlist?'</span>              <span class="comment">// 获取用户身上的标签列表</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">createTag (token, name) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">tag</span>: &#123;<span class="attr">name</span>: name&#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> url = api.tags.create + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取公众号已创建的标签"><a href="#获取公众号已创建的标签" class="headerlink" title="获取公众号已创建的标签"></a>获取公众号已创建的标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fetchTags (token) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.tags.fetch + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="编辑标签"><a href="#编辑标签" class="headerlink" title="编辑标签"></a>编辑标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">updateTag (token, tagId, name) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">tag</span>: &#123;</div><div class="line">      <span class="attr">id</span>: tagId,</div><div class="line">      <span class="attr">name</span>: name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> url = api.tags.updateTag + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">delTag (token, tagId) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">tag</span>: &#123;<span class="attr">id</span>: tagId&#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> url = api.tags.delTag + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取标签下粉丝列表"><a href="#获取标签下粉丝列表" class="headerlink" title="获取标签下粉丝列表"></a>获取标签下粉丝列表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fetchTagUsers (token, tagId, openId) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">tagid</span>: tagId,</div><div class="line">    <span class="attr">next_openid</span>: openId || <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> url = api.tags.fetchUsers + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="批量为用户打标签-取消标签"><a href="#批量为用户打标签-取消标签" class="headerlink" title="批量为用户打标签/取消标签"></a>批量为用户打标签/取消标签</h3><p>unTag表示判断用户打标签还是为用户取消标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">batchTag (token, openIdList, tagId, unTag) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">openid_list</span>: openIdList,</div><div class="line">    <span class="attr">tagid</span>: tagId</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> url = api.tags.batchTag</div><div class="line">  <span class="keyword">if</span> (unTag) &#123;</div><div class="line">    url = api.tags.batchUnTag</div><div class="line">  &#125;</div><div class="line">  url += <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: <span class="keyword">from</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取用户身上的标签列表"><a href="#获取用户身上的标签列表" class="headerlink" title="获取用户身上的标签列表"></a>获取用户身上的标签列表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getTagList (token, openId) &#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">from</span> = &#123;<span class="attr">openid</span>: openId&#125;</div><div class="line">  <span class="keyword">const</span> url = api.tags.getTagList + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: <span class="keyword">from</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p># </p><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p>获取用户的接口地址，修改server/wechat-lib/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> api = &#123;</div><div class="line">    ...</div><div class="line">    user: &#123;</div><div class="line">        <span class="attr">remark</span>: base + <span class="string">'user/info/updateremark?'</span>,          <span class="comment">// 设置用户备注名</span></div><div class="line">        info: base + <span class="string">'user/info?'</span>,                         <span class="comment">// 获取用户基本信息</span></div><div class="line">        batchInfo: base + <span class="string">'user/info/batchget?'</span>,           <span class="comment">// 批量获取用户基本信息</span></div><div class="line">        fetchUserList: base + <span class="string">'user/get?'</span>,                 <span class="comment">// 获取用户列表</span></div><div class="line">        getBlackList: base + <span class="string">'tags/members/getblacklist?'</span>,  <span class="comment">// 获取公众号的黑名单列表</span></div><div class="line">        batchBlackUsers: base + <span class="string">'tags/members/batchblacklist?'</span>,  <span class="comment">// 拉黑用户</span></div><div class="line">        batchUnblackUsers: base + <span class="string">'tags/members/batchunblacklist?'</span>  <span class="comment">// 取消拉黑用户</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><h3 id="设置用户备注名"><a href="#设置用户备注名" class="headerlink" title="设置用户备注名"></a>设置用户备注名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">remarkUser (token, openId, remark) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">tag</span>: &#123;</div><div class="line">      <span class="attr">openid</span>: openId,</div><div class="line">      <span class="attr">remark</span>: remark</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> url = api.user.remark + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取用户基本信息"><a href="#获取用户基本信息" class="headerlink" title="获取用户基本信息"></a>获取用户基本信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getUserInfo (token, openId, lang) &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.user.info&#125;</span>access_token=<span class="subst">$&#123;token&#125;</span>&amp;openid=<span class="subst">$&#123;openId&#125;</span>&amp;lang=<span class="subst">$&#123;lang || <span class="string">'zh_CN'</span>&#125;</span>`</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="批量获取用户基本信息"><a href="#批量获取用户基本信息" class="headerlink" title="批量获取用户基本信息"></a>批量获取用户基本信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetchUserList (token, userList) &#123;</div><div class="line">        <span class="keyword">const</span> url = api.user.batchInfo + <span class="string">'access_token='</span> + token</div><div class="line">        <span class="keyword">const</span> form = &#123;</div><div class="line">            <span class="attr">user_list</span>: userList</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fetchUserList (token, openId) &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.user.fetchUserList&#125;</span>access_token=<span class="subst">$&#123;token&#125;</span>&amp;next_openid=<span class="subst">$&#123;openId || <span class="string">''</span>&#125;</span>`</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>通过消息回复的形式来打印回复接口的信息。</p><p>修改代码<strong>server/middlewares/router.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</div><div class="line">    router.all(<span class="string">'/wx'</span>, wechatMiddle(config.wechat, reply))   </div><div class="line">    app</div><div class="line">        .use(router.routes())</div><div class="line">        .use(router.allowedMethods())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>server/wechat/reply.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> message = ctx.weixin</div><div class="line">    <span class="keyword">let</span> mp = <span class="built_in">require</span>(<span class="string">'../wechat'</span>)</div><div class="line">    <span class="keyword">let</span> client = mp.getWechat()   </div><div class="line">    <span class="keyword">if</span> (message.MsgType === <span class="string">'event'</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (message.Event === <span class="string">'subscribe'</span>) &#123;</div><div class="line">            ctx.body = tip</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'unsubscribe'</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'取消关注'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'LOCATION'</span>) &#123;</div><div class="line">            ctx.body = message.Latitude + <span class="string">' : '</span> + message.Longitude</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'text'</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (message.Content === <span class="string">'1'</span>) &#123;</div><div class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> client.handle(<span class="string">'fetchUserList'</span>)</div><div class="line">            <span class="built_in">console</span>.log(data)</div><div class="line">        &#125;</div><div class="line">        ctx.body = message.Content</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'image'</span>) &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>测试获取用户列表fetchUserList，拿到openid，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx34.png" alt="wx34"></p><p> 也可以测试获取用户基本信息等等其他功能，选择哪个功能修改<code>const data = await client.handle(&#39;fetchUserList&#39;)</code>即可，这里不一一演示了。</p><h1 id="自定义菜单"><a href="#自定义菜单" class="headerlink" title="自定义菜单"></a>自定义菜单</h1><h2 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h2><p>获取自定义菜单接口地址，修改server/wechat-lib/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu: &#123;</div><div class="line">  <span class="attr">create</span>: base + <span class="string">'menu/create?'</span>,                       <span class="comment">// 创建自定义菜单</span></div><div class="line">  get: base + <span class="string">'menu/get?'</span>,                             <span class="comment">// 查询自定义菜单</span></div><div class="line">  del: base + <span class="string">'menu/delete?'</span>,                          <span class="comment">// 删除自定义菜单</span></div><div class="line">  addCondition: base + <span class="string">'menu/addconditional?'</span>,         <span class="comment">// 创建个性化菜单</span></div><div class="line">  delCondition: base + <span class="string">'menu/delconditional?'</span>,         <span class="comment">// 删除个性化菜单</span></div><div class="line">  getInfo: base + <span class="string">'get_current_selfmenu_info?'</span>         <span class="comment">// 获取自定义菜单配置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><h3 id="创建自定义菜单"><a href="#创建自定义菜单" class="headerlink" title="创建自定义菜单"></a>创建自定义菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">createMenu (token, menu) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.menu.create + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: menu&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="查询自定义菜单"><a href="#查询自定义菜单" class="headerlink" title="查询自定义菜单"></a>查询自定义菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getMenu (token) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.menu.get + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="删除自定义菜单"><a href="#删除自定义菜单" class="headerlink" title="删除自定义菜单"></a>删除自定义菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">delMenu (token) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.menu.del + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="创建个性化菜单"><a href="#创建个性化菜单" class="headerlink" title="创建个性化菜单"></a>创建个性化菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addConditionMenu (token, rule) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;</div><div class="line">    <span class="attr">button</span>: menu,</div><div class="line">    <span class="attr">matchrule</span>: rule</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> url = api.menu.addCondition + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="删除个性化菜单"><a href="#删除个性化菜单" class="headerlink" title="删除个性化菜单"></a>删除个性化菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delConditionMenu (token, menuId) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;<span class="attr">menuid</span>: menuId&#125;</div><div class="line">  <span class="keyword">const</span> url = api.menu.delCondition + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取自定义菜单配置"><a href="#获取自定义菜单配置" class="headerlink" title="获取自定义菜单配置"></a>获取自定义菜单配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getCurrentMenuInfo (token) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.menu.getInfo + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>创建菜单，新建server/wechat/menu.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">button</span>: [&#123;</div><div class="line">        <span class="string">'name'</span>: <span class="string">'稻米周边'</span>,</div><div class="line">        <span class="string">'sub_button'</span>: [&#123;</div><div class="line">          <span class="string">'name'</span>: <span class="string">'最新种子'</span>,</div><div class="line">          <span class="string">'type'</span>: <span class="string">'click'</span>,</div><div class="line">          <span class="string">'key'</span>: <span class="string">'mini_clicked'</span></div><div class="line">        &#125;, &#123;</div><div class="line">          <span class="string">'name'</span>: <span class="string">'追随稻米'</span>,</div><div class="line">          <span class="string">'type'</span>: <span class="string">'click'</span>,</div><div class="line">          <span class="string">'key'</span>: <span class="string">'contact'</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="string">'name'</span>: <span class="string">'手办'</span>,</div><div class="line">            <span class="string">'type'</span>: <span class="string">'click'</span>,</div><div class="line">            <span class="string">'key'</span>: <span class="string">'gift'</span></div><div class="line">        &#125;]</div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="string">'name'</span>: <span class="string">'稻米联盟'</span>,</div><div class="line">        <span class="string">'type'</span>: <span class="string">'view'</span>,</div><div class="line">        <span class="string">'url'</span>: <span class="string">'https://iceandfire.iblack7.com'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="string">'name'</span>: <span class="string">'一起看片'</span>,</div><div class="line">        <span class="string">'type'</span>: <span class="string">'location_select'</span>,</div><div class="line">        <span class="string">'key'</span>: <span class="string">'location'</span></div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>删除菜单需要取消关注公众号再重新关注，这样才生效。修改reply.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (message.Content === <span class="string">'1'</span>) &#123;</div><div class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> client.handle(<span class="string">'batchUserInfo'</span>, userList)</div><div class="line">  <span class="built_in">console</span>.log(data)</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Content === <span class="string">'2'</span>) &#123;</div><div class="line">  <span class="keyword">const</span> menu = <span class="built_in">require</span>(<span class="string">'./menu'</span>).default</div><div class="line">  <span class="keyword">await</span> client.handle(<span class="string">'delMenu'</span>)</div><div class="line">  <span class="keyword">const</span> menuData = <span class="keyword">await</span> client.handle(<span class="string">'createMenu'</span>, menu)</div><div class="line">  <span class="built_in">console</span>.log(menuData)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试成功，效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx35.png" alt="wx35"></p><h3 id="自定义菜单事件推送"><a href="#自定义菜单事件推送" class="headerlink" title="自定义菜单事件推送"></a>自定义菜单事件推送</h3><p>用户可以通过菜单跟微信服务后台交互。修改menu.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">button</span>: [&#123;</div><div class="line">        <span class="string">'name'</span>: <span class="string">'稻米周边'</span>,</div><div class="line">        <span class="string">'sub_button'</span>: [&#123;</div><div class="line">          <span class="string">'name'</span>: <span class="string">'最新种子'</span>,</div><div class="line">          <span class="string">'type'</span>: <span class="string">'click'</span>,</div><div class="line">          <span class="string">'key'</span>: <span class="string">'mini_clicked'</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="string">'name'</span>: <span class="string">'拍照'</span>,</div><div class="line">            <span class="string">'type'</span>: <span class="string">'pic_sysphoto'</span>,</div><div class="line">            <span class="string">'key'</span>: <span class="string">'photo'</span></div><div class="line">        &#125;]</div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>reply.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (message.MsgType === <span class="string">'event'</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (message.Event === <span class="string">'subscribe'</span>) &#123;</div><div class="line">            ctx.body = tip</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'unsubscribe'</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'取消关注'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'LOCATION'</span>) &#123;</div><div class="line">            ctx.body = message.Latitude + <span class="string">' : '</span> + message.Longitude</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'VIEW'</span>) &#123;</div><div class="line">            ctx.body = message.EventKey + message.MenuId</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'pic_sysphoto'</span>) &#123;</div><div class="line">            ctx.body = message.Count + <span class="string">'photos sent'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>测试点击菜单跳转链接时的事件推送和弹出系统拍照发图的事件推送成功，控制台打印message信息。效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx36.png" alt="wx36"></p><h1 id="微信网页开发"><a href="#微信网页开发" class="headerlink" title="微信网页开发"></a>微信网页开发</h1><p>微信网页开发主要分两大部分，第一部分是微信网页授权（比如获取用户资料），第二部分是微信JS-SDK的接口调用。</p><p>SDK config接口注入权限认证，需要调用wx.confog()传入参数，其中参数signature很重要，它是服务器直接返回的，是权限认证时最重要的参数。生成签名之前必须先了解jsapi_ticket，它是公众号用于调用微信JS接口的临时票据。生成签名之前先要获取到access_token，再通过GET请求获得jsapi_ticket才能进行签名算法，最后生成签名。</p><h2 id="存储ticket"><a href="#存储ticket" class="headerlink" title="存储ticket"></a>存储ticket</h2><p>存储ticket和存储token方式是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">const</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">const</span> TicketSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">  <span class="attr">ticket</span>: <span class="built_in">String</span>,</div><div class="line">  <span class="attr">expires_in</span>: <span class="built_in">Number</span>,</div><div class="line">  <span class="attr">meta</span>: &#123;</div><div class="line">    <span class="attr">createAt</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">Date</span>,</div><div class="line">      <span class="attr">default</span>: <span class="built_in">Date</span>.now()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">updateAt</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">Date</span>,</div><div class="line">      <span class="attr">default</span>: <span class="built_in">Date</span>.now()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 保存每条数据之前先经过中间件的处理，判断是否是新增数据</span></div><div class="line">TicketSchema.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isNew) &#123;</div><div class="line">    <span class="keyword">this</span>.meta.createAt = <span class="keyword">this</span>.meta.updateAt = <span class="built_in">Date</span>.now()</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.meta.updateAt = <span class="built_in">Date</span>.now()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line">TicketSchema.statics = &#123;</div><div class="line"> <span class="comment">// 获取ticket</span></div><div class="line">  <span class="keyword">async</span> getAccessticket () &#123;</div><div class="line">    <span class="keyword">const</span> ticket = <span class="keyword">await</span> <span class="keyword">this</span>.findOne(&#123; <span class="attr">name</span>: <span class="string">'ticket'</span> &#125;).exec()</div><div class="line">    <span class="keyword">if</span> (ticket &amp;&amp; ticket.ticket) &#123;</div><div class="line">        ticket.ticket = ticket.ticket</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ticket</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 保存ticket</span></div><div class="line">  <span class="keyword">async</span> saveAccessticket (data) &#123;</div><div class="line">    <span class="keyword">let</span> ticket = <span class="keyword">await</span> <span class="keyword">this</span>.findOne(&#123; <span class="attr">name</span>: <span class="string">'ticket'</span> &#125;).exec()</div><div class="line">    <span class="keyword">if</span> (ticket) &#123;</div><div class="line">      ticket.ticket = data.ticket</div><div class="line">      ticket.expires_in = data.expires_in</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      ticket = <span class="keyword">new</span> Ticket(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'ticket'</span>,</div><div class="line">        <span class="attr">expires_in</span>: data.expires_in,</div><div class="line">        <span class="attr">ticket</span>: data.ticket</div><div class="line">      &#125;)</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">await</span> ticket.save()</div><div class="line">    <span class="keyword">return</span> data</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> Ticket = mongoose.model(<span class="string">'Ticket'</span>, TicketSchema)</div></pre></td></tr></table></figure><p>创建getTicket和saveTicket两个方法作为配置参数传给wechat构造函数生成实例，修改wechat/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> wechatConfig = &#123;</div><div class="line">    <span class="attr">wechat</span>: &#123;</div><div class="line">        ...</div><div class="line">        getTicket: <span class="keyword">async</span> () =&gt; <span class="keyword">await</span> Token.getTicket(),</div><div class="line">        <span class="attr">saveTicket</span>: <span class="keyword">async</span> (data) =&gt; <span class="keyword">await</span> Token.saveTicket(data)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="获取ticket"><a href="#获取ticket" class="headerlink" title="获取ticket"></a>获取ticket</h2><p>新增获取ticket的方法，修改wechat-lib/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> fetchAccessToken () &#123;</div><div class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.getAccessToken()</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.isValidToken(data, <span class="string">'access_token'</span>)) &#123;</div><div class="line">    data = <span class="keyword">await</span> <span class="keyword">this</span>.updateAccessToken()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.saveAccessToken(data)</div><div class="line">  <span class="keyword">return</span> data</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span> fetchTicket (token) &#123;</div><div class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.getTicke()</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.isValidToken(data, <span class="string">'ticket'</span>)) &#123;</div><div class="line">    data = <span class="keyword">await</span> <span class="keyword">this</span>.updateTicke(token)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.saveTicke(data)</div><div class="line">  <span class="keyword">return</span> data</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span> updateTicket (token) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.ticket.get + <span class="string">'access_token='</span> + token + <span class="string">'&amp;type=jsapi'</span></div><div class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.request(&#123;<span class="attr">url</span>: url&#125;)</div><div class="line">  <span class="keyword">const</span> now = (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</div><div class="line">  <span class="keyword">const</span> expiresIn = now + (data.expires_in - <span class="number">20</span>) * <span class="number">1000</span></div><div class="line">  data.expires_in = expiresIn</div><div class="line">  <span class="keyword">return</span> data</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="签名算法"><a href="#签名算法" class="headerlink" title="签名算法"></a>签名算法</h2><p>生成签名，修改<strong>wechat-lib/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sign (ticket, url) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.sign(ticket, url)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>签名算法，修改<strong>wechat-lib/util.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span> (<span class="params">ticket, url</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> nonce = createNonce()</div><div class="line">    <span class="keyword">const</span> timestamp = createTimestamp()</div><div class="line">    <span class="keyword">const</span> signature = signIt(nonce, ticket, timestamp, url)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">noncestr</span>: nonce,</div><div class="line">      <span class="attr">timestamp</span>: timestamp,</div><div class="line">      <span class="attr">signature</span>: signature</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>把这些参数配置到网页上，这样就能够调用jsapi_ticket权限。</p><h2 id="API封装，签名流程"><a href="#API封装，签名流程" class="headerlink" title="API封装，签名流程"></a>API封装，签名流程</h2><p>新建server/api文件，用于封装底层数据交互的方法，做底层服务（包括数据操作），api下新建wechat.js用于微信相关的api调用。通过<code>getWechat()</code>拿到实例</p><p><strong>server/api/wechat.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;getWechat&#125; <span class="keyword">from</span> <span class="string">'../wechat'</span></div><div class="line"><span class="keyword">const</span> client = getWechat()</div></pre></td></tr></table></figure><p>调用<code>getAccessToken()</code>获取access_token，拿到token后调用<code>getTicket(token)</code>获取ticket，调用<code>sign(ticket, url)</code>，获取signature</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getSignatureAsync</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> client.getAccessToken()</div><div class="line">    <span class="keyword">const</span> token = data.access_token</div><div class="line">    <span class="keyword">const</span> ticketData = <span class="keyword">await</span> client.getTicket(token)</div><div class="line">    <span class="keyword">const</span> ticket = ticketData.ticket</div><div class="line"></div><div class="line">    <span class="keyword">let</span> params = client.sign(ticket, url)</div><div class="line">    params.appId = client.appID</div><div class="line"></div><div class="line">    <span class="keyword">return</span> params</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>新建server/controllers/wechat.js，放微信业务相关的控制逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">'../api'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">signature</span> (<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> url = ctx.query.url</div><div class="line">    <span class="keyword">if</span> (!url) ctx.throw(<span class="number">404</span>)</div><div class="line">    <span class="keyword">const</span> params = <span class="keyword">await</span> api.getSignatureAsync(url)</div><div class="line">    ctx.body = &#123;</div><div class="line">        <span class="attr">success</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">params</span>: params</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从浏览器端发送异步请求，拿到认证权限的参数，修改server/middlewares/router.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/wx-signature'</span>, signature)</div></pre></td></tr></table></figure><h1 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h1><p>引入js文件，修改nuxt.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">head: &#123;</div><div class="line">    ...</div><div class="line">    scripts: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">src</span>: <span class="string">'http://res.wx.qq.com/open/js/jweixin-1.2.0.js'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p><strong>pages/about.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;section class=&quot;container&quot;&gt;</div><div class="line">    &lt;img src=&quot;../static/img/logo.png&quot; alt=&quot;Nuxt.js Logo&quot; class=&quot;logo&quot; /&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">import &#123; mapState &#125; from &apos;vuex&apos;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  asyncData(&#123; req &#125;) &#123;</div><div class="line">    return &#123;</div><div class="line">      name: req ? &apos;server&apos; : &apos;client&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  head() &#123;</div><div class="line">    return &#123;</div><div class="line">      title: `测试页面`</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  beforeMount () &#123;</div><div class="line">    const wx = window.wx</div><div class="line">    const url = window.location.href</div><div class="line"></div><div class="line">    this.$store.dispatch(&apos;getWechatSignature&apos;, url).then(res =&gt; &#123;</div><div class="line">      if (res.data.success) &#123;</div><div class="line">        const params = res.data.params</div><div class="line">        wx.config(&#123;</div><div class="line">          debug: true,</div><div class="line">          appId: params.appId,</div><div class="line">          timestamp: params.timestamp, </div><div class="line">          nonceStr: params.nonceStr,</div><div class="line">          signature: params.signature,</div><div class="line">          jsApiList: [</div><div class="line">            &apos;onMenuShareTimeline&apos;,</div><div class="line">            &apos;chooseImage&apos;,</div><div class="line">            &apos;previewImage&apos;,</div><div class="line">            &apos;uploadImage&apos;,</div><div class="line">            &apos;downloadImage&apos;,</div><div class="line">            &apos;hideAllNonBaseMenuItem&apos;,</div><div class="line">            &apos;showMenuItems&apos;</div><div class="line">          ]</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        wx.ready(() =&gt; &#123;</div><div class="line">          wx.hideAllNonBaseMenuItem()</div><div class="line">          console.log(&apos;success&apos;)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>利用vuex的管理机制获取ticket，<strong>store/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></div><div class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></div><div class="line"><span class="keyword">const</span> createStore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">    <span class="attr">state</span>: &#123;&#125;,</div><div class="line">    getters,</div><div class="line">    actions,</div><div class="line">    mutations</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore</div></pre></td></tr></table></figure><p>获取ticket，<strong>store/action.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Services <span class="keyword">from</span> <span class="string">'./service'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// 签名</span></div><div class="line">  getWechatSignature(&#123; commit &#125;, url) &#123;</div><div class="line">    <span class="keyword">return</span> Services.getWechatSignature(url)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>store/service.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">const</span> baseUrl = <span class="string">''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Services</span> </span>&#123;</div><div class="line">  getWechatSignature(url) &#123;</div><div class="line">    <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/wx-signature?url=<span class="subst">$&#123;url&#125;</span>`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Services()</div></pre></td></tr></table></figure><p>生成签名流程：通过<code>this.$store.dispatch()</code>派出去<code>getWechatSignture</code>，触发store里的状态变更，去调用service发出当前网站目录下的signature请求，传入url作为参数，这个请求会被middlewares目录下router.js截获，把这个请求交给signature。在controllers/wechat.js里signature拿到传过来的参数url，调用生成签名的<code>api.getSignatureAsync()</code>方法，把签名值以异步的形式返回给about页面。拿到<code>signature</code>后通过<code>wx.config()</code>注入权限验证，验证通过后可以做相关的业务操作。</p><p>测试通过，成功打印返回信息，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx37.png" alt="wx37"></p><h1 id="微信网页授权机制"><a href="#微信网页授权机制" class="headerlink" title="微信网页授权机制"></a>微信网页授权机制</h1><p>微信网页授权是基于OAuth2.0一套认证体系是完全独立的，不仅在微信中可以使用在其他网站也可以使用，比如微博、github或者自己的网站都可以集成这套机制，让用户手动同意之后会获取凭证，凭证会帮用户登录也会帮服务器获得用户的基本信息，它和全局票据access_token完全不一样，只是名字一样其他的都不一样。另外，官方虽然提供了access_token的刷新机制，但是如果不是追求更完备的流程或体验的话，完全可以无视这个刷新机制，它只会让你在初次接触授权时开发量增加，索性就不要去实现它，每次直接重亲获取新的access_token就行。如果是每次都获取新的token，而且官网也没有设置调用门槛限制，也不需要去保存这个token，也不用关心它和用户是一对一或者一对多的关系。就每次让用户同意授权，拿到code获取token，再用token来读取资料 。</p><p>注意，必须是认证过的服务号才能从网页中通过OAuth2.0的认证机制获取用户的信息，订阅号无论是认证还是不认证都是不行的。 </p><h3 id="分析请求后端流程："><a href="#分析请求后端流程：" class="headerlink" title="分析请求后端流程："></a>分析请求后端流程：</h3><p>比如用户访问页面/a，访问a页面时后端收到请求，根据a页面的url拼接成跳转地址，这个跳转的地址是微信里的地址，接着在用户点击同意授权的按钮，就会发生第二次跳转页面，同时除了拼接地址之外还会追加一些额外参数，在跳转后的页面拿到微信传过来的code、state，state是从用户访问的页面/a传过来的参数。拿到code后获取access_token、openid，有了access_token和openid就能获取用户信息。</p><p>简单的说要完成微信网页授权，并获取用户信息要完成以下3步骤。</p><ol><li>用户授权并获取code</li><li>使用code换取access_token</li><li>使用access_token获取用户信息</li></ol><p>增加网页授权的请求地址，新建<strong>server/wechat-lib/oauth.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> base = <span class="string">'https://api.weixin.qq.com/sns/'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> api = &#123;</div><div class="line">  <span class="attr">authorize</span>: <span class="string">'https://open.weixin.qq.com/connect/oauth2/authorize?'</span>,</div><div class="line">  <span class="attr">accessToken</span>: base + <span class="string">'oauth2/access_token?'</span>,</div><div class="line">  <span class="attr">userInfo</span>: base + <span class="string">'userinfo?'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建WechatOAuth实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatOAuth</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (opts) &#123;</div><div class="line">        <span class="keyword">this</span>.appID = opts.appID</div><div class="line">        <span class="keyword">this</span>.appSecret = opts.appSecret</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">async</span> request (options) &#123;</div><div class="line">      options = <span class="built_in">Object</span>.assign(&#123;&#125;, options, &#123;<span class="attr">json</span>: <span class="literal">true</span>&#125;)  </div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> request(options)  </div><div class="line">        <span class="keyword">return</span> response</div><div class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.error(error)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取code"><a href="#获取code" class="headerlink" title="获取code"></a>获取code</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getAuthorizeURL (scope = <span class="string">'snsapi_base'</span>, target, state) &#123;</div><div class="line">   <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.authorize&#125;</span>appid=<span class="subst">$&#123;<span class="keyword">this</span>.appID&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(target)&#125;</span>&amp;response_type=code&amp;scope=<span class="subst">$&#123;scope&#125;</span>&amp;state=<span class="subst">$&#123;state&#125;</span>#wechat_redirect`</span></div><div class="line">      <span class="keyword">return</span> url</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>微信授权分两种类型，一种是静默授权snsapi_base（直接跳转，只能获取用户openid），另一种是手动授权snsapi_userinfo（手动获取用户信息），这里使用snsapi_base， target为跳转的地址，state为需要传递的参数</p><h3 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access_token"></a>获取access_token</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> fetchAccessToken (code) &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.accessToken&#125;</span>appid=<span class="subst">$&#123;<span class="keyword">this</span>.appID&#125;</span>&amp;secret=<span class="subst">$&#123;<span class="keyword">this</span>.appSecret&#125;</span>&amp;code=<span class="subst">$&#123;code&#125;</span>&amp;grant_type=authorization_code`</span></div><div class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.request(&#123;<span class="attr">url</span>: url&#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> data</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> getUserInfo (token, openID, lang=<span class="string">'zh_CN'</span>) &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.userInfo&#125;</span>access_token=<span class="subst">$&#123;token&#125;</span>&amp;openid=<span class="subst">$&#123;openID&#125;</span>&amp;lang=<span class="subst">$&#123;lang&#125;</span>`</span></div><div class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.request(&#123;<span class="attr">url</span>: url&#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> data</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="增加路由"><a href="#增加路由" class="headerlink" title="增加路由"></a>增加路由</h3><p>修改router.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</div><div class="line">    router.all(<span class="string">'/wx'</span>, wechatMiddle(config.wechat, reply))</div><div class="line">    router.get(<span class="string">'/wx-signature'</span>, signature)</div><div class="line">    router.get(<span class="string">'/wx-redirect'</span>, redirect)</div><div class="line">    router.get(<span class="string">'/wx-oauth'</span>, oauth)</div><div class="line">   </div><div class="line">    app</div><div class="line">        .use(router.routes())</div><div class="line">        .use(router.allowedMethods())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>router.get(&#39;/wx-redirect&#39;, redirect)</code>帮用户跳转到另一个地址，<code>router.get(&#39;/wx-oauth&#39;, oauth)</code>跳转后通过授权机制获取用户信息。</p><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>拼接跳转的目标地址，把用户重定向到这个地址，修改<strong>server/controllers/wechat.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">redirect</span> (<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> target = config.SITE_ROOT_URL + <span class="string">'/oauth'</span></div><div class="line">    <span class="keyword">const</span> scope = <span class="string">'snsapi_userinfo'</span></div><div class="line">    <span class="keyword">const</span> &#123;a, b&#125; = ctx.query</div><div class="line">    <span class="keyword">const</span> params = <span class="string">`<span class="subst">$&#123;a&#125;</span>_<span class="subst">$&#123;b&#125;</span>`</span></div><div class="line"></div><div class="line">    <span class="keyword">const</span> url = api.getAuthorizeURL(scope, target, params)</div><div class="line"></div><div class="line">    ctx.redirect(url)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SITE_ROOT_URL：网站的根域名</p><p><strong>server/api/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;getSignatureAsync, getAuthorizeURL, getUserByCode&#125; <span class="keyword">from</span> <span class="string">'./wechat'</span></div><div class="line"><span class="keyword">export</span> &#123;getSignatureAsync, getAuthorizeURL, getUserByCode&#125;</div></pre></td></tr></table></figure><p>生成跳转的url，修改<strong>server/api/wechat.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthorizeURL</span> (<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> oauth = getOAuth()</div><div class="line">  <span class="keyword">return</span> oauth.getAuthorizeURL(...args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OAuth实例，修改<strong>server/wechat/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getOAuth = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> oauth = <span class="keyword">new</span> WechatOAuth(wechatConfig.wechat)</div><div class="line">    <span class="keyword">return</span> oauth</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接收Oauth，修改<strong>server/conrollers/wechat.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">oauth</span> (<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> url = ctx.query.url</div><div class="line">  url = <span class="built_in">decodeURIComponent</span>(url)</div><div class="line">  <span class="keyword">const</span> urlObj = urlParse(url)</div><div class="line">  <span class="keyword">const</span> params = queryParse(urlObj.query)</div><div class="line">  <span class="keyword">const</span> code = params.code</div><div class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> api.getUserByCode(code)</div><div class="line">  <span class="built_in">console</span>.log(user) </div><div class="line">  ctx.body = &#123;</div><div class="line">      <span class="attr">success</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">data</span>: user</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过code获取用户信息，修改<strong>server/api/wechat.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserByCode</span> (<span class="params">code</span>) </span>&#123;</div><div class="line">  <span class="comment">// oauth实例</span></div><div class="line">  <span class="keyword">const</span> oauth = getOAuth()</div><div class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> oauth.fetchAccessToken(code)</div><div class="line">  <span class="keyword">const</span> openid = data.openid</div><div class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> oauth.getUserInfo(data.access_token, openid)</div><div class="line">  <span class="keyword">return</span> user</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="测试页面-1"><a href="#测试页面-1" class="headerlink" title="测试页面"></a>测试页面</h1><p>新建<strong>oauth.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">beforeMount() &#123;</div><div class="line">    <span class="keyword">const</span> url = <span class="built_in">window</span>.location.href</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'getUserByOAuth'</span>, <span class="built_in">encodeURIComponent</span>(url)).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (res.data.success) &#123;</div><div class="line">        <span class="built_in">console</span>.log(res.data)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>复制about.vue里的代码到oauth.vue，只修改beforeMount()里的代码。</p><p><strong>store/actions.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getUserByOAuth(&#123; commit &#125;, url) &#123;</div><div class="line">    <span class="keyword">return</span> Services.getUserByOAuth(url)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>store/services.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getUserByOAuth(url) &#123;</div><div class="line">    <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/wx-oauth?url=<span class="subst">$&#123;url&#125;</span>`</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>增加域名，修改<strong>server/config/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">SITE_ROOT_URL</span>: <span class="string">'http://nuxtssr.ngrok.cc'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在测试号里增加域名，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx38.png" alt="wx38"></p><p> 注意：一定要修改网页授权获取去用户基本信息，不然就不能在本地通过微信测试。</p><p>在微信开发者工具中输入<a href="http://nuxtssr.ngrok.xiaomiqiu.cn/wx-redirect?a=1&amp;b=2，返回success和用户信息。" target="_blank" rel="external">http://nuxtssr.ngrok.xiaomiqiu.cn/wx-redirect?a=1&amp;b=2，返回success和用户信息。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户标签管理&quot;&gt;&lt;a href=&quot;#用户标签管理&quot; class=&quot;headerlink&quot; title=&quot;用户标签管理&quot;&gt;&lt;/a&gt;用户标签管理&lt;/h1&gt;&lt;p&gt;一个公众号里的用户可能是来自不同地方不同行业或者不同渠道，这时为了更方便的区分用户，需要把用户归类到不同的组里。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://kakajing.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发(三)：微信消息中间件和素材处理</title>
    <link href="http://kakajing.github.io/2018/08/05/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)%EF%BC%9A%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E7%B4%A0%E6%9D%90%E5%A4%84%E7%90%86/"/>
    <id>http://kakajing.github.io/2018/08/05/微信公众号开发(三)：微信消息中间件和素材处理/</id>
    <published>2018-08-04T16:10:10.000Z</published>
    <updated>2018-08-04T16:11:18.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h1><p>请求官方API的地址将获取到的数据存到数据库，除此之外还有很多与微信服务器之间的交互场景，最好是把token和其他异步请求封装到一个文件里，就可以把这个文件统一看做微信请求的构造函数，一切与微信交互的功能都放到这个文件里，把它当做一个入口。</p><p>新建server/wechat-lib/index.js作为整个微信异步场景的入口文件，统一管理微信API地址。</p><a id="more"></a><p><strong>server/wechat-lib/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'request-promise'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> base = <span class="string">'https://api.weixin.qq.com/cgi-bin/'</span></div><div class="line"><span class="keyword">const</span> api = &#123;</div><div class="line">    <span class="attr">accessToken</span>: base + <span class="string">'token?grant_type=client_credential'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wechat</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (opts) &#123;</div><div class="line">        <span class="keyword">this</span>.opts = <span class="built_in">Object</span>.assign(&#123;&#125;, opts)</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.appID = opts.appID</div><div class="line">        <span class="keyword">this</span>.appSecret = opts.appSecret</div><div class="line">        <span class="keyword">this</span>.getAccessToken = opts.getAccessToken</div><div class="line">        <span class="keyword">this</span>.saveAccessToken = opts.saveAccessToken</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.fetchAccessToken()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">async</span> request (options) &#123;</div><div class="line">        options = <span class="built_in">Object</span>.assign(&#123;&#125;, options, &#123;<span class="attr">json</span>: <span class="literal">true</span>&#125;)</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> request(options)</div><div class="line">            <span class="built_in">console</span>.log(response)</div><div class="line">            <span class="keyword">return</span> response</div><div class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">            <span class="built_in">console</span>.error(error)</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取token</span></div><div class="line">    <span class="keyword">async</span> fetchAccessToken () &#123;</div><div class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.getAccessToken()</div><div class="line">        <span class="comment">// 验证token是否正确</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isValidAccessToken(data)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">this</span>.updateAccessToken()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.saveAccessToken()</div><div class="line">        <span class="keyword">return</span> data</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 更新token</span></div><div class="line">    <span class="keyword">async</span> updateAccessToken () &#123;</div><div class="line">        <span class="keyword">const</span> url = api.accessToken + <span class="string">'&amp;appid='</span> + <span class="keyword">this</span>.appID + <span class="string">'&amp;secret='</span> + <span class="keyword">this</span>.appSecret</div><div class="line"></div><div class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.request(&#123;<span class="attr">url</span>: url&#125;)</div><div class="line">        <span class="keyword">const</span> now = (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</div><div class="line">        <span class="keyword">const</span> expiresIn = now + (data.expires_in - <span class="number">20</span>) * <span class="number">1000</span></div><div class="line"></div><div class="line">        data.expires_in = expiresIn</div><div class="line"></div><div class="line">        <span class="keyword">return</span> data</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 验证token</span></div><div class="line">    isValidAccessToken (data) &#123;</div><div class="line">        <span class="keyword">if</span> (!data || !data.accessToken || !data.expires_in) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">const</span> expiresIn = data.expires_in</div><div class="line">        <span class="keyword">const</span> now = (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (now &lt; expiresIn) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义api地址，request方法，所有的异步函数都通过它统一管理，获取access_token，更新access_token。</p><p>新建server/wechat/index.js对微信异步场景函数做初始化。传递配置参数及方法，生成wechat实例。</p><p><strong>server/wechat/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span></div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'../config'</span></div><div class="line"><span class="keyword">import</span> Wechat <span class="keyword">from</span> <span class="string">'../wechat-lib'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Token = mongoose.model(<span class="string">'Token'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> wechatConfig = &#123;</div><div class="line">    <span class="attr">wechat</span>: &#123;</div><div class="line">        <span class="attr">appID</span>: config.wechat.appID,</div><div class="line">        <span class="attr">appSecret</span>: config.wechat.appSecret,</div><div class="line">        <span class="attr">token</span>: config.wechat.token,</div><div class="line">        <span class="attr">getAccessToken</span>: <span class="keyword">async</span> () =&gt; <span class="keyword">await</span> Token.getAccessToken(),</div><div class="line">        <span class="attr">saveAccessToken</span>: <span class="keyword">async</span>() =&gt; <span class="keyword">await</span> Token.saveAccessToken()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getWechat = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> wechatClient = <span class="keyword">new</span> Wechat(wechatConfig.wechat)</div><div class="line">    <span class="keyword">return</span> wechatClient</div><div class="line">&#125; </div><div class="line"></div><div class="line">getWechat()</div></pre></td></tr></table></figure><p>在server/middlewares/router.js引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'../wechat'</span></div></pre></td></tr></table></figure><p>引入这个文件就会去通过执行<code>getWechat()</code>创建Wechat实例<code>new Wechat(wechatConfig.wechat)</code>，然后调用<code>fetchAccessToken()</code>方法获取access_token。在控制台成功打印出access_token，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx24.png" alt="wx24"></p><h1 id="保存access-token"><a href="#保存access-token" class="headerlink" title="保存access_token"></a>保存access_token</h1><p>获取access_token后判断access_token是否过期，后期的话重启获取一次，再次保存access_token，修改代码：</p><p><strong>server/wechat-lib/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> fetchAccessToken () &#123;</div><div class="line">        <span class="comment">// 获取当前token</span></div><div class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.getAccessToken()</div><div class="line">        <span class="comment">// 验证token是否正确</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isValidAccessToken(data)) &#123;</div><div class="line">            data = <span class="keyword">await</span> <span class="keyword">this</span>.updateAccessToken()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.saveAccessToken(data)</div><div class="line">        <span class="keyword">return</span> data</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><strong>server/wechat/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> wechatConfig = &#123;</div><div class="line">    <span class="attr">wechat</span>: &#123;</div><div class="line">        <span class="attr">appID</span>: config.wechat.appID,</div><div class="line">        <span class="attr">appSecret</span>: config.wechat.appSecret,</div><div class="line">        <span class="attr">token</span>: config.wechat.token,</div><div class="line">        <span class="attr">getAccessToken</span>: <span class="keyword">async</span> () =&gt; <span class="keyword">await</span> Token.getAccessToken(),</div><div class="line">        <span class="attr">saveAccessToken</span>: <span class="keyword">async</span> (data) =&gt; <span class="keyword">await</span> Token.saveAccessToken(data)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>server/database/schema/token.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> getAccessToken () &#123;</div><div class="line">        <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="keyword">this</span>.findOne(&#123;<span class="attr">name</span>: <span class="string">'access_token'</span>&#125;).exec()</div><div class="line">        <span class="keyword">if</span> (token &amp;&amp; token.token) &#123;</div><div class="line">            token.access_token = token.token</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> token</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>等数据库连接成功之后再做微信初始化，<code>require(&#39;../wechat&#39;)</code>的时间应该是整个项目跑起来对外提供服务的时候</p><p><strong>server/middlewares/router.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/wx'</span>, (ctx, next) =&gt; &#123;</div><div class="line">        <span class="built_in">require</span>(<span class="string">'../wechat'</span>)</div><div class="line">        <span class="keyword">const</span> token = config.wechat.token</div><div class="line">        <span class="comment">// 参数</span></div><div class="line">        <span class="keyword">const</span> &#123;signature, nonce, timestamp, echostr&#125; = ctx.query</div><div class="line"></div><div class="line">        <span class="comment">// 对参数进行排序加密</span></div><div class="line">        <span class="keyword">const</span> str = [token, timestamp, nonce].sort().join(<span class="string">''</span>)</div><div class="line">        <span class="keyword">const</span> sha = sha1(str)</div><div class="line">        <span class="keyword">if</span> (sha === signature) &#123;</div><div class="line">            ctx.body = echostr</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ctx.body = <span class="string">'Failed'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><p>保存新增access_token成功，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx25.png" alt="wx25"></p><h1 id="微信消息中间件"><a href="#微信消息中间件" class="headerlink" title="微信消息中间件"></a>微信消息中间件</h1><p>通过access_token和消息中间件结合就可以给用户回复了。无论http是get或post请求都要对query里的参数进行排序加密比对，比对正确的话进行数据分析。这里直接改成<code>router.all()</code>，无论是get、post还是delete都可以拿到请求。写个中间件<code>wechatMiddle(opts, reply)</code></p><ul><li>opts：配置参数。描述了微信公众号对access_token的外部获取方式</li><li>reply：回复策略。</li></ul><p><strong>server/middlewares/router.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</div><div class="line">    router.get(<span class="string">'/wx'</span>, wechatMiddle(config.wechat, reply))</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>消息中间件函数，<strong>server/wechat-lib/middleware.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sha1 <span class="keyword">from</span> <span class="string">'sha1'</span></div><div class="line"><span class="keyword">import</span> getRawBody <span class="keyword">from</span> <span class="string">'raw-body'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">'./util'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">opts, reply</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">wechatMiddel</span> (<span class="params">ctx, next</span>) </span>&#123;       </div><div class="line">        <span class="keyword">const</span> token = opts.token</div><div class="line">        <span class="comment">// 参数</span></div><div class="line">        <span class="keyword">const</span> &#123;signature, nonce, timestamp, echostr&#125; = ctx.query</div><div class="line"></div><div class="line">        <span class="comment">// 对参数进行排序加密</span></div><div class="line">        <span class="keyword">const</span> str = [token, timestamp, nonce].sort().join(<span class="string">''</span>)</div><div class="line">        <span class="keyword">const</span> sha = sha1(str)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ctx.method === <span class="string">'GET'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (sha === signature) &#123;</div><div class="line">                ctx.body = echostr</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ctx.body = <span class="string">'Failed'</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.method === <span class="string">'POST'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (sha !== signature) &#123;</div><div class="line">                ctx.body = <span class="string">'Failed'</span></div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> getRawBody(ctx.req, &#123;</div><div class="line">                <span class="attr">length</span>: ctx.length,</div><div class="line">                <span class="attr">limit</span>: <span class="string">'1mb'</span>,</div><div class="line">                <span class="attr">encoding</span>: ctx.charset</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="keyword">const</span> content = <span class="keyword">await</span> util.parseXML(data)</div><div class="line">           <span class="comment">// const message = util.formatMessage(content,xml)</span></div><div class="line"></div><div class="line">            <span class="built_in">console</span>.log(content)</div><div class="line">            ctx.weixin = &#123;&#125;</div><div class="line"></div><div class="line">            <span class="keyword">await</span> reply.apply(ctx, [ctx, next])</div><div class="line"></div><div class="line">            <span class="keyword">const</span> replyBody = ctx.body</div><div class="line">            <span class="keyword">const</span> msg = ctx.weixin</div><div class="line">          <span class="comment">//  const xml = util.tpl(replyBody, msg)</span></div><div class="line"><span class="built_in">console</span>.log(replyBody)</div><div class="line">            </div><div class="line">            <span class="keyword">const</span> xml = <span class="string">`&lt;xml&gt; </span></div><div class="line">                            &lt;ToUserName&gt;&lt; ![CDATA[toUser] ]&gt;&lt;/ToUserName&gt; </div><div class="line">                            &lt;FromUserName&gt;&lt; ![CDATA[fromUser] ]&gt;&lt;/FromUserName&gt; </div><div class="line">                            &lt;CreateTime&gt;12345678&lt;/CreateTime&gt; </div><div class="line">                            &lt;MsgType&gt;&lt; ![CDATA[text] ]&gt;&lt;/MsgType&gt; </div><div class="line">                            &lt;Content&gt;&lt; ![CDATA[你好] ]&gt;&lt;/Content&gt; </div><div class="line">                        &lt;/xml&gt;`</div><div class="line">            </div><div class="line">            ctx.status = <span class="number">200</span></div><div class="line">            ctx.type = <span class="string">'application/xml'</span></div><div class="line">            ctx.body = xml</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为前面用的是<code>router.all</code>所以在使用时要对请求方法做个判断，方法匹配成功后先拿到请求过来的数据，然后把它解析成xml <code>util.parseXML(data)</code>，再对它转换成json或者对象格式<code>util.formatMessage(content,xml)</code>，这样就能拿到对应的key和value。解析后的数据挂到<code>context.weixin</code>上，在后面的代码单元就能访问到<code>context.weixin</code>，转义上下文<code>reply.apply(ctx, [ctx, next])</code>。在router.js引入middleware.js</p><p><strong>server/middlewares/router.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> wechatMiddle <span class="keyword">from</span> <span class="string">'../wechat-lib/middleware'</span></div></pre></td></tr></table></figure><p>回复策略<strong>server/wechat/reply.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tip = <span class="string">'亲爱的黑虎，欢迎来到青青大草原\n'</span> + <span class="string">'点击 &lt;a href="http://coding.imooc.com"&gt;一起放风筝啊&lt;/a&gt;'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> message = ctx.weixin</div><div class="line">    <span class="built_in">console</span>.log(message)</div><div class="line">    ctx.body = tip</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重启项目，微信扫公众测试号二维码</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx26.png" alt="wx26"></p><p>扫码之后在会出现与测试号的对话窗口，随便打个字会看到自动回复内容，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx28.png" alt="wx28"></p><p>同时我也在控制台打印出回复内容，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx27.png" alt="wx27"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果键入内容没有自动回复消息而是出现“该公众号提供的服务出现故障请稍后再试”这样的提示，可能是你的接口配置url无法启用，就需要你再次修改url。我之前用Sunny-Ngrok配置的url但是突然不能用了，于是就是换了ngrok，可以从<a href="http://ngrok.ciqiuwl.cn/" target="_blank" rel="external">这里</a>下载客户端，解压即可。</p><p>在命令（cmd）行下进入到ngrok客户端目录下，执行 ngrok -config=ngrok.cfg -subdomain xxx 80  (xxx 是你自定义的域名前缀)，建议批处理</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx29.png" alt="wx29"></p><p> 如果连接成功，会提示如下信息：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx30.png" alt="wx30"></p><h2 id="微信消息解析"><a href="#微信消息解析" class="headerlink" title="微信消息解析"></a>微信消息解析</h2><p>把xml格式的数据转成Object。先判断如果数据是object的话进行遍历，得到一个key对应的一条数据item，接着遍历某一条数据的key。判断item是否是数组或者item的长度为0，继续执行，如果item的长度为1，取出值判断如果类型是object进行深层的遍历。</p><p><strong>server/wechat-lib/util.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatMessage</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> message = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(result)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</div><div class="line">            <span class="keyword">let</span> item = result[keys[i]]</div><div class="line">            <span class="keyword">let</span> key = keys[i]</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || item.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (item.length === <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">let</span> val = item[<span class="number">0</span>]</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</div><div class="line">                   message[key] = formatMessage(val)</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    message[key] = (val || <span class="string">''</span>).trim()</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                message[key] = []</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; item.length; j++) &#123;</div><div class="line">                    message[key].push(formatMessage(item(j)))</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> message</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将xml格式的数据转化为Object，挂在ctx.weixin，再将回复内容解析出来，得到解析后的微信消息，修改<strong>middleware.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> content = <span class="keyword">await</span> util.parseXML(data)</div><div class="line"><span class="keyword">const</span> message = util.formatMessage(content.xml)</div><div class="line"></div><div class="line">ctx.weixin = message</div><div class="line"><span class="keyword">await</span> reply.apply(ctx, [ctx, next])</div><div class="line"></div><div class="line"><span class="keyword">const</span> replyBody = ctx.body</div><div class="line"><span class="keyword">const</span> msg = ctx.weixin</div><div class="line"><span class="keyword">const</span> xml = util.tpl(replyBody, msg)</div></pre></td></tr></table></figure><p>通过套模板渲染出xml的数据。</p><h2 id="封装回复消息模板"><a href="#封装回复消息模板" class="headerlink" title="封装回复消息模板"></a>封装回复消息模板</h2><p>回复用户消息类型包括回复文本消息、回复图片消息、回复语音消息、回复视频消息、回复音乐消息、回复图文消息，这里使用ejs模板。</p><p><strong>server/wechat-lib/tpi.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ejs <span class="keyword">from</span> <span class="string">'ejs'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> tpl = <span class="string">`</span></div><div class="line">    &lt;xml&gt;</div><div class="line">        &lt;ToUserName&gt;&lt;![CDATA[&lt;%= toUserName %&gt;]]&gt;&lt;/ToUserName&gt;</div><div class="line">        &lt;FromUserName&gt;&lt;![CDATA[&lt;%= fromUser %&gt;]]&gt;&lt;/FromUserName&gt;</div><div class="line">        &lt;CreateTime&gt;&lt;%= createTime %&gt;&lt;/CreateTime&gt;</div><div class="line">        &lt;MsgType&gt;&lt;![CDATA[&lt;%= msgType %&gt;]]&gt;&lt;/MsgType&gt;</div><div class="line">        </div><div class="line">        &lt;% if (msgType === 'text') &#123; %&gt;</div><div class="line">            &lt;Content&gt;&lt;![CDATA[&lt;%- content%&gt;]]&gt;&lt;/Content&gt;</div><div class="line">        &lt;% &#125; else if (msgType === 'image') &#123;%&gt;          </div><div class="line">            ...</div><div class="line">&lt;% &#125; else if (msgType === 'voice') &#123;%&gt;</div><div class="line">...</div><div class="line">&lt;% &#125; else if (msgType === 'video') &#123;%&gt;</div><div class="line">...</div><div class="line">&lt;% &#125; else if (msgType === 'music') &#123;%&gt;</div><div class="line">...</div><div class="line">&lt;% &#125; else if (msgType === 'news') &#123;%&gt; </div><div class="line">...</div><div class="line">        &lt;% &#125; %&gt;</div><div class="line">    &lt;/xml&gt;</div><div class="line">`</div><div class="line"></div><div class="line"><span class="keyword">const</span> compiled = ejs.compile(tpl)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> compiled</div></pre></td></tr></table></figure><p>把所有的消息类型放到一个模板中，根据msgType的值匹配相应的模板。</p><p>重启服务，在手机上发送消息1，控制台打印消息的类型、内容以及消息id，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx31.png" alt="wx31"></p><h2 id="七种微信普通消息的接收"><a href="#七种微信普通消息的接收" class="headerlink" title="七种微信普通消息的接收"></a>七种微信普通消息的接收</h2><p>先对消息类型进行筛选。修改<strong>reply.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> message = ctx.weixin</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(message)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (message.MsgType === <span class="string">'text'</span>) &#123;</div><div class="line">        ctx.body = message.Content</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'image'</span>) &#123;</div><div class="line">        ctx.body = &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'image'</span>,</div><div class="line">            <span class="attr">mediaId</span>: message.MediaId</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'voice'</span>) &#123;</div><div class="line">        ctx.body = &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'voice'</span>,</div><div class="line">            <span class="attr">mediaId</span>: message.MediaId</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'video'</span>) &#123;</div><div class="line">        ctx.body = &#123;</div><div class="line">            <span class="attr">title</span>: message.ThumbMediaId,</div><div class="line">            <span class="attr">type</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="attr">mediaId</span>: message.MediaId</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'location'</span>) &#123;</div><div class="line">        ctx.body = message.Location_X + <span class="string">' : '</span> + message.Location_Y + <span class="string">' : '</span> + message.Label</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'link'</span>) &#123;</div><div class="line">        ctx.body = [&#123;</div><div class="line">            <span class="attr">title</span>: message.Title,</div><div class="line">            <span class="attr">description</span>: message.Description,</div><div class="line">            <span class="attr">picUrl</span>: <span class="string">'http://mmbiz.qpic.cn/mmbiz_jpg/8U36YTkvibWtRgIHqiacSLeSJpANdafutLibrEvXlLQNhxToj45wyj5FemhzRRppp4mC8nRFd9n4kV3vgCXXDRXicw/0'</span>,</div><div class="line">            <span class="attr">url</span>: message.url</div><div class="line">        &#125;]  </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>微信对测试号发送消息回复成功，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx32.png" alt="wx32"></p><h2 id="关注-取消关注事件"><a href="#关注-取消关注事件" class="headerlink" title="关注/取消关注事件"></a>关注/取消关注事件</h2><p>关注和取消关注事件是根据MsgType区分的，但event不一样，修改<strong>server/wechat/reply.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> message = ctx.weixin</div><div class="line"></div><div class="line">    <span class="comment">// 关注/取消关注</span></div><div class="line">    <span class="keyword">if</span> (message.MsgType === <span class="string">'event'</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (message.Event === <span class="string">'subscribe'</span>) &#123;</div><div class="line">            ctx.body = tip</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'unsubscribe'</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'取消关注'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.Event === <span class="string">'LOCATION'</span>) &#123;</div><div class="line">            ctx.body = message.Latitude + <span class="string">' : '</span> + message.Longitude</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.MsgType === <span class="string">'text'</span>) &#123;</div><div class="line">        ctx.body = message.Content</div><div class="line">    &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="多媒体与图文素材处理"><a href="#多媒体与图文素材处理" class="headerlink" title="多媒体与图文素材处理"></a>多媒体与图文素材处理</h2><p>项目中可能会用到图片上传图片处理，所以要把图像素材管理的相关接口获取到。</p><h3 id="上传素材"><a href="#上传素材" class="headerlink" title="上传素材"></a>上传素材</h3><p>增加素材系列相关的请求地址，修改<strong>server/wechat-lib/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> api = &#123;</div><div class="line">    <span class="attr">accessToken</span>: base + <span class="string">'token?grant_type=client_credential'</span>,</div><div class="line">    <span class="attr">temporary</span>: &#123;</div><div class="line">        <span class="attr">upload</span>: base + <span class="string">'media/upload?'</span>,          <span class="comment">// 新增临时素材</span></div><div class="line">        fetch: base + <span class="string">'media/get?'</span>               <span class="comment">// 获取临时素材</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">permanent</span>: &#123;</div><div class="line">        <span class="attr">upload</span>: base + <span class="string">'material/add_material?'</span>,   <span class="comment">// 新增其他类型永久素材</span></div><div class="line">        uploadNews: base + <span class="string">'material/add_news?'</span>,   <span class="comment">// 新增永久图文素材</span></div><div class="line">        uploadNewsPic: base + <span class="string">'media/uploadimg?'</span>,  <span class="comment">// 上传图文消息内的图片</span></div><div class="line">        fetch: base + <span class="string">'material/get_material?'</span>,    <span class="comment">// 获取永久素材</span></div><div class="line">        del: base + <span class="string">'material/del_material?'</span>,      <span class="comment">// 删除永久素材</span></div><div class="line">        update: base + <span class="string">'material/update_news?'</span>,    <span class="comment">// 修改永久图文素材</span></div><div class="line">        count: base + <span class="string">'material/get_materialcount?'</span>, <span class="comment">// 获取素材总数</span></div><div class="line">        batch: base + <span class="string">'material/batchget_material?'</span>  <span class="comment">// 获取素材列表</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上传参数：token，类型type，素材路径material，标识永久素材还是临时素材permanent。上传素材其实就是构建表单，声明对象form，拿到上传地址url，默认是临时素材地址<code>api.temporary.upload</code>。如果指定是永久素材就改成永久素材地址<code>api.permanent.upload</code>，通过loadsh继承permanent数据，如果类型是pic修改成上传图片的地址<code>api.permanent.uploadNewsPic</code>，如果类型是news修改成上传图文地址<code>api.permanent.uploadNews</code>，，同时form修改成material。；反之，如果不是图文类型素材的话可能是图片或者视频，这时就需要构建表单了。通过<code>formsteam()</code>生成表单对象，声明statFile()函数读取文件大小，拿到图片的大小通过<code>form.file()</code>增加字段media。如果不是永久类型， uploadUrl后面追加type，反之，把access_token加到表单里。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">uploadMaterial (token, type, material, permanent) &#123;</div><div class="line">        <span class="keyword">let</span> form = &#123;&#125;</div><div class="line">        <span class="keyword">let</span> url = api.temporary.upload</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (permanent) &#123;</div><div class="line">            url = api.permanent.upload</div><div class="line">            _.extend(form, permanent)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (type === <span class="string">'pic'</span>) &#123;</div><div class="line">            url = api.permanent.uploadNewsPic</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (type === <span class="string">'news'</span>) &#123;</div><div class="line">            url = api.permanent.uploadNews</div><div class="line">            form = material</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            form = formsteam()</div><div class="line">            <span class="keyword">const</span> stat = <span class="keyword">await</span> statFile(material)</div><div class="line">            form.file(<span class="string">'media'</span>, material, path.basename(material), stat.size)</div><div class="line">        &#125;</div><div class="line">  <span class="keyword">let</span> uploadUrl = url + <span class="string">'assess_token'</span> + token</div><div class="line">        <span class="keyword">if</span> (!permanent) &#123;</div><div class="line">            uploadUrl += <span class="string">'&amp;type='</span> + type</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            form.field(<span class="string">'access_token'</span>, token)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 构建上传需要的对象</span></div><div class="line">        <span class="keyword">const</span> options = &#123;</div><div class="line">            <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">            <span class="attr">url</span>: uploadUrl,</div><div class="line">            <span class="attr">json</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (type === <span class="string">'news'</span>) &#123;</div><div class="line">            options.body = form</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            options.formData = form</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> options</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>构建上传需要的对象，如果type是图文类型news的话，设置options.body为当前form，否则上传图片的表单域，最后返回options。也就是说<code>uploadMaterial()</code>不会真正上传，只是配置好它要上传的参数。</p><p>封装上传动作：传进operation和参数args，拿到token和哪种类型的options，通过<code>request()</code>获取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> handle (operation, ...args) &#123;</div><div class="line">  <span class="keyword">const</span> tokenData = <span class="keyword">await</span> <span class="keyword">this</span>.fetchAccessToken()</div><div class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>[operation](tokenData.access_token, ...args)</div><div class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.request(options)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> data</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试上传视频临时素材，修改router.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</div><div class="line">    router.all(<span class="string">'/wx'</span>, wechatMiddle(config.wechat, reply))</div><div class="line"></div><div class="line">    router.get(<span class="string">'/upload'</span>, (ctx, next) =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> mp = <span class="built_in">require</span>(<span class="string">'../wechat'</span>)</div><div class="line">        <span class="keyword">let</span> client = mp.getWechat()</div><div class="line"></div><div class="line">        client.handle(<span class="string">'uploadMaterial'</span>, <span class="string">'video'</span>, resolve(__dirname, <span class="string">'../../hu.mp4'</span>))</div><div class="line">    &#125;)</div><div class="line"> </div><div class="line">    app</div><div class="line">        .use(router.routes())</div><div class="line">        .use(router.allowedMethods())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试上传视频永久素材，修改router.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router() </div><div class="line">    router.all(<span class="string">'/wx'</span>, wechatMiddle(config.wechat, reply))</div><div class="line"></div><div class="line">    router.get(<span class="string">'/upload'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> mp = <span class="built_in">require</span>(<span class="string">'../wechat'</span>)</div><div class="line">        <span class="keyword">let</span> client = mp.getWechat()</div><div class="line"></div><div class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> client.handle(<span class="string">'uploadMaterial'</span>, <span class="string">'video'</span>,  </div><div class="line">                        resolve(__dirname, <span class="string">'../../hu.mp4'</span>), </div><div class="line">                        &#123;<span class="attr">type</span>: <span class="string">'video'</span>, <span class="attr">description</span>: <span class="string">'&#123;"title": "haha", "introduction": "heihei"&#125;'</span>&#125;)</div><div class="line">        <span class="built_in">console</span>.log(data)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'#################'</span>)</div><div class="line">    &#125;)</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试上传图片永久素材，修改router.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> client.handle(<span class="string">'uploadMaterial'</span>, <span class="string">'image'</span>,  </div><div class="line">                        resolve(__dirname, <span class="string">'../../hu.jpg'</span>), </div><div class="line">                        &#123;<span class="attr">type</span>: <span class="string">'iamge'</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(data)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'#################'</span>)</div></pre></td></tr></table></figure><p>测试上传图片临时素材，修改router.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> client.handle(<span class="string">'uploadMaterial'</span>, <span class="string">'image'</span>,  </div><div class="line">                        resolve(__dirname, <span class="string">'../../hu.jpg'</span>))</div><div class="line"><span class="built_in">console</span>.log(data)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'#################'</span>)</div></pre></td></tr></table></figure><p>每次修改router.js后重启项目，输入localhost:8080，看到控制台打印信息，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx33.png" alt="wx33"></p><h3 id="图文创建"><a href="#图文创建" class="headerlink" title="图文创建"></a>图文创建</h3><p>图文素材必须是永久素材</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/upload'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> mp = <span class="built_in">require</span>(<span class="string">'../wechat'</span>)</div><div class="line">        <span class="keyword">let</span> client = mp.getWechat()</div><div class="line"></div><div class="line">        <span class="keyword">const</span> news = &#123;</div><div class="line">            <span class="attr">articles</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"title"</span>: <span class="string">'SSR1'</span>,</div><div class="line">                    <span class="string">"thumb_media_id"</span>: <span class="string">'MS9ix5MrmsSADOa6HKBpofmkA-LY8ddiEljpegn2P2M'</span>,</div><div class="line">                    <span class="string">"author"</span>: <span class="string">'kakajing'</span>,</div><div class="line">                    <span class="string">"digest"</span>: <span class="string">'无摘要'</span>,</div><div class="line">                    <span class="string">"show_cover_pic"</span>: <span class="number">1</span>,</div><div class="line">                    <span class="string">"content"</span>: <span class="string">'无内容'</span>,</div><div class="line">                    <span class="string">"content_source_url"</span>: <span class="string">'https://www.baidu.com/'</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"title"</span>: <span class="string">'SSR2'</span>,</div><div class="line">                    <span class="string">"thumb_media_id"</span>: <span class="string">'MS9ix5MrmsSADOa6HKBpofmkA-LY8ddiEljpegn2P2M'</span>,</div><div class="line">                    <span class="string">"author"</span>: <span class="string">'kakajing'</span>,</div><div class="line">                    <span class="string">"digest"</span>: <span class="string">'无摘要'</span>,</div><div class="line">                    <span class="string">"show_cover_pic"</span>: <span class="number">0</span>,</div><div class="line">                    <span class="string">"content"</span>: <span class="string">'无内容'</span>,</div><div class="line">                    <span class="string">"content_source_url"</span>: <span class="string">'https://www.baidu.com/'</span></div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> client.handle(<span class="string">'uploadMaterial'</span>, <span class="string">'news'</span>,  news, &#123;&#125;)</div><div class="line">        <span class="built_in">console</span>.log(data)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'#################'</span>)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h3 id="获取永久素材"><a href="#获取永久素材" class="headerlink" title="获取永久素材"></a>获取永久素材</h3><p>获取素材要区分是临时素材还是永久素材</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">fetchMaterial (token, mediaId, type, permanent) &#123;</div><div class="line">        <span class="keyword">let</span> form = &#123;&#125;</div><div class="line">        <span class="keyword">let</span> fetchUrl = api.temporary.fetch</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (permanent) &#123;</div><div class="line">            fetchUrl = api.permanent.fetch</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> url = fetchUrl + <span class="string">'access_token='</span> + token</div><div class="line">        <span class="keyword">let</span> options = &#123;<span class="attr">method</span>: <span class="string">"POST"</span>, <span class="attr">url</span>: url&#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (permanent) &#123;</div><div class="line">            form.media_id = mediaId</div><div class="line">            form.access_token = token</div><div class="line">            options.body = form</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (type === <span class="string">'video'</span>) &#123;</div><div class="line">                url = url.replace(<span class="string">'https://'</span>, <span class="string">'http://'</span>)</div><div class="line">            &#125;</div><div class="line">            url += <span class="string">'&amp;media_id'</span> + mediaId</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> options</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="删除永久素材"><a href="#删除永久素材" class="headerlink" title="删除永久素材"></a>删除永久素材</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deleteMaterial (token, mediaId) &#123;</div><div class="line">        <span class="keyword">const</span> form = &#123;<span class="attr">media_id</span>: mediaId&#125;</div><div class="line">        <span class="keyword">const</span> url = api.permanent.del + <span class="string">'access_token='</span> + token + <span class="string">'&amp;media_id='</span> + mediaId</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="修改永久图文素材"><a href="#修改永久图文素材" class="headerlink" title="修改永久图文素材"></a>修改永久图文素材</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">updateMaterial (token, mediaId, news) &#123;</div><div class="line">  <span class="keyword">const</span> form = &#123;<span class="attr">media_id</span>: mediaId&#125;</div><div class="line">  _.extend(form, news)</div><div class="line">  <span class="keyword">const</span> url = api.permanent.update + <span class="string">'access_token='</span> + token + <span class="string">'&amp;media_id='</span> + mediaId</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: url, <span class="attr">body</span>: form&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取素材总数"><a href="#获取素材总数" class="headerlink" title="获取素材总数"></a>获取素材总数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">countMaterial (token) &#123;</div><div class="line">  <span class="keyword">const</span> url = api.permanent.count + <span class="string">'access_token='</span> + token</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">url</span>: url&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取素材列表"><a href="#获取素材列表" class="headerlink" title="获取素材列表"></a>获取素材列表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">batchMaterial (token, options) &#123;</div><div class="line">  options.type = options.type || <span class="string">'iamge'</span></div><div class="line">  options.offset = options.offset || <span class="number">0</span></div><div class="line">  options.count = options.count || <span class="number">10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取token&quot;&gt;&lt;a href=&quot;#获取token&quot; class=&quot;headerlink&quot; title=&quot;获取token&quot;&gt;&lt;/a&gt;获取token&lt;/h1&gt;&lt;p&gt;请求官方API的地址将获取到的数据存到数据库，除此之外还有很多与微信服务器之间的交互场景，最好是把token和其他异步请求封装到一个文件里，就可以把这个文件统一看做微信请求的构造函数，一切与微信交互的功能都放到这个文件里，把它当做一个入口。&lt;/p&gt;
&lt;p&gt;新建server/wechat-lib/index.js作为整个微信异步场景的入口文件，统一管理微信API地址。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://kakajing.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发(二)：构建公众号服务器</title>
    <link href="http://kakajing.github.io/2018/08/04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://kakajing.github.io/2018/08/04/微信公众号开发(二)：构建公众号服务器/</id>
    <published>2018-08-03T16:07:22.000Z</published>
    <updated>2018-08-06T08:47:56.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="申请公众号"><a href="#申请公众号" class="headerlink" title="申请公众号"></a>申请公众号</h1><p>在构建项目之前，我需要去注册申请一个<a href="https://mp.weixin.qq.com/" target="_blank" rel="external">微信公众号</a>，点击立即注册，选择服务号，只需要按照流程步骤来走即可，这里不详细解说了。</p><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>通过命令初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init nuxt/koa nuxt-ka</div></pre></td></tr></table></figure><p>项目创建成功后在根目录下创建ecosystem.json，表示最终发布上线的发布脚本。</p><a id="more"></a><p>server目录下index.js为入口文件，定义host和port变量，通过<code>start()</code>函数开启后台服务。创建nuxt实例<code>new Nuxt(config)</code>，判断如果当前是dev开发环境下实时编译整个项目<code>await nuxt.build()</code>，然后通过<code>nuxt.render(ctx.req, ctx.res)</code>返回页面结果，最后通过<code>app.listen()</code>启动服务器。</p><p>明白了index.js的用处，接着对代码做一些修改。</p><p><strong>server/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Import and Set Nuxt.js options</span></div><div class="line"><span class="keyword">let</span> config = <span class="built_in">require</span>(<span class="string">'../nuxt.config.js'</span>)</div><div class="line">config.dev = !(process.env === <span class="string">'production'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> host = process.env.HOST || <span class="string">'127.0.0.1'</span></div><div class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> () &#123;</div><div class="line">    <span class="keyword">this</span>.app = <span class="keyword">new</span> Koa()</div><div class="line">    <span class="keyword">this</span>.useMiddleWares(<span class="keyword">this</span>.app)(MIDDLEWARES)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 中间件</span></div><div class="line">  useMiddleWares (app) &#123;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">async</span> start () &#123;</div><div class="line">    <span class="comment">// Instantiate nuxt.js</span></div><div class="line">    <span class="keyword">const</span> nuxt = <span class="keyword">new</span> Nuxt(config)</div><div class="line"></div><div class="line">    <span class="comment">// Build in development</span></div><div class="line">    <span class="keyword">if</span> (config.dev) &#123;</div><div class="line">      <span class="keyword">const</span> builder = <span class="keyword">new</span> Builder(nuxt)</div><div class="line">      <span class="keyword">await</span> builder.build()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">      <span class="keyword">await</span> next()</div><div class="line">      ctx.status = <span class="number">200</span> <span class="comment">// koa defaults to 404 when it sees that status is unset</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        ctx.res.on(<span class="string">'close'</span>, resolve)</div><div class="line">        ctx.res.on(<span class="string">'finish'</span>, resolve)</div><div class="line">        nuxt.render(ctx.req, ctx.res, promise =&gt; &#123;</div><div class="line">          <span class="comment">// nuxt.render passes a rejected promise into callback on error.</span></div><div class="line">          promise.then(resolve).catch(reject)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">this</span>.app.listen(port, host)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Server listening on '</span> + host + <span class="string">':'</span> + port) <span class="comment">// eslint-disable-line no-console</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Server()</div><div class="line">app.start()</div></pre></td></tr></table></figure><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>微信公众号是需要我们的服务器和微信服务器有基于消息的http请求交互，在项目中要有一层用于接管来自微信服务器推送消息，这些推送消息的功能统一放到中间件里，这里增加个<code>userMiddleWare()</code>中间件，中间件不止有一个，这就需要对于多个中间件做统一处理。</p><p>为了减少重复添加代码使用map来对中间件进行管理，这里就要借助工具第三方库ramda对中间件做管理。首先声明一个数组<code>MIDDLEWARES</code>来配置中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> R <span class="keyword">from</span> <span class="string">'ramda'</span></div><div class="line"></div><div class="line">...</div><div class="line"><span class="comment">// 路径</span></div><div class="line"><span class="keyword">const</span> r = <span class="function"><span class="params">path</span> =&gt;</span> resolve(__dirname, path)</div><div class="line"><span class="keyword">const</span> MIDDLEWARES = [<span class="string">'router'</span>]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> () &#123;</div><div class="line">    <span class="keyword">this</span>.app = <span class="keyword">new</span> Koa()</div><div class="line">    <span class="keyword">this</span>.useMiddleWares(<span class="keyword">this</span>.app)(MIDDLEWARES)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 中间件</span></div><div class="line">  useMiddleWares (app) &#123;</div><div class="line">    <span class="keyword">return</span> R.map(R.compose(</div><div class="line">      R.map(<span class="function"><span class="params">i</span> =&gt;</span> i(app)),</div><div class="line">      <span class="built_in">require</span>,</div><div class="line">      i =&gt; <span class="string">`<span class="subst">$&#123;r(<span class="string">'./middlewares'</span>)&#125;</span>/<span class="subst">$&#123;i&#125;</span>`</span></div><div class="line">    ))</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过<code>R.map()</code>解析数组中的每一个值，然后交给可以生成绝对路径的函数<code>i =&gt; ${r(&#39;./middlewares&#39;)}/${i}</code>，再把路径交给require，通过require加载这个模块，再对它传入i，让每个中间件都能拿到app对象同时进行初始化工作。</p><h1 id="增加router"><a href="#增加router" class="headerlink" title="增加router"></a>增加router</h1><p>server目录下创建middleWares添加router.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'koa-router'</span></div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'../config'</span></div><div class="line"><span class="keyword">import</span> sha1 <span class="keyword">from</span> <span class="string">'sha1'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</div><div class="line"></div><div class="line">    router.get(<span class="string">'/wx'</span>, (ctx, next) =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> token = config.wechat.token</div><div class="line">        <span class="comment">// 参数</span></div><div class="line">        <span class="keyword">const</span> &#123;</div><div class="line">            signature,</div><div class="line">            nonce,</div><div class="line">            timestamp,</div><div class="line">            echostr</div><div class="line">        &#125; = ctx.query</div><div class="line"></div><div class="line">        <span class="comment">// 对参数进行排序</span></div><div class="line">        <span class="keyword">const</span> str = [token, timestamp, nonce].sort().join(<span class="string">''</span>)</div><div class="line">        <span class="comment">// 加密</span></div><div class="line">        <span class="keyword">const</span> sha = sha1(str)</div><div class="line">        <span class="keyword">if</span> (sha === signature) &#123;</div><div class="line">            ctx.body = echostr</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ctx.body = <span class="string">'Failed'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    app.use(router.routes())</div><div class="line">    app.use(router.allowedMethods())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过<code>router.get()</code>拿到请求，<code>/wx</code>表示对服务器配置的路径。接收微信服务器推送的get请求时可以获取到参数，接着对参数进行排序加密。</p><h1 id="安装所需要的依赖包"><a href="#安装所需要的依赖包" class="headerlink" title="安装所需要的依赖包"></a>安装所需要的依赖包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yarn add koa-router</div><div class="line">yarn add sha1</div><div class="line">yarn add babel-preset-stage-3@6.24.1 -D</div><div class="line">yarn add babel-preset-latest-node@0.2.2 -D</div></pre></td></tr></table></figure><p><strong>再回顾一下入口文件server/index.js的执行流程：</strong></p><p>在服务器里通过ramda函数式库进行管理中间件<code>MIDDLEWARES</code>，通过<code>new Server()</code>开启服务，启动服务后如果能接收到来自微信服务器的请求，router就能通过<code>/wx</code>的路径规则监听到推送的请求，根据请求获取到参数，然后根据微信的加密规则对这些参数进行排序加密。根据加密的值是否是符合的，对微信服务器进行响应。</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>在项目根目录下新建start.js，通过start.js间接的调用server/index.js启动整个后台服务。</p><p><strong>start.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'babel-core/register'</span>)(&#123;</div><div class="line">    <span class="string">'presets'</span>: [</div><div class="line">        <span class="string">'stage-3'</span>,</div><div class="line">        <span class="string">'latest-node'</span></div><div class="line">    ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>)</div><div class="line"><span class="built_in">require</span>(<span class="string">'./server'</span>)</div></pre></td></tr></table></figure><p>配置启动命令，修改package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">    "dev": "nodemon -w ./server -w ./start.js --exec node ./start.js",</div><div class="line">    ...</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>同时打开配置好的服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sunny.exe clientid 隧道id</div></pre></td></tr></table></figure><p>修改url和token，点击提交。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx23.png" alt="wx23"></p><p>服务器成功相应，说明访问成功！如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx22.png" alt="wx22"></p><h1 id="微信消息"><a href="#微信消息" class="headerlink" title="微信消息"></a>微信消息</h1><p>用户在公众号的窗口上可能会录语音、上传图片、输入文案等等，这些交互叫做事件。这些事件触发数据的变化会上报给微信服务器，微信服务器收到这些事件后会按照它们的类型分为相应的标准的xml数据来通知我们，通知的方式就是在微信公众号后台配置的url，也就是已经接入的地址，所有用户交互的数据都会以这个地址来流到我们的服务器里。</p><p>如果是本地开发的话会通过Ngrok把本地某个端口的服务代理出去，如果是生产环境下的话，不需要代理工具，通过url的数据流到我们的后台服务器。数据进来之后会经过koa路由的中间件，然后根据get或post请求做响应的解析，如果是post请求的话就把整个数据包解析出来，根据解析出来的数据会进行回复策略的制定，这个回复策略可能会查数据库，可能会读本地的json文件。经过回复策略的处理后，整个回复的内容就已经有了，内容在回复给微信服务器之前需要去同步全局的票据，也就是access_token。</p><h2 id="access-token"><a href="#access-token" class="headerlink" title="access_token"></a>access_token</h2><p>access_token就相当于是一把钥匙，只有给出这把钥匙微信服务器才会认同发请求的对方是合法的一方，如果access_token不合法或者过期或是不存在，那么相应的回复也不会生效。拿到access_token之后，把内容根据回复策略进行拼接生成一份标准的回复数据，这个回复数据需要套到xml模板里去，最后在把xml模板数据交给微信服务器，下发给触发事件的用户，用户就可以看到之前某个交互带来的结果，这样就形成完整闭环。</p><p>闭环里有几个关键点：</p><p>1、koa路由中间件来针对微信的请求做拦截和处理。</p><p>2、对get或post请求的区分。如果是get请求往往是第一次捕获认证的身份。如果是post请求就意味是一个事件通知或者是一个数据，需要把这个数据解析出来，这里就需要解析的中间件。</p><p>3、回复策略。回复策略会产生查询的异步操作，这里也需要中间件。</p><p>4、对access_token的处理，需要对它进行存储。</p><h2 id="增加数据库中间件"><a href="#增加数据库中间件" class="headerlink" title="增加数据库中间件"></a>增加数据库中间件</h2><p>把token存储到数据库里。数据库选择使用mongoose，安装mongoose。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yan add mongoose</div></pre></td></tr></table></figure><p>拿到实例app，设置mongoose连接中断时、出错时、打开时做的处理，连接中断时重新连接数据库，出错时打印错误日志。成功连接数据库后对Scheam进行初始化数据，读取所有的models对它们进行过滤，只筛选出后缀为.js的文件。</p><p><strong>server/middlewares/database.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span></div><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'../config'</span></div><div class="line"><span class="keyword">import</span> &#123;resolve&#125; <span class="keyword">from</span> <span class="string">'path'</span></div><div class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> models = resolve(__dirname, <span class="string">'../database/schema'</span>) </div><div class="line"></div><div class="line"><span class="comment">// 同步读入模型文件</span></div><div class="line">fs.readdirSync(models)</div><div class="line">    .filter(<span class="function"><span class="params">file</span> =&gt;</span> ~file.search(<span class="regexp">/^[^\.].*js$/</span>))</div><div class="line">    .forEach(<span class="function"><span class="params">file</span> =&gt;</span> <span class="built_in">require</span>(resolve(models, file)))</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> database = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">    mongoose.set(<span class="string">'debug'</span>, <span class="literal">true</span>)</div><div class="line"></div><div class="line">    mongoose.connect(config.db)</div><div class="line"></div><div class="line">    <span class="comment">// 连接中断</span></div><div class="line">    mongoose.connection.on(<span class="string">'disconnected'</span>, () =&gt; &#123;</div><div class="line">        mongoose.connect(config.db)</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 出错</span></div><div class="line">    mongoose.connection.on(<span class="string">'error'</span>, err =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.error(err)</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 打开</span></div><div class="line">    mongoose.connection.on(<span class="string">'open'</span>, <span class="keyword">async</span> =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Connected to MongoDB '</span>, config.db)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>新建token.js存放access_token。声明TokenSchema传入token字段，保存每条数据之前先经过中间件的处理，判断是否是新增数据，记录时间。</p><p><strong>server/database/schema/token.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">const</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">const</span> TokenSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">access_token</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">expires_in</span>: <span class="built_in">Number</span>,</div><div class="line">    <span class="attr">meta</span>: &#123;</div><div class="line">        <span class="attr">createdAt</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Date</span>,</div><div class="line">            <span class="attr">default</span>: <span class="built_in">Date</span>.now()</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">upatedAt</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Date</span>,</div><div class="line">            <span class="attr">default</span>: <span class="built_in">Date</span>.now()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 保存每条数据之前先经过中间件的处理，判断是否是新增数据</span></div><div class="line">TokenSchema.pre(<span class="string">'save'</span>, (next) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isNew) &#123;</div><div class="line">        <span class="keyword">this</span>.meta.createdAt = <span class="keyword">this</span>.meta.upatedAt = <span class="built_in">Date</span>.now()</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.meta.upatedAt = <span class="built_in">Date</span>.now()</div><div class="line">    &#125;</div><div class="line">    next()</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>给TokenSchema增加静态方法，从model调用模型。通过<code>mongoose.model()</code>拿到token数据模型，创建数据模型实例<code>new Token()</code>，保存token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">TokenSchema.static = &#123;</div><div class="line">    <span class="comment">// 获取token</span></div><div class="line">    <span class="keyword">async</span> getAccessToken () &#123;</div><div class="line">        <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="keyword">this</span>.findOne(&#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'access_token'</span></div><div class="line">        &#125;).exec()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> token</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 保存token</span></div><div class="line">    <span class="keyword">async</span> saveAccessToken (data) &#123;</div><div class="line">        <span class="keyword">let</span> token = <span class="keyword">await</span> <span class="keyword">this</span>.findOne(&#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'access_token'</span></div><div class="line">        &#125;).exec()</div><div class="line">        <span class="keyword">if</span> (token) &#123;</div><div class="line">            token.token = data.access_token</div><div class="line">            token.expires_in = data.expires_in</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            token = <span class="keyword">new</span> token(&#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'access_token'</span>,</div><div class="line">                <span class="attr">token</span>: data.access_token,</div><div class="line">                <span class="attr">expires_in</span>: data.expires_in</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">await</span> token.save()</div><div class="line">        <span class="keyword">return</span> data</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> Token = mongoose.model(<span class="string">'Token'</span>, TokenSchema)</div></pre></td></tr></table></figure><p>在server/index.js修改<code>MIDDLEWARES</code>变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MIDDLEWARES = [<span class="string">'database'</span>, <span class="string">'router'</span>]</div></pre></td></tr></table></figure><p>修改后MIDDLEWARES里面的database就被关联到middlewares/database.js，从而加载schema。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;申请公众号&quot;&gt;&lt;a href=&quot;#申请公众号&quot; class=&quot;headerlink&quot; title=&quot;申请公众号&quot;&gt;&lt;/a&gt;申请公众号&lt;/h1&gt;&lt;p&gt;在构建项目之前，我需要去注册申请一个&lt;a href=&quot;https://mp.weixin.qq.com/&quot;&gt;微信公众号&lt;/a&gt;，点击立即注册，选择服务号，只需要按照流程步骤来走即可，这里不详细解说了。&lt;/p&gt;
&lt;h1 id=&quot;初始化项目&quot;&gt;&lt;a href=&quot;#初始化项目&quot; class=&quot;headerlink&quot; title=&quot;初始化项目&quot;&gt;&lt;/a&gt;初始化项目&lt;/h1&gt;&lt;p&gt;通过命令初始化项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vue init nuxt/koa nuxt-ka&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;项目创建成功后在根目录下创建ecosystem.json，表示最终发布上线的发布脚本。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://kakajing.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发(一)：环境配置</title>
    <link href="http://kakajing.github.io/2018/08/03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://kakajing.github.io/2018/08/03/微信公众号开发(一)：环境配置/</id>
    <published>2018-08-02T18:20:35.000Z</published>
    <updated>2018-08-06T08:46:31.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><h2 id="安装Nodejs生产环境"><a href="#安装Nodejs生产环境" class="headerlink" title="安装Nodejs生产环境"></a>安装Nodejs生产环境</h2><p>centos下登录服务器，通过yum安装项目运行中包括服务器日常维护要用到的</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install git vim openssl build-essential libssh-dev wget curl</div></pre></td></tr></table></figure><a id="more"></a><p>环境安装后，通过git安装部署项目到服务器，生成SSR证书。</p><p>找到<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>的仓库，复制安装脚本然后运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</div></pre></td></tr></table></figure><p>通过<code>nvm ls</code>命令查看</p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install v8.11.2</div></pre></td></tr></table></figure><p>安装完成后执行命令来设置服务器使用node当前版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm user v8.11.2</div></pre></td></tr></table></figure><p>如图：</p><p><img src="http://oxkc6g4t4.bkt.clouddn.com/wx16.png" alt="wx16"></p><p> 设置v8.11.2为服务器默认版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm alias default v8.11.2</div></pre></td></tr></table></figure><p>如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx17.png" alt="wx17"></p><h2 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h2><p>示例：运行server.js</p><p>通过<code>node server</code>命令访问服务，首先要关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div></pre></td></tr></table></figure><p>关闭防火墙重新执行node server命令，在另一个终端上执行命令访问服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://127.0.0.1:3000</div></pre></td></tr></table></figure><p>控制台上打印出信息，说明访问成功！如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx18.png" alt="wx18"></p><p>安装之后检查bash脚本有没有加上一下代码，如果没有加上即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</div></pre></td></tr></table></figure><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><p>这个项目最后会上线，所以尽量做到从工具到代码能够严谨和规范，就不再用npm安装相应的本地模块，而是使用约束更苛刻的yarn，需要分别在本地和线上安装yarn。</p><h2 id="本地安装yarn"><a href="#本地安装yarn" class="headerlink" title="本地安装yarn"></a>本地安装yarn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install yarn</div></pre></td></tr></table></figure><h2 id="服务器上安装yarn"><a href="#服务器上安装yarn" class="headerlink" title="服务器上安装yarn"></a>服务器上安装yarn</h2><p><a href="https://yarn.bootcss.com/docs/install.html#linux-tab" target="_blank" rel="external">安装yarn</a>选择相应的系统安装即可。这里是Linux平台安装</p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo</div></pre></td></tr></table></figure><p>然后再次执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install yarn</div></pre></td></tr></table></figure><p>查看yarn版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn -v</div></pre></td></tr></table></figure><p>使用yarn替代了npm安装，为了不影响速度，可以把源指向国内，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>设置完成后，用npm安装全局模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-cli pm2 -g</div></pre></td></tr></table></figure><p>全部安装完成，如图：</p><p><img src="http://oxkc6g4t4.bkt.clouddn.com/wx19.png" alt="wx19"></p><h2 id="测试服务"><a href="#测试服务" class="headerlink" title="测试服务"></a>测试服务</h2><p>当我们正在当前运行一个进程时，如果直接关闭终端窗口或者关闭当前进程就会导致当前服务被挂起，不能持续稳定的对外进行Nodejs，尤其是Nodejs本身如果有异常导致它挂起后就不能自动重启，这样的工作就交给pm2来维护。</p><p>示例：运行server.js</p><p>执行命令<code>node server.js</code>运行server.js然后取消，通过执行命令<code>pm2 start server.js</code>让服务跑起来同时自动维护这个进程。这样就可以在外面访问到这个服务，执行命令<code>curl http://127.0.0.1:3000</code>。如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx20.png" alt="wx20"></p><p>访问成功！</p><p>查看当前运行的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 list</div></pre></td></tr></table></figure><p>查看更加详细的服务信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 show server</div></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 logs</div></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart server</div></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 stop server</div></pre></td></tr></table></figure><p>以下截图就是这个项目要用到的工具</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx21.png" alt="wx21"></p><h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><h2 id="Linux下安装MongoDB"><a href="#Linux下安装MongoDB" class="headerlink" title="Linux下安装MongoDB"></a>Linux下安装MongoDB</h2><p>进入<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="external">官网</a>选择相应的Linux环境，我这里选择Red Hat，通过yum安装的，64位centos系统</p><h3 id="创建MongoDB安装源"><a href="#创建MongoDB安装源" class="headerlink" title="创建MongoDB安装源"></a>创建MongoDB安装源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/yum.repos.d/mongodb-org-3.6.repo</div></pre></td></tr></table></figure><p>然后复制下面配置写入mongodb-org-3.6.repo，保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mongodb-org-3.6]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</div></pre></td></tr></table></figure><h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install -y mongodb-org</div></pre></td></tr></table></figure><p>安装完毕后修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/mongod.conf</div></pre></td></tr></table></figure><p>修改/etc/yum.conf，将一下代码将以下添加到/etc/yum.conf文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools</div></pre></td></tr></table></figure><p>其中端口被修改为20008（随意），并且允许远程访问，不允许则修改bandIp为：127.0.0.1</p><p>修改/etc/mongod.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/mongod.conf</div></pre></td></tr></table></figure><h2 id="Windows下安装MongoDB"><a href="#Windows下安装MongoDB" class="headerlink" title="Windows下安装MongoDB"></a>Windows下安装MongoDB</h2><p>进入<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">官网</a>下载自己对应的平台。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx1.png" alt="wx1"></p><p>下载后直接next安装，点击finish完成安装。</p><h2 id="启动Mongodb"><a href="#启动Mongodb" class="headerlink" title="启动Mongodb"></a>启动Mongodb</h2><p>进入mongodb文件目录下，创建data\db和logs目录及log.txt文件。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; cd D:\mongodb</div><div class="line">d\mongodb&gt; mkdir data</div><div class="line">d\mongodb&gt; mkdir logs</div><div class="line">d\mongodb\logs&gt; touch log.txt</div></pre></td></tr></table></figure><p><strong>以管理员模式启动CMD，切换到MongoDB的安装目录，并执行命令：mongod –dbpath “D:\mongodb\data\db”  –logpath “D:\mongodb\logs\log.txt”  –install -serviceName “MongoDB”  </strong></p><p>如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx2.png" alt="wx2"></p><p>关于命令中的参数说明</p><p>参数 　　　　　　　　　　　描述<br>–bind_ip　　 　　　　　　绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP<br>–logpath    　　　　　　　　定MongoDB日志文件，注意是指定文件不是目录<br>–logappend    　　 　　　　 使用追加的方式写日志<br>–dbpath    　　　　　　　　 指定数据库路径<br>–port    　　　　　 　　　　 指定服务端口号，默认端口27017<br>–serviceName    　　　　  指定服务名称<br>–serviceDisplayName    　　指定服务名称，有多个mongodb服务时执行。<br>–install    　　　　　　　　   指定作为一个Windows服务安装。</p><p>启动MongoDB服务</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx3.png" alt="wx3"></p><p>右键点击我的电脑—&gt;管理—&gt;服务和应用程序—&gt;服务，找到MongoDB可以看到是启动状态。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx4.png" alt="wx4"></p><p> 进入MongoDB数据库shell</p><p><img src="http://oxkc6g4t4.bkt.clouddn.com/wx5.png" alt="wx5"></p><p> 退出MongoDB数据库执行命令exit</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx6.png" alt="wx6"></p><p> <strong>下次用之前记得检查Mongodb服务是否启动状态。</strong></p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Linux下安装Nginx"><a href="#Linux下安装Nginx" class="headerlink" title="Linux下安装Nginx"></a>Linux下安装Nginx</h2><p>前面安装步骤先忽略了，直接进入重点。</p><p>复制nginx.conf到/etc/nginx/conf.d目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -a nginx.conf /etc/nginx/conf.d/kaka.conf</div></pre></td></tr></table></figure><p>修改kaka.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim kaka.conf</div></pre></td></tr></table></figure><h2 id="windos下安装Nginx"><a href="#windos下安装Nginx" class="headerlink" title="windos下安装Nginx"></a>windos下安装Nginx</h2><p>进入<a href="http://nginx.org/en/download.html" target="_blank" rel="external">官网</a>选择要安装的平台，在这里同样是Windows下安装。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx7.png" alt="wx7"></p><p> 下载解压即可。</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>nginx配置文件在nginx-1.13.12\conf\nginx.conf</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">     gzip  on;</div><div class="line"></div><div class="line">    #html文件</div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  127.0.0.1 localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><p>不能直接双击nginx.exe，这样会导致修改配置后重启、停止nginx无效，需要手动关闭任务管理器内的所有nginx进程。</p><p>start nginx : 启动nginx</p><p>nginx -s reload  ：修改配置后重新加载生效</p><p>nginx -s reopen  ：重新打开日志文件<br>nginx -t -c /path/to/nginx.conf 测试nginx配置文件是否正确</p><p><strong>Not：</strong></p><p>如果遇到报错：bash: nginx: command not found，有可能是你在linux命令行环境下运行了windows命令，</p><p>改成用windows系统自带命令行工具运行。</p><h1 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h1><h2 id="Sunny-Ngrok"><a href="#Sunny-Ngrok" class="headerlink" title="Sunny-Ngrok"></a>Sunny-Ngrok</h2><p>搭建本地服务器的话，这里推荐一款不错的测试工具，它能够把内网公射到外网上去，并且给你一个能被访问到的域名。也就是说，域名是免费的，服务器则是你自己的电脑。</p><p>使用Sunny-Ngrok赠送的免费域名进行http服务映射。</p><h2 id="1、进入官网注册账号"><a href="#1、进入官网注册账号" class="headerlink" title="1、进入官网注册账号"></a>1、进入<a href="https://www.ngrok.cc/" target="_blank" rel="external">官网</a>注册账号</h2><h2 id="2、开通隧道"><a href="#2、开通隧道" class="headerlink" title="2、开通隧道"></a>2、开通隧道</h2><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx9.png" alt="wx9"></p><h2 id="3、点击立即购买后进入编辑页面"><a href="#3、点击立即购买后进入编辑页面" class="headerlink" title="3、点击立即购买后进入编辑页面"></a>3、点击立即购买后进入编辑页面</h2><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx10.png" alt="wx10"></p><p> 在上图中表单信息解释：</p><pre><code>隧道名称：可以随便填写，只是为了使用者在往后之后这个隧道是干嘛的前置域名：服务器免费赠送的域名，请不要带上后缀，如果要nuxtss.ngrok.cc 只需要填写 nuxtss即可 ，千万不要填写成nuxtss.ngrok.cc否则域名会是nuxtss.ngrok.cc.ngrok.cc本地端口：可以为同一个局域网内任意一台机器进行映射，只需要填对ip和端口就行，例如：192.168.1.1:80http验证用户名：非必填项，在需要的时候填写，否则可以不填http验证密码：非必填项，在需要的时候填写，否则可以不填</code></pre><p>依次填入点击确定添加，然后确定购买。</p><h2 id="4、下载客户端"><a href="#4、下载客户端" class="headerlink" title="4、下载客户端"></a>4、下载客户端</h2><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx11.png" alt="wx11"></p><p> 根据自己的操作系统需求下载相对于版本。</p><h2 id="5、启动映射服务"><a href="#5、启动映射服务" class="headerlink" title="5、启动映射服务"></a>5、启动映射服务</h2><h3 id="Windows环境下启动服务"><a href="#Windows环境下启动服务" class="headerlink" title="Windows环境下启动服务"></a>Windows环境下启动服务</h3><p>1、打开命令提示符，进入下载好的软件目录 ，输入sunny.exe clientid + 隧道id<br><img src="http://oxkc6g4t4.bkt.clouddn.com/wx12.png" alt="wx12"></p><p>命令解释：</p><p>​     sunny.exe 下载的软件内网映射隧道工具</p><pre><code>clientid  通过隧道id启动，后面跟上隧道id，如果有多个隧道要一起启动那么使用英文逗号隔开第三个红色剪头所指的地方就是为了启动多个隧道</code></pre><p>输入命令回车后可以看到服务已经启动</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx13.png" alt="wx13"></p><p>域名为<a href="http://nuxtssr.free.ngrok.cc" target="_blank" rel="external">http://nuxtssr.free.ngrok.cc</a></p><h3 id="Linux环境下启动服务"><a href="#Linux环境下启动服务" class="headerlink" title="Linux环境下启动服务"></a>Linux环境下启动服务</h3><p>打开命令提示符，进入下载好的软件目录 ，输入命令 ./sunny.exe clientid + 隧道id</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx14.png" alt="wx14"></p><p> 同样，域名为<a href="http://nuxtssr.free.ngrok.cc" target="_blank" rel="external">http://nuxtssr.free.ngrok.cc</a></p><p>测试输入域名访问成功！</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/wx15.png" alt="wx15"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nodejs&quot;&gt;&lt;a href=&quot;#Nodejs&quot; class=&quot;headerlink&quot; title=&quot;Nodejs&quot;&gt;&lt;/a&gt;Nodejs&lt;/h1&gt;&lt;h2 id=&quot;安装Nodejs生产环境&quot;&gt;&lt;a href=&quot;#安装Nodejs生产环境&quot; class=&quot;headerlink&quot; title=&quot;安装Nodejs生产环境&quot;&gt;&lt;/a&gt;安装Nodejs生产环境&lt;/h2&gt;&lt;p&gt;centos下登录服务器，通过yum安装项目运行中包括服务器日常维护要用到的&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install git vim openssl build-essential libssh-dev wget curl&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://kakajing.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（十）：router传参和详情页面开发</title>
    <link href="http://kakajing.github.io/2018/04/16/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9Arouter%E4%BC%A0%E5%8F%82%E5%92%8C%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/04/16/饿了么45个页面重构（十）：router传参和详情页面开发/</id>
    <published>2018-04-16T14:06:18.000Z</published>
    <updated>2018-04-17T07:41:09.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商品详情页"><a href="#商品详情页" class="headerlink" title="商品详情页"></a>商品详情页</h1><p>设置商品的router，点击商品展示商品详情页，设置传递参数。</p><p>在router.js中设置路由映射。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'/shop'</span>,</div><div class="line">  <span class="attr">component</span>: Shop,   <span class="comment">// 商铺详情页</span></div><div class="line">  children: [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'foodDetail'</span>,    <span class="comment">// 食品详情页</span></div><div class="line">    component: FoodDetail</div><div class="line">  &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h1 id="router传参"><a href="#router传参" class="headerlink" title="router传参"></a>router传参</h1><p>传参是前端经常需要用的一个操作，很多场景都会需要用到上个页面的参数。Vue router使用query和params传参，当你使用params方法传参的时候，要在路由后面加参数名，并且传参的时候，参数名要跟路由后面设置的参数名对应。使用query方法，就没有这种限制，直接在跳转里面用就可以。</p><p>例如：</p><p>params：/router1/:id ，/router1/123，/router1/789 ,这里的id叫做params</p><p>query：/router1?id=123 ,/router1?id=456 ,这里的id叫做query。</p><p>query更加类似于我们ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示。</p><p>在这里我使用query传参。</p><p><strong>shop.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;section v-for=&quot;(food, foodIndex) in item.foods&quot; :key=&quot;foodIndex&quot; class=&quot;menu_detail_list&quot;&gt;</div><div class="line">   &lt;router-link :to=&quot;&#123;path: &apos;shop/foodDetail&apos;,</div><div class="line">            query: &#123;image_path: food.image_path, description: food.description, month_sales: food.month_sales, name: food.name, rating: food.rating, rating_count: food.rating_count, satisfy_rate: food.satisfy_rate, food, shopId&#125;&#125;&quot;</div><div class="line">                tag=&quot;div&quot;</div><div class="line">                class=&quot;menu_detail_link&quot;</div><div class="line">  &gt;&lt;/router-link&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>页面转跳之后通过router特性获取上页传递过来的参数，同时data中设置一些数据。</p><p><strong>foodDetail.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">goBack</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">image_path</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">description</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">month_sales</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">name</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">rating</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">rating_count</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">satisfy_rate</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">food</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">shopId</span>: <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">created () &#123;</div><div class="line">  <span class="keyword">this</span>.image_path = <span class="keyword">this</span>.$route.query.image_path</div><div class="line">  <span class="keyword">this</span>.description = <span class="keyword">this</span>.$route.query.description</div><div class="line">  <span class="keyword">this</span>.month_sales = <span class="keyword">this</span>.$route.query.month_sales</div><div class="line">  <span class="keyword">this</span>.name = <span class="keyword">this</span>.$route.query.name</div><div class="line">  <span class="keyword">this</span>.rating = <span class="keyword">this</span>.$route.query.rating</div><div class="line">  <span class="keyword">this</span>.rating_count = <span class="keyword">this</span>.$route.query.rating_count</div><div class="line">  <span class="keyword">this</span>.satisfy_rate = <span class="keyword">this</span>.$route.query.satisfy_rate</div><div class="line">  <span class="keyword">this</span>.food = <span class="keyword">this</span>.$route.query.food</div><div class="line">  <span class="keyword">this</span>.shopId = <span class="keyword">this</span>.$route.query.shopId</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>设置商品图片：<code>&lt;img :src=&quot;getImgPath(image_path)&quot; class=&quot;food_img&quot;&gt;</code></p><p>设置商品描述：<code>&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;</code></p><p>设置商品名称和评分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;div class=&quot;rating_sale&quot;&gt;</div><div class="line">  &lt;span&gt;评分&lt;/span&gt;</div><div class="line">  &lt;rating-star :rating=&quot;rating&quot;&gt;&lt;/rating-star&gt;</div><div class="line">  &lt;span&gt;&#123;&#123;rating.toFixed(1)&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>设置月售单量和售价</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  &lt;span&gt;月售&#123;&#123;month_sales&#125;&#125;单&lt;/span&gt;</div><div class="line">  &lt;span&gt;售价 ¥&#123;&#123;food.specfoods[0].price&#125;&#125;&lt;/span&gt;</div><div class="line">  &lt;span v-if=&quot;food.specfoods.length&quot;&gt;起&lt;/span&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><p>设置评论数和好评率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  &lt;span&gt;评论数 &#123;&#123;rating_count&#125;&#125;&lt;/span&gt;</div><div class="line">  &lt;span&gt;好评率 &#123;&#123;satisfy_rate&#125;&#125;%&lt;/span&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e27.png" alt="e27"></p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="餐厅详情页"><a href="#餐厅详情页" class="headerlink" title="餐厅详情页"></a>餐厅详情页</h1><p>在router.js中设置路由映射。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  path: &apos;/shop&apos;,</div><div class="line">  component: Shop,   // 商铺详情页</div><div class="line">  children: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;foodDetail&apos;,    // 食品详情页</div><div class="line">      component: FoodDetail</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;shopDetail&apos;,    //商铺详情页</div><div class="line">      component: ShopDetail,</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>点击店铺公告转跳餐厅详情页面，设置路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=&quot;/shop/shopDetail&quot; class=&quot;description_top&quot;&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure><p>在shop.vue组件中获取到商家详情信息并通过vuex管理对数据做处理。</p><p><strong>state.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">shopDetail</span>: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>mutation-types.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export const RECORD_SHOPDETAIL = &apos;RECORD_SHOPDETAIL&apos;</div></pre></td></tr></table></figure><p><strong>mutations.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[types.RECORD_SHOPDETAIL] (state, detail) &#123;</div><div class="line">    state.shopDetail = detail</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">created: &#123;</div><div class="line">  shopDetails(<span class="keyword">this</span>.shopId, <span class="keyword">this</span>.extras, <span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.shopDetailData = res</div><div class="line">    <span class="keyword">this</span>.img = res.image_path</div><div class="line">    <span class="keyword">this</span>.RECORD_SHOPDETAIL(<span class="keyword">this</span>.shopDetailData)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">...mapMutations([</div><div class="line">  <span class="string">'RECORD_SHOPDETAIL'</span></div><div class="line">])</div></pre></td></tr></table></figure><p>通过<code>this.RECORD_SHOPDETAIL(this.shopDetailData)</code>记录商家详情信息，在shopDetail.vue组件中通过mapState获取商家详情信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  ...mapState([</div><div class="line">  <span class="string">'shopDetail'</span></div><div class="line">  ])</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>接着填充dom</p><p>设置属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;活动与属性&lt;/header&gt;</div><div class="line">&lt;ul class=&quot;activities_ul&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;item in shopDetail.activities&quot; :key=&quot;item.id&quot;&gt;</div><div class="line">    &lt;span :style=&quot;&#123;backgroundColor: &apos;#&apos; + item.icon_color&#125;&quot;&gt;&#123;&#123;item.icon_name&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;span&gt;&#123;&#123;item.description&#125;&#125;(APP专享)&lt;/span&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>设置活动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;activities_ul&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;item in shopDetail.supports&quot; :key=&quot;item.id&quot;&gt;</div><div class="line">    &lt;span :style=&quot;&#123;backgroundColor: &apos;#&apos; + item.icon_color&#125;&quot;&gt;&#123;&#123;item.icon_name&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;span&gt;&#123;&#123;item.description&#125;&#125;（APP专享）&lt;/span&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>设置监督检查结果，使用v-if和v-else判断它的状态显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;shop_status_detail&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;svg class=&quot;shop_status&quot; v-if=&quot;shopDetail.status == 1&quot;&gt;</div><div class="line">      &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#res-well&quot;&gt;&lt;/use&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line">    &lt;svg class=&quot;res-well&quot; v-else&gt;</div><div class="line">      &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#res-bad&quot;&gt;&lt;/use&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;check_date&quot;&gt;</div><div class="line">    &lt;p&gt;</div><div class="line">      &lt;span&gt;监督检查结果：&lt;/span&gt;</div><div class="line">      &lt;span class=&quot;shop_status_well&quot; v-if=&quot;shopDetail.status == 1&quot;&gt;良好&lt;/span&gt;</div><div class="line">      &lt;span class=&quot;shop_status_bad&quot; v-else&gt;差&lt;/span&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>设置商家信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;shop_status_info&quot;&gt;</div><div class="line">  &lt;header&gt;商家信息&lt;/header&gt;</div><div class="line">  &lt;p&gt;&#123;&#123;shopDetail.name&#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;p&gt;地址：&#123;&#123;shopDetail.address&#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;p&gt;营业时间：[&#123;&#123;shopDetail.opening_hours[0]&#125;&#125;]&lt;/p&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><h2 id="食品监督安全公示"><a href="#食品监督安全公示" class="headerlink" title="食品监督安全公示"></a>食品监督安全公示</h2><p>router.js中设置路由映射。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'/shop'</span>,</div><div class="line">  <span class="attr">component</span>: Shop,   <span class="comment">// 商铺详情页</span></div><div class="line">  children: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'foodDetail'</span>,    <span class="comment">// 食品详情页</span></div><div class="line">      component: FoodDetail</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'shopDetail'</span>,    <span class="comment">//商铺详情页</span></div><div class="line">      component: ShopDetail,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'shopSafe'</span>,   <span class="comment">//商铺安全认证页</span></div><div class="line">          component: ShopSafe</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>设置路由跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link :to=&quot;&#123;path: &apos;/shop/shopDetail/shopSafe&apos;, query: &#123;restaurant_id: shopDetail.id&#125;&#125;&quot; class=&quot;shop_status_header&quot;&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure><p>具体代码很简单就不传了。</p><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e28.png" alt="e28"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>到这整个shop.vue组件全部开发完毕！组件中运用不少v-if也讲了v-if与v-show的区别，以及router传参方式。Vue在插入、更新或者移除DOM元素时会应用过渡效果，文中用到初始渲染的过渡，自定义过渡钩子函数利用JavaScript的方式直接操作DOM。数据处理上我使用vuex对购物车所有数据做统一管理，使整个数据流更加清晰。</p><h1 id="具体代码见："><a href="#具体代码见：" class="headerlink" title="具体代码见："></a>具体代码见：</h1><p><a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p><p>如有什么疑问或者不懂之处，可以加这个群交流：</p><p>QQ群：157028081</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;商品详情页&quot;&gt;&lt;a href=&quot;#商品详情页&quot; class=&quot;headerlink&quot; title=&quot;商品详情页&quot;&gt;&lt;/a&gt;商品详情页&lt;/h1&gt;&lt;p&gt;设置商品的router，点击商品展示商品详情页，设置传递参数。&lt;/p&gt;
&lt;p&gt;在router.js中设置路由映射。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（九）：购物车页面开发</title>
    <link href="http://kakajing.github.io/2018/04/14/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/04/14/饿了么45个页面重构（九）：购物车页面开发/</id>
    <published>2018-04-14T14:57:33.000Z</published>
    <updated>2018-04-17T07:32:23.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入buyCart组件"><a href="#引入buyCart组件" class="headerlink" title="引入buyCart组件"></a>引入buyCart组件</h1><p>回到shop.vue组件中，将buyCart.vue引入这个组件中，传入相关数据，以及要实现的监听小球是否进入购物车事件。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;buy-cart :foods=&quot;food&quot; :shopId=&quot;shopId&quot; @moveInCart=&quot;listenInCart&quot;&gt;&lt;/buy-cart&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  listenInCart () &#123;</div><div class="line">    if (!this.receiveInCart) &#123;</div><div class="line">      this.receiveInCart = true</div><div class="line">      this.$refs.cartContainer.addEventListener(&apos;animationend&apos;, () =&gt; &#123;</div><div class="line">      this.receiveInCart = false</div><div class="line">      &#125;)</div><div class="line">      this.$refs.cartContainer.addEventListener(&apos;webkitAnimationEnd&apos;, () =&gt; &#123;</div><div class="line">      this.receiveInCart = false</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="底部购物车结算"><a href="#底部购物车结算" class="headerlink" title="底部购物车结算"></a>底部购物车结算</h1><p>展示购物车商品数量和总价，同时购物车商品的数量和总价会随着购物车中的商品增加或减少改变而改变。计算购物车里的商品总数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  totalNum () &#123;</div><div class="line">    <span class="keyword">let</span> num = <span class="number">0</span></div><div class="line">    <span class="keyword">this</span>.cartFoodList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    num += item.num</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> num</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同时购物车商品数量有值时改变class的状态，绑定class，data中定义<code>totalPrice</code>表示总价。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;cart_icon_container&quot; </div><div class="line">     :class=&quot;&#123;cart_icon_activity: totalPrice &gt; 0, move_in_cart:receiveInCart&#125;&quot;&gt;</div></pre></td></tr></table></figure><p>当购物车商品有数量时，显示购物车商品总数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;cart_list_length&quot; v-if=&quot;totalNum&quot;&gt;&#123;&#123;totalNum&#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure><p>展示总价和配送费</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;cart_num&quot;&gt;</div><div class="line">   &lt;div&gt;¥ &#123;&#123;totalPrice&#125;&#125;&lt;/div&gt;</div><div class="line">  &lt;div&gt;配送费¥&#123;&#123;deliveryFee&#125;&#125;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  deliveryFee () &#123;</div><div class="line">    if (this.shopDetailData) &#123;</div><div class="line">    return this.shopDetailData.float_delivery_fee</div><div class="line">    &#125; else &#123;</div><div class="line">    return null</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还差多少元起送，在computed钩子中计算差价。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> &lt;section class=&quot;goToPay&quot; :class=&quot;&#123;goToPay_activity: minimumOrderAmount &lt; 0&#125;&quot;&gt;</div><div class="line">    &lt;span class=&quot;goToPay_button_style&quot; v-if=&quot;minimumOrderAmount &gt; 0&quot;&gt;还差¥&#123;&#123;minimumOrderAmount&#125;&#125;起送&lt;/span&gt;</div><div class="line">    &lt;!--&lt;span class=&quot;goToPay_button_style&quot; v-else &gt;去结算&lt;/span&gt;--&gt;</div><div class="line">    &lt;router-link :to=&quot;&#123;path:&apos;/confirmOrder&apos;, query:&#123;geohash, shopId&#125;&#125;&quot; class=&quot;goToPay_button_style&quot; v-else&gt;去结算&lt;/router-link&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">  minimumOrderAmount () &#123;</div><div class="line">    if (this.shopDetailData) &#123;</div><div class="line">    return this.shopDetailData.float_minimum_order_amount - this.totalPrice</div><div class="line">    &#125; else &#123;</div><div class="line">    return null</div><div class="line">    &#125;</div><div class="line"> &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当差价小于0时高亮去结算按钮的样式，绑定class <code>:class=&quot;{goToPay_activity: minimumOrderAmount &lt; 0}&quot;&gt;</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.goToPay_acitvity&#123;</div><div class="line">      background-color: #4cd964;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>监听购物车中商铺列表的变化，当length为0时将列表隐藏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  cartFoodList (value) &#123;</div><div class="line">    <span class="keyword">if</span> (!value.length) &#123;</div><div class="line">    <span class="keyword">this</span>.showCartList = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/%E9%AB%98%E4%BA%AE%E5%8E%BB%E7%BB%93%E7%AE%97.gif" alt="高亮去结算"></p><h1 id="购物车展示商品列表"><a href="#购物车展示商品列表" class="headerlink" title="购物车展示商品列表"></a>购物车展示商品列表</h1><p>点击购物车小图标，展示购物车中的商品列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;transition name=&quot;fade&quot;&gt;</div><div class="line">  &lt;div class=&quot;screen_cover&quot; v-show=&quot;showCartList&amp;&amp;cartFoodList.length&quot; @click=&quot;toggleCartList&quot;&gt;   &lt;/div&gt;</div><div class="line">&lt;/transition&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  toggleCartList () &#123;</div><div class="line">    this.showCartList = !this.showCartList</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然先要判断购物车里是否有商品<code>v-show=&quot;showCartList&amp;&amp;cartFoodList.length&quot;</code>。如果有商品遍历它们依次展示商品详情，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;cart_food_details&quot;&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li v-for=&quot;(item, index) in cartFoodList&quot; :key=&quot;index&quot; class=&quot;cart_food_li&quot;&gt;</div><div class="line">      &lt;div class=&quot;cart_list_num&quot;&gt;</div><div class="line">        &lt;p class=&quot;ellipsis&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</div><div class="line">        &lt;p class=&quot;ellipsis&quot;&gt;&#123;&#123;item.specs&#125;&#125;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;cart_list_price&quot;&gt;</div><div class="line">        &lt;span&gt;¥&lt;/span&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;item.price&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;section class=&quot;cart_list_control&quot;&gt;</div><div class="line">        &lt;svg @click=&quot;removeOutCart(item.category_id, item.item_id, item.food_id, item.name, item.price, item.specs)&quot;&gt;</div><div class="line">        &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-minus&quot;&gt;&lt;/use&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">        &lt;span class=&quot;cart_num&quot;&gt;&#123;&#123;item.num&#125;&#125;&lt;/span&gt;</div><div class="line">        &lt;svg class=&quot;cart_add&quot; @click=&quot;addToCart(item.category_id, item.item_id, item.food_id, item.name, item.price, item.specs)&quot;&gt;</div><div class="line">        &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-add&quot;&gt;&lt;/use&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">      &lt;/section&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><h3 id="购物车减少和增加按钮事件"><a href="#购物车减少和增加按钮事件" class="headerlink" title="购物车减少和增加按钮事件"></a>购物车减少和增加按钮事件</h3><p>对购物车商品的增加和减少图标绑定事件动态的控制。<code>removeOutCart()</code>减少事件，<code>addToCart()</code>增加事件。</p><p>依次添加所需要的参数，分别是商铺id，食品分类id，食品id，食品规格id，食品名字，食品价格，食品规格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  addToCart (category_id, item_id, food_id, name, price, specs) &#123;</div><div class="line">  <span class="keyword">this</span>.ADD_CART(&#123;<span class="attr">shopId</span>:<span class="keyword">this</span>.shopId, category_id, item_id, food_id, name, price, specs&#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  removeOutCart (category_id, item_id, food_id, name, price, specs) &#123;</div><div class="line">  <span class="keyword">this</span>.REDUCE_CART(&#123;<span class="attr">shopId</span>:<span class="keyword">this</span>.shopId, category_id, item_id, food_id, name, price, specs&#125;)</div><div class="line">  &#125;,</div><div class="line">  ...mapMutations([</div><div class="line">    <span class="string">'ADD_CART'</span>, <span class="string">'REDUCE_CART'</span>, <span class="string">'CLEAR_CART'</span>,</div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="清空购物车列表"><a href="#清空购物车列表" class="headerlink" title="清空购物车列表"></a>清空购物车列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;</div><div class="line">  &lt;h4&gt;购物车&lt;/h4&gt;</div><div class="line">  &lt;div @click=&quot;clearCart&quot;&gt;</div><div class="line">    &lt;svg&gt;</div><div class="line">      &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-remove&quot;&gt;&lt;/use&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line">  &lt;span class=&quot;clear_cart&quot;&gt;清空&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/header&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  clearCart () &#123;</div><div class="line">    this.toggleCartList()</div><div class="line">    this.CLEAR_CART(this.shopId)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>当点击评价时显示评价页<code>v-show=&quot;changeShowType == &#39;rating&#39;&quot;</code></p><h3 id="获取评价总体分数数据"><a href="#获取评价总体分数数据" class="headerlink" title="获取评价总体分数数据"></a>获取评价总体分数数据</h3><p><strong>shop.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">ratingScores</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/restapi/ugc/v2/restaurants/'</span> + id + <span class="string">'/ratings/scores'</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>data中定义<code>ratingScores</code>表示评价总分数。</p><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  getRatingScores () &#123;</div><div class="line">    ratingScores(<span class="keyword">this</span>.shopId).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.ratingScoresData = res</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置综合评价</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;rating_header_left&quot;&gt;</div><div class="line">  &lt;p&gt;&#123;&#123;shopDetailData.rating&#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;p&gt;综合评价&lt;/p&gt;</div><div class="line">  &lt;p&gt;高于周边商家&#123;&#123;(ratingScoresData.compare_rating*100).toFixed(1)&#125;&#125;%&lt;/p&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>设置服务态度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  &lt;span&gt;服务态度&lt;/span&gt;</div><div class="line">  &lt;rating-star :rating=&quot;ratingScoresData.service_score&quot;&gt;&lt;/rating-star&gt;</div><div class="line">  &lt;span class=&quot;rating_num&quot;&gt;&#123;&#123;ratingScoresData.service_score.toFixed(1)&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><p>设置菜品评价</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  &lt;span&gt;菜品评价&lt;/span&gt;</div><div class="line">  &lt;rating-star :rating=&quot;ratingScoresData.overall_score&quot;&gt;&lt;/rating-star&gt;</div><div class="line">  &lt;span class=&quot;rating_num&quot;&gt;&#123;&#123;ratingScoresData.overall_score.toFixed(1)&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><p>设置送达时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  &lt;span&gt;送达时间&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;delivery_time&quot;&gt;&#123;&#123;shopDetailData.order_lead_time&#125;&#125;分钟&lt;/span&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><p>效果如下：<br> <img src="http://oxkc6g4t4.bkt.clouddn.com/e24.png" alt="e24"></p><h3 id="获取评价分类"><a href="#获取评价分类" class="headerlink" title="获取评价分类"></a>获取评价分类</h3><p><strong>shop.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">ratingTags</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/restapi/ugc/v2/restaurants/'</span> + id + <span class="string">'/ratings/tags'</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>data中定义<code>ratingTagsList</code>表示评价分类列表。</p><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  getRatingTags () &#123;</div><div class="line">    ratingTags(<span class="keyword">this</span>.shopId).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.ratingTagsList = res</div><div class="line">    &#125;)</div><div class="line"> &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>遍历<code>ratingTagsList</code>，设置默认当前评价分类的index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;tag_list_ul&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(item, index) in ratingTagsList&quot; :key=&quot;index&quot;</div><div class="line">      :class=&quot;&#123;unsatisfied: item.unsatisfied, tagActivity: ratingTagsIndex == index&#125;&quot;</div><div class="line">      @click=&quot;changeTagIndex(index, item.name)&quot;</div><div class="line">  &gt;</div><div class="line">  &#123;&#123;item.name&#125;&#125;(&#123;&#123;item.count&#125;&#125;)</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e25.png" alt="e25"></p><h3 id="获取商铺评价列表"><a href="#获取商铺评价列表" class="headerlink" title="获取商铺评价列表"></a>获取商铺评价列表</h3><p><strong>shop.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">ratings</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/restapi/ugc/v3/restaurants/'</span> + id + <span class="string">'/ratings'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">has_content</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">offset</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">limit</span>: <span class="number">8</span></div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;<span class="attr">params</span>: data&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>data中定义<code>ratingList</code>表示评价列表。</p><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  getRatingList () &#123;</div><div class="line">    ratings(<span class="keyword">this</span>.shopId).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.ratingList = res</div><div class="line">    &#125;)</div><div class="line"> &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>遍历ratingList：<code>&lt;li v-for=&quot;(item, index) in ratingList&quot; :key=&quot;index&quot; class=&quot;rating_list_li&quot;&gt;</code></p><p>设置头像：<code>&lt;img :src=&quot;getImgPath(item.avatar)&quot; class=&quot;user_avatar&quot;&gt;</code></p><p>设置用户名称：<code>&lt;p class=&quot;username&quot;&gt;&lt;/p&gt;</code></p><p>设置星级和日期：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"star_desc"</span>&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">rating-star</span> <span class="attr">:rating</span>=<span class="string">"item.rating"</span>&gt;</span><span class="tag">&lt;/<span class="name">rating-star</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"time_spent_desc"</span>&gt;</span>&#123;&#123;item.time_spent_desc&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">&lt;time <span class="class"><span class="keyword">class</span></span>=<span class="string">"rated_at"</span>&gt;&#123;&#123;item.rated_at&#125;&#125;&lt;<span class="regexp">/time&gt;</span></div></pre></td></tr></table></figure><p>设置商品图片，图片有多个需要做遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;food_img_ul&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(foodItem, index) in item.order_images&quot; :key=&quot;index&quot;&gt;</div><div class="line">  &lt;img :src=&quot;getImgPath(foodItem.image_hash)&quot; v-if=&quot;foodItem.image_hash&quot;&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>设置商品名称，和图片一样也需要做遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;food_name_ul&quot;&gt;</div><div class="line">  &lt;li class=&quot;ellipsis&quot; v-for=&quot;(foodItem, index) in item.food_ratings&quot; :key=&quot;index&quot;&gt;</div><div class="line">  &#123;&#123;foodItem.rate_name&#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e26.png" alt="e26"></p><h1 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h1><p>页面初始化时会获取到从本地缓存购物车数据，重新获取购物车改变过的数据。初始化数据同样我也通过vuex管理。</p><p><strong>mutations.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[types.INIT_BUYCART] (state) &#123;</div><div class="line">    <span class="keyword">let</span> initCart = getStore(<span class="string">'buyCart'</span>)</div><div class="line">    <span class="keyword">if</span> (initCart) &#123;</div><div class="line">      state.cartList = <span class="built_in">JSON</span>.parse(initCart)</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  initCategoryNum ()  &#123;</div><div class="line">        <span class="comment">//左侧食品列表当前分类中已加入购物车的商品数量</span></div><div class="line">        <span class="keyword">let</span> newArr = []</div><div class="line">        <span class="keyword">let</span> cartFoodNum = <span class="number">0</span></div><div class="line">        <span class="comment">//购物车总共的价格</span></div><div class="line">        <span class="keyword">this</span>.totalPrice = <span class="number">0</span></div><div class="line">        <span class="comment">//购物车中所有商品的详细信息列表</span></div><div class="line">        <span class="keyword">this</span>.cartFoodList = []</div><div class="line">        <span class="keyword">this</span>.menuList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.shopCart &amp;&amp; <span class="keyword">this</span>.shopCart[item.foods[<span class="number">0</span>].category_id]) &#123;</div><div class="line">            <span class="keyword">let</span> num = <span class="number">0</span></div><div class="line">            <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.shopCart[item.foods[<span class="number">0</span>].category_id]).forEach(<span class="function"><span class="params">itemId</span> =&gt;</span> &#123;</div><div class="line">              <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.shopCart[item.foods[<span class="number">0</span>].category_id][itemId]).forEach(<span class="function"><span class="params">foodId</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">let</span> foodItem = <span class="keyword">this</span>.shopCart[item.foods[<span class="number">0</span>].category_id][itemId][foodId]</div><div class="line">                num += foodItem.num</div><div class="line">                <span class="keyword">if</span> (item.type === <span class="number">1</span>) &#123;</div><div class="line">                  <span class="keyword">this</span>.totalPrice += foodItem.num * foodItem.price</div><div class="line">                  <span class="keyword">if</span> (foodItem.num &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum] = &#123;&#125;</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].category_id = item.foods[<span class="number">0</span>].category_id</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].item_id = itemId</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].food_id = foodId</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].num = foodItem.num</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].price = foodItem.price</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].name = foodItem.name</div><div class="line">                    <span class="keyword">this</span>.cartFoodList[cartFoodNum].specs = foodItem.specs</div><div class="line">                    cartFoodNum ++</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;)</div><div class="line">            &#125;)</div><div class="line">            newArr[index] = num</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            newArr[index] = <span class="number">0</span></div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">this</span>.categoryNum = newArr.concat([])</div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>监听购物车列表的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  shopCart (value) &#123;</div><div class="line">    <span class="keyword">this</span>.initCategoryNum()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="具体代码见："><a href="#具体代码见：" class="headerlink" title="具体代码见："></a>具体代码见：</h1><p><a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p><p>如有什么疑问或者不懂之处，可以加这个群交流：</p><p>QQ群：157028081</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引入buyCart组件&quot;&gt;&lt;a href=&quot;#引入buyCart组件&quot; class=&quot;headerlink&quot; title=&quot;引入buyCart组件&quot;&gt;&lt;/a&gt;引入buyCart组件&lt;/h1&gt;&lt;p&gt;回到shop.vue组件中，将buyCart.vue引入这个组件中，传入相关数据，以及要实现的监听小球是否进入购物车事件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（八）：appear的用法和购物车按钮组件开发</title>
    <link href="http://kakajing.github.io/2018/04/12/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9Aappear%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/04/12/饿了么45个页面重构（八）：appear的用法和购物车按钮组件开发/</id>
    <published>2018-04-12T15:37:46.000Z</published>
    <updated>2018-04-13T12:30:42.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buyCart-vue"><a href="#buyCart-vue" class="headerlink" title="buyCart.vue"></a>buyCart.vue</h1><h2 id="增加和减少按钮"><a href="#增加和减少按钮" class="headerlink" title="增加和减少按钮"></a>增加和减少按钮</h2><p>顾名思义就是在选择食品数量的时相关动作，增加或减少。</p><p>思路：点击增加按钮，当前食品数量+1，也就是说当食品数量&gt;=1时，同时显示减少按钮。当食品数量&lt;1时，减少按钮隐藏。</p><a id="more"></a><p>由于buyCart作为基础组件，需要接收来自父组件的数据，这就要通过props定义相关数据，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">props:[<span class="string">'foods'</span>, <span class="string">'shopId'</span>]</div></pre></td></tr></table></figure><p>当商品数量有值时显示减少图标使用<code>v-if=&quot;foodNum&quot;</code>  做判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;cart_module&quot;&gt;</div><div class="line">    &lt;section class=&quot;cart_button&quot;&gt;</div><div class="line">      &lt;transition name=&quot;showReduce&quot;&gt;</div><div class="line">        &lt;svg @click=&quot;removeOutCart(foods.category_id, foods.item_id, foods.specfoods[0].food_id, foods.specfoods[0].name, foods.specfoods[0].price, &apos;&apos;, foods.specfoods[0].packing_fee, foods.specfoods[0].sku_id, foods.specfoods[0].stock)&quot; v-if=&quot;foodNum&quot;&gt;</div><div class="line">          &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-minus&quot;&gt;&lt;/use&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">      &lt;/transition&gt;</div><div class="line">      &lt;transition name=&quot;fade&quot;&gt;</div><div class="line">        &lt;span class=&quot;cart_num&quot; v-if=&quot;foodNum&quot;&gt;&#123;&#123;foodNum&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;/transition&gt;</div><div class="line">      &lt;svg @click=&quot;addToCart(foods.category_id, foods.item_id, foods.specfoods[0].food_id, foods.specfoods[0].name, foods.specfoods[0].price, &apos;&apos;, foods.specfoods[0].packing_fee, foods.specfoods[0].sku_id, foods.specfoods[0].stock, $event)&quot;&gt;</div><div class="line">        &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-add&quot;&gt;&lt;/use&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">   &lt;/section&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>当购物车有变化的时候重新计算当前商品的数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  foodNum ()&#123;</div><div class="line">    <span class="keyword">let</span> category_id = <span class="keyword">this</span>.foods.category_id</div><div class="line">    <span class="keyword">let</span> item_id = <span class="keyword">this</span>.foods.item_id</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.shopCart&amp;&amp;<span class="keyword">this</span>.shopCart[category_id]&amp;&amp;<span class="keyword">this</span>.shopCart[category_id][item_id]) &#123;</div><div class="line">      <span class="keyword">let</span> num = <span class="number">0</span></div><div class="line">      <span class="built_in">Object</span>.values(<span class="keyword">this</span>.shopCart[category_id][item_id]).forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</div><div class="line">      num += item.num</div><div class="line">      &#125;)</div><div class="line">      <span class="keyword">return</span> num</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"> &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>监听购物车的变化，更新当前餐厅的购物车信息<code>shopCart</code>，这就需要得到购物车列表<code>cartList</code>的数据。使用vuex获取<code>cartList</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">   shopCart () &#123;</div><div class="line">     <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.cartList[<span class="keyword">this</span>.shopId])</div><div class="line">   &#125;,</div><div class="line">   ...mapState([</div><div class="line">     <span class="string">'cartList'</span></div><div class="line">   ])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过vuex mutation对购物车数据做增减处理。</p><h3 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h3><p>通过<code>state.cartList</code>获取购物车的数据<code>cart</code>，然后通过<code>cart</code>的<code>shopId</code>获取到餐厅<code>shop</code>，接着通过shop的c<code>ategory_id</code>获取餐厅菜单分类<code>category</code>，最后通过<code>category</code>的<code>item_id</code>得到商品<code>item</code>。点击一次增加图标商品数量num就会+1，然后设置存入本地存储 <code>setStore(&#39;buyCart&#39;, state.cartList)</code></p><p><strong>mutations.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[types.ADD_CART] (state, &#123;shopId, category_id, item_id, food_id, name, price, specs, packing_fee, sku_id, stock&#125;) &#123;</div><div class="line">   <span class="keyword">let</span> cart = state.cartList</div><div class="line">   <span class="keyword">let</span> shop = cart[shopId] = (cart[shopId] || &#123;&#125;)</div><div class="line">   <span class="keyword">let</span> category = shop[category_id] = (shop[category_id] || &#123;&#125;)</div><div class="line">   <span class="keyword">let</span> item = category[item_id] = (category[item_id] || &#123;&#125;)</div><div class="line">   <span class="keyword">if</span> (item[food_id]) &#123;</div><div class="line">     item[food_id][<span class="string">'num'</span>]++</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     item[food_id] = &#123;<span class="string">"num"</span>: <span class="number">1</span>, <span class="string">"id"</span>: food_id, <span class="string">"name"</span>: name, <span class="string">"price"</span>: price, <span class="string">"specs"</span>: specs, <span class="string">"packing_fee"</span>: packing_fee, <span class="string">"sku_id"</span>: sku_id, <span class="string">"stock"</span>: stock&#125;</div><div class="line">   &#125;</div><div class="line">   state.cartList = &#123;...cart&#125;</div><div class="line">   <span class="comment">//存入localStorage</span></div><div class="line">   setStore(<span class="string">'buyCart'</span>, state.cartList)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="减少购物车"><a href="#减少购物车" class="headerlink" title="减少购物车"></a>减少购物车</h3><p>同理和增加购物车思路是一样的，先依次得到各个数据，点击一次减少图标商品数量num就会-1，然后设置存入本地存储 <code>setStore(&#39;buyCart&#39;, state.cartList)</code>，否则商品数量为0，则清空当前商品的信息。</p><p><strong>mutations.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[types.REDUCE_CART] (state, &#123;shopId, category_id, item_id, food_id, name, price, specs&#125;) &#123;</div><div class="line">    <span class="keyword">let</span> cart = state.cartList</div><div class="line">    <span class="keyword">let</span> shop = (cart[shopId] || &#123;&#125;)</div><div class="line">    <span class="keyword">let</span> category = (shop[category_id] || &#123;&#125;)</div><div class="line">    <span class="keyword">let</span> item = (category[item_id] || &#123;&#125;)</div><div class="line">    <span class="keyword">if</span> (item &amp;&amp; item[food_id]) &#123;</div><div class="line">      <span class="keyword">if</span> (item[food_id][<span class="string">'num'</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">        item[food_id][<span class="string">'num'</span>]--</div><div class="line">        state.cartList = &#123;...cart&#125;</div><div class="line">        setStore(<span class="string">'buyCart'</span>, state.cartList)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        item[food_id] = <span class="literal">null</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>回到buyCart.vue组件中，分别对减少和增加图标创建点击事件<code>removeOutCart()</code>和<code>addToCart()</code>。引入<code>mapMutation</code>直接对方法做处理就好了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapState, mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  removeOutCart(category_id, item_id, food_id, name, price, specs, packing_fee, sku_id, stock)&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.foodNum &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.REDUCE_CART(&#123;<span class="attr">shopId</span>: <span class="keyword">this</span>.shopId, category_id, item_id, food_id, name, price, specs, packing_fee, sku_id, stock&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  addToCart(category_id, item_id, food_id, name, price, specs, packing_fee, sku_id, stock, event)&#123;</div><div class="line">    <span class="keyword">this</span>.ADD_CART(&#123;<span class="attr">shopId</span>: <span class="keyword">this</span>.shopId, category_id, item_id, food_id, name, price, specs, packing_fee, sku_id, stock&#125;)</div><div class="line">  &#125;,</div><div class="line">  ...mapMutations([</div><div class="line">    <span class="string">'ADD_CART'</span>, <span class="string">'REDUCE_CART'</span></div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="多规格商品购物车"><a href="#多规格商品购物车" class="headerlink" title="多规格商品购物车"></a>多规格商品购物车</h3><p>这里首先要v-if和v-else做个判断，如果是多规格商品则显示多规格商品购物车，如果不是则显示增加购物车。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;section class="cart_module"&gt;</div><div class="line">    &lt;section v-if="!foods.specifications.length" class="cart_button"&gt;</div><div class="line">      ....</div><div class="line">    &lt;/section&gt;</div><div class="line">    &lt;section v-else class="choose_specification"&gt;</div><div class="line">      ....</div><div class="line">    &lt;/section&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>和增加减少按钮思路一样，点击增加按钮，当前食品数量+1，也就是说当食品数量&gt;=1时，同时显示减少按钮。当食品数量&lt;1时，减少按钮隐藏。同时对购物车商品数量进行实时监听，操作和前面的一样，这里就不多说了，直接贴代码吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;section v-else class=&quot;choose_specification&quot;&gt;</div><div class="line">  &lt;section class=&quot;choose_icon_container&quot;&gt;</div><div class="line">    &lt;transition name=&quot;showReduce&quot;&gt;</div><div class="line">      &lt;svg class=&quot;specs_reduce_icon&quot; v-if=&quot;foodNum&quot; @click=&quot;showReduceTip&quot;&gt;</div><div class="line">        &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-minus&quot;&gt;&lt;/use&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">    &lt;/transition&gt;</div><div class="line">    &lt;transition name=&quot;fade&quot;&gt;</div><div class="line">      &lt;span class=&quot;cart_num&quot; v-if=&quot;foodNum&quot;&gt;&#123;&#123;foodNum&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/transition&gt;</div><div class="line">    &lt;transition name=&quot;fade&quot;&gt;</div><div class="line">      &lt;p class=&quot;show_delete_tip&quot; v-if=&quot;showDeleteTip&quot;&gt;多规格商品只能去购物车删除哦&lt;/p&gt;</div><div class="line">    &lt;/transition&gt;</div><div class="line">    &lt;span class=&quot;show_chooselist&quot; @click=&quot;showChooseList&quot;&gt;选规格&lt;/span&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>点击选规格按钮触发<code>showChooseList</code>点击事件。控制显示规格列表。data中定义<code>showSpecs</code>默认为false，表示控制显示食品规格。定义specsIndex默认为0，表示当前选中的规格索引值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">showSpecs</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">methods: &#123;</div><div class="line">  showChooseList()&#123;</div><div class="line">    <span class="keyword">this</span>.showSpecs = !<span class="keyword">this</span>.showSpecs</div><div class="line">    <span class="keyword">this</span>.specsIndex = <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当点击减少按钮时会弹出提示框，提示用户多规格商品只能去购物车删除，创建<code>showReduceTip()</code>点击事件。data中定义<code>showDeleteTip</code>默认为false，表示点击多规格商品减少按钮时弹出提示框。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;p class="show_delete_tip" v-if="showDeleteTip"&gt;多规格商品只能去购物车删除哦&lt;/p&gt;</div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">    showDeleteTip: false</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  showReduceTip()&#123;</div><div class="line">    this.showDeleteTip = true</div><div class="line">    clearTimeout(this.timer)</div><div class="line">    this.timer = setTimeout(() =&gt; &#123;</div><div class="line">      clearTimeout(this.timer)</div><div class="line">      this.showDeleteTip = false</div><div class="line">    &#125;, 3000)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="显示多规格列表"><a href="#显示多规格列表" class="headerlink" title="显示多规格列表"></a>显示多规格列表</h3><p>点击多规格按钮后弹出多规格列表框，对框内dom进行填充数据渲染。多规格列表分为商品名称、商品明细及价格显示和加入购物车按钮。</p><h4 id="商品名称"><a href="#商品名称" class="headerlink" title="商品名称"></a>商品名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;specs_list&quot; v-if=&quot;showSpecs&quot;&gt;</div><div class="line">  &lt;header class=&quot;specs_list_header&quot;&gt;</div><div class="line">  &lt;h4 class=&quot;ellipsis&quot;&gt;&#123;&#123;foods.name&#125;&#125;&lt;/h4&gt;</div><div class="line">  &lt;svg width=&quot;16&quot; height=&quot;16&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;class=&quot;specs_cancel&quot; @click=&quot;showChooseList&quot;&gt;</div><div class="line">    &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;16&quot; y2=&quot;16&quot;  stroke=&quot;#666&quot; stroke-width=&quot;1.2&quot;/&gt;</div><div class="line">    &lt;line x1=&quot;0&quot; y1=&quot;16&quot; x2=&quot;16&quot; y2=&quot;0&quot;  stroke=&quot;#666&quot; stroke-width=&quot;1.2&quot;/&gt;</div><div class="line">  &lt;/svg&gt;</div><div class="line">  &lt;/header&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>设置商品名称<code></code>，对关闭框按钮绑定<code>showChooseList</code>事件。</p><h4 id="商品明细"><a href="#商品明细" class="headerlink" title="商品明细"></a>商品明细</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;specs_list&quot; v-if=&quot;showSpecs&quot;&gt;  </div><div class="line">  ...</div><div class="line">  &lt;section class=&quot;specs_details&quot; &gt;</div><div class="line">    &lt;h5 class=&quot;specs_details_title&quot;&gt;&#123;&#123;foods.specifications[0].name&#125;&#125;&lt;/h5&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;(item, itemIndex) in foods.specifications[0].values&quot; :class=&quot;&#123;specs_activity: itemIndex == specsIndex&#125;&quot; @click=&quot;chooseSpecs(itemIndex)&quot;&gt;</div><div class="line">      &#123;&#123;item&#125;&#125;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>设置规格名称<code></code>，遍历规格中的值<code>v-for=&quot;(item, itemIndex) in foods.specifications[0].values&quot;</code>，同时绑定默认显示哪个index <code>:class=&quot;{specs_activity: itemIndex == specsIndex}&quot;</code>，点击哪个item后高亮显示同时记录当前所选规格的索引值，触发<code>chooseSpecs(itemIndex)</code>点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chooseSpecs(index)&#123;</div><div class="line">   <span class="keyword">this</span>.specsIndex = index</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="价格显示和加入购物车按钮"><a href="#价格显示和加入购物车按钮" class="headerlink" title="价格显示和加入购物车按钮"></a>价格显示和加入购物车按钮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;specs_list&quot; v-if=&quot;showSpecs&quot;&gt;  </div><div class="line">  ...</div><div class="line">&lt;footer class=&quot;specs_footer&quot;&gt;</div><div class="line">      &lt;div class=&quot;specs_price&quot;&gt;</div><div class="line">        &lt;span&gt;¥ &lt;/span&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;foods.specfoods[specsIndex].price&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;specs_addto_cart&quot; @click=&quot;addSpecs(foods.category_id, foods.item_id, foods.specfoods[specsIndex].food_id, foods.specfoods[specsIndex].name, foods.specfoods[specsIndex].price, foods.specifications[0].values[specsIndex])&quot;&gt;加入购物车&lt;/div&gt;</div><div class="line">    &lt;/footer&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>设置规格商品价格<code></code>，选择商品完成后点击加入购物车按钮触发<code>addSpecs()</code>点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">addSpecs(category_id, item_id, food_id, name, price, specs)&#123;</div><div class="line">  <span class="keyword">this</span>.ADD_CART(&#123;<span class="attr">shopId</span>: <span class="keyword">this</span>.shopId, category_id, item_id, food_id, name, price, specs&#125;)</div><div class="line">  <span class="keyword">this</span>.showChooseList()</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>点击加入购物车后记录选择后的商品id，同时关闭多规格列表提示框。</p><h2 id="css动画渲染"><a href="#css动画渲染" class="headerlink" title="css动画渲染"></a>css动画渲染</h2><p>当点击增加购物车按钮时会生成一个小球有做弧形下落的动画运动操作，同时当购物车数量num有值时显示num，减少购物车按钮做滚动动画显示。这些需要设置transition来实现一系列的动画操作。</p><h3 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h3><p>点击添加购物车生成的小球做弧形下落的动画，因为小球动画只有一个方向(只执行单方向从上到下滚落)，所以只用了before-enter和after-enter，这里我使用transition的appear特性设置节点在初始渲染的过渡，实现列表的渐进过渡。</p><blockquote><p>appear表示是否在初始渲染使用过渡，也就是当前<code>transition</code>元素第一次渲染时的过渡动画。它的用法和enter的用法相似，它只是在第一次渲染的时候才会起作用。使用appear-class 之前先使用 prop appear，<code>&lt;transition appear appear-class=&quot;....&quot; appear-active-class=&quot;....&quot;&gt;</code>，也可以自定义JavaScript 钩子：<code>&lt;transition appear before-appear=&quot;....&quot; after-appear=&quot;....&quot;&gt;</code>。</p></blockquote><p>data中定义<code>showMoveDot</code>默认是<code>[]</code>，表示控制下落的小球。遍历下落的小球<code>v-for=&quot;(item,index) in showMoveDot&quot;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;transition</div><div class="line">        appear</div><div class="line">        @before-appear=&quot;beforeEnter&quot;</div><div class="line">        @after-appear = &quot;afterEnter&quot;</div><div class="line">        v-for=&quot;(item,index) in showMoveDot&quot;</div><div class="line">        :key=&quot;index&quot;</div><div class="line">      &gt;</div><div class="line">      &lt;span class=&quot;move_dot&quot; v-if=&quot;item&quot;&gt;</div><div class="line">      &lt;svg class=&quot;move_liner&quot;&gt;</div><div class="line">      &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#cart-add&quot;&gt;&lt;/use&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">      &lt;/span&gt;</div><div class="line">&lt;/transition&gt;</div></pre></td></tr></table></figure><p>这里自定义JavaScript 钩子<code>@after-appear = &quot;afterEnter&quot;</code>和<code>@before-appear=&quot;beforeEnter&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">showMoveDot</span>: [], </div><div class="line">    <span class="attr">elLeft</span>: <span class="number">0</span>, <span class="comment">//当前点击加按钮在网页中的绝对top值</span></div><div class="line">    elBottom: <span class="number">0</span>, <span class="comment">//当前点击加按钮在网页中的绝对left值</span></div><div class="line">    windowHeight: <span class="literal">null</span>, <span class="comment">//屏幕的高度</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">mounted()&#123;</div><div class="line">  <span class="keyword">this</span>.windowHeight = <span class="built_in">window</span>.innerHeight</div><div class="line"> &#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">    beforeEnter(el)&#123;</div><div class="line">      el.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;<span class="number">39</span> + <span class="keyword">this</span>.elBottom - <span class="keyword">this</span>.windowHeight&#125;</span>px,0)`</span></div><div class="line">      el.children[<span class="number">0</span>].style.transform = <span class="string">`translate3d(<span class="subst">$&#123;<span class="keyword">this</span>.elLeft - <span class="number">40</span>&#125;</span>px,0,0)`</span></div><div class="line">    &#125;,</div><div class="line">    afterEnter(el)&#123;</div><div class="line">      el.style.transform = <span class="string">`translate3d(0,0,0)`</span></div><div class="line">      el.children[<span class="number">0</span>].style.transform = <span class="string">`translate3d(0,0,0)`</span></div><div class="line">      el.style.transition = <span class="string">'all .55s cubic-bezier(0.3, -0.19, 0.65, -0.15)'</span></div><div class="line">      el.children[<span class="number">0</span>].style.transition = <span class="string">'all .55s linear'</span></div><div class="line">      <span class="comment">//圆点到达目标点后移出</span></div><div class="line">      <span class="keyword">this</span>.showMoveDot = <span class="keyword">this</span>.showMoveDot.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="literal">false</span>)</div><div class="line">      <span class="comment">//监听运动结束，通知父级进行后续操作</span></div><div class="line">      el.children[<span class="number">0</span>].addEventListener(<span class="string">'transitionend'</span>, () =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.$emit(<span class="string">'moveInCart'</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击添加购物车按钮小球的运动弧度，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e23.png" alt="v23"></p><p>设置减少购物车按钮的滚动动画效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;transition name="showReduce"&gt;...&lt;/transition&gt;</div><div class="line"></div><div class="line">.showReduce-enter-active, .showReduce-leave-active &#123;</div><div class="line">  transition: all .3s ease-out;</div><div class="line">&#125;</div><div class="line">.showReduce-enter, .showReduce-leave-active &#123;</div><div class="line">  opacity: 0;</div><div class="line">  transform: translateX(1rem);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置商品数量的动画</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;transition name="fade"&gt;</div><div class="line">   &lt;span class="cart_num" v-if="foodNum"&gt;&#123;&#123;foodNum&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;/transition&gt;</div><div class="line">        </div><div class="line">.fade-enter-active, .fade-leave-active &#123;</div><div class="line">    transition: all .3s;</div><div class="line">&#125;</div><div class="line">.fade-enter, .fade-leave-active &#123;</div><div class="line">opacity: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运动效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/%E5%87%8F%E5%B0%91%E6%8C%89%E9%92%AE%E5%8A%A8%E7%94%BB.gif" alt="减少按钮动画"></p><p>到此，购物车按钮及多规格商品按钮组件的开发到此为止！</p><h1 id="具体代码见："><a href="#具体代码见：" class="headerlink" title="具体代码见："></a>具体代码见：</h1><p><a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;buyCart-vue&quot;&gt;&lt;a href=&quot;#buyCart-vue&quot; class=&quot;headerlink&quot; title=&quot;buyCart.vue&quot;&gt;&lt;/a&gt;buyCart.vue&lt;/h1&gt;&lt;h2 id=&quot;增加和减少按钮&quot;&gt;&lt;a href=&quot;#增加和减少按钮&quot; class=&quot;headerlink&quot; title=&quot;增加和减少按钮&quot;&gt;&lt;/a&gt;增加和减少按钮&lt;/h2&gt;&lt;p&gt;顾名思义就是在选择食品数量的时相关动作，增加或减少。&lt;/p&gt;
&lt;p&gt;思路：点击增加按钮，当前食品数量+1，也就是说当食品数量&amp;gt;=1时，同时显示减少按钮。当食品数量&amp;lt;1时，减少按钮隐藏。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（七）：v-if与v-show的区别及shop组件开发</title>
    <link href="http://kakajing.github.io/2018/04/11/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9Av-if%E4%B8%8Ev-show%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8Ashop%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/04/11/饿了么45个页面重构（七）：v-if与v-show的区别及shop组件开发/</id>
    <published>2018-04-11T12:48:22.000Z</published>
    <updated>2018-04-13T12:33:06.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="餐厅食品页面shop-vue"><a href="#餐厅食品页面shop-vue" class="headerlink" title="餐厅食品页面shop.vue"></a>餐厅食品页面shop.vue</h1><p>点击某个餐厅进入餐厅食品页面。简单的说这个页面分三个区域，分别是头部、导航、内容。</p><a id="more"></a><h2 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h2><p>头部主要讲当前餐厅的基本信息，如商家名称头像、商家配送方式及费用、商家公告、商家优惠活动。</p><h3 id="获取餐厅的详细信息"><a href="#获取餐厅的详细信息" class="headerlink" title="获取餐厅的详细信息"></a>获取餐厅的详细信息</h3><p>首先要做的就是获取餐厅的详细信息。使用axios请求数据。</p><p>  <strong>shop.js</strong>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shopDetails</span> (<span class="params">shopId, extras, latitude, longitude</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/restapi/shopping/restaurant/'</span> + shopId</div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    extras,</div><div class="line">    <span class="attr">terminal</span>: <span class="string">'h5'</span>,</div><div class="line">    latitude,</div><div class="line">    longitude</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面代码发现获取餐厅详情的url时需要<code>latitude</code>和<code>longitude</code>两个参数，我通过vuex管理机制对这两个参数进行赋值操作继而获取到餐厅详情。</p><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; msiteAdress &#125; <span class="keyword">from</span> <span class="string">'api/msite'</span></div><div class="line"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> &#123; shopDetails &#125; <span class="keyword">from</span> <span class="string">'api/shop'</span></div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">shopDetailData</span>: <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">mounted () &#123;</div><div class="line">  msiteAdress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.SET_LATITUDE(res.latitude)</div><div class="line">    <span class="keyword">this</span>.SET_LONGITUDE(res.longitude)  </div><div class="line">    </div><div class="line">    <span class="comment">// 获取商铺信息</span></div><div class="line">    shopDetails(<span class="keyword">this</span>.shopId, <span class="keyword">this</span>.extras, <span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.shopDetailData = res</div><div class="line">      <span class="keyword">this</span>.img = res.image_path</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line"><span class="attr">computed</span>: &#123;</div><div class="line">  ...mapState([</div><div class="line">     <span class="string">'latitude'</span>, <span class="string">'longitude'</span></div><div class="line">  ])</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  ...mapMutations([</div><div class="line">    <span class="string">'SET_LATITUDE'</span>, <span class="string">'SET_LONGITUDE'</span></div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>获取到餐厅详情<code>shopDetailData</code>，接着就可以对dom填充数据。</p><p>餐厅头像：  <code>&lt;img :src=&quot;getImgPath(img)&quot; class=&quot;header_cover_img&quot;&gt;</code>。</p><p>餐厅名称：<code>&lt;h4 class=&quot;description_title ellipsis&quot;&gt;&lt;/h4&gt;</code></p><p>餐厅配送信息：<code>&lt;p class=&quot;description_text&quot;&gt;商家配送／分钟送达／配送费¥&lt;/p&gt;</code></p><p>餐厅公告：<code>&lt;p class=&quot;description_promotion ellipsis&quot;&gt;公告：&lt;/p&gt;</code>。这里我使用计算函数<code>promotionInfo</code>对餐厅公告进行判断操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  <span class="comment">//商铺公告</span></div><div class="line">  promotionInfo () &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.shopDetailData.promotion_info || <span class="string">'欢迎光临，用餐高峰期请提前下单，谢谢。'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>商家活动：首先判断商家详情中是否有商家活动<code>v-if=&quot;shopDetailData.activities.length&quot;</code>也就是判断它的length，创建个<code>showActivitiesFun</code>点击事件展示商家活动的具体信息，具体信息包括优惠信息和商家公告。定义数据<code>showActivities</code>表示是否显示活动详情。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">showActivities</span>: <span class="literal">false</span>, </div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">   showActivitiesFun () &#123;</div><div class="line">     <span class="keyword">this</span>.showActivities = !<span class="keyword">this</span>.showActivities</div><div class="line">   &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>展示商家活动：遍历优惠信息获取每个item <code>&lt;li v-for=&quot;item in shopDetailData.activities&quot; :key=&quot;item.id&quot;&gt;</code>，使用transition添加动画效果，之前已经讲过，这里就不再复述。判断是否显示<code>v-if=&quot;showActivities&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;transition name=&quot;fade&quot;&gt;</div><div class="line">  &lt;section class=&quot;activities_details&quot; v-if=&quot;showActivities&quot;&gt;</div><div class="line">    &lt;h2 class=&quot;activities_shopTitle&quot;&gt;&#123;&#123;shopDetailData.name&#125;&#125;&lt;/h2&gt;</div><div class="line">    &lt;h3 class=&quot;activities_ratingStar&quot;&gt;</div><div class="line">      &lt;rating-star :rating=&quot;shopDetailData.rating&quot;&gt;&lt;/rating-star&gt;</div><div class="line">    &lt;/h3&gt;</div><div class="line">    &lt;section class=&quot;activities_list&quot;&gt;</div><div class="line">      &lt;header class=&quot;activities_title_style&quot;&gt;&lt;span&gt;优惠信息&lt;/span&gt;&lt;/header&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li v-for=&quot;item in shopDetailData.activities&quot; :key=&quot;item.id&quot;&gt;</div><div class="line">          &lt;span class=&quot;activities_icon&quot;</div><div class="line">                :style=&quot;&#123;backgroundColor: &apos;#&apos; + item.icon_color, borderColor: &apos;#&apos; + item.icon_color&#125;&quot;&gt;&#123;&#123;item.icon_name&#125;&#125;&gt;&lt;/span&gt;</div><div class="line">          &lt;span&gt;&#123;&#123;item.description&#125;&#125;（APP专享）&lt;/span&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">    &lt;section class=&quot;activities_shopInfo&quot;&gt;</div><div class="line">      &lt;header class=&quot;activities_title_style&quot;&gt;&lt;span&gt;商家公告&lt;/span&gt;&lt;/header&gt;</div><div class="line">      &lt;p&gt;&#123;&#123;promotionInfo&#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">    &lt;svg width=&quot;60&quot; height=&quot;60&quot; class=&quot;close_activities&quot; @click.stop=&quot;showActivitiesFun&quot;&gt;</div><div class="line">      &lt;circle cx=&quot;30&quot; cy=&quot;30&quot; r=&quot;25&quot; stroke=&quot;#555&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot;/&gt;</div><div class="line">      &lt;line x1=&quot;22&quot; y1=&quot;38&quot; x2=&quot;38&quot; y2=&quot;22&quot; style=&quot;stroke:#999;stroke-width:2&quot;/&gt;</div><div class="line">      &lt;line x1=&quot;22&quot; y1=&quot;22&quot; x2=&quot;38&quot; y2=&quot;38&quot; style=&quot;stroke:#999;stroke-width:2&quot;/&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/transition&gt;</div></pre></td></tr></table></figure><p>代码用到v-if比较频繁，在这说下v-show和v-if的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. v-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</div><div class="line">2. v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</div><div class="line"></div><div class="line">一般来说， v-if有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v-show较好；如果在运行时条件不太可能改变，则使用v-if较好。</div></pre></td></tr></table></figure><p>完整的代码这里就不贴了，见代码shop.vue组件。</p><p>页面渲染：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e15.png" alt="e15"></p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>导航分为商品和评价。点击商品时会显示食品列表，点击评价显示评价相关信息。data中定义<code>changeShowType</code>表示切换显示商品或评价，默认为food，创建点击事件使其点击商品时对应的food，点击评价则对应的是rating。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;change_show_type&quot; ref=&quot;chooseType&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;span :class=&apos;&#123;activity_show: changeShowType ==&quot;food&quot;&#125;&apos; @click=&quot;changeShowType=&apos;food&apos;&quot;&gt;商品&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;span :class=&apos;&#123;activity_show: changeShowType ==&quot;rating&quot;&#125;&apos; @click=&quot;changeShowType=&apos;rating&apos;&quot;&gt;评价&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">    changeShowType: &apos;food&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>:class=&#39;{activity_show: changeShowType ==&quot;food&quot;}&#39;</code>绑定当前显示为food。vue绑定class的使用方法，通过绑定一个class变量来直接操作，并且这里的逻辑会跟js代码里面对应。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>内容区域分为菜单列表、食品列表、购物车。</p><h3 id="菜单列表"><a href="#菜单列表" class="headerlink" title="菜单列表"></a>菜单列表</h3><p>菜单列表就是食品分类，每个分类会有对应的食品列表。话不多说，先请求数据。</p><p><strong>shop.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">menuList</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/restapi/shopping/v2/menu'</span></div><div class="line"></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">restaurant_id</span>: id</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>shop.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">menuList(<span class="keyword">this</span>.shopId).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">this</span>.menuList = res</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>data钩子中定义数据<code>menuList</code>，表示菜单分类列表，得到数据后填充dom。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;menu_container&quot;&gt;</div><div class="line">  &lt;!--菜单分类--&gt;</div><div class="line">  &lt;section class=&quot;menu_left&quot; id=&quot;wrapper_menu&quot; ref=&quot;wrapperMenu&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;(item,index) in menuList&quot; :key=&quot;index&quot; class=&quot;menu_left_li&quot;&gt;</div><div class="line">        &lt;img :src=&quot;getImgPath(item.icon_url)&quot; v-if=&quot;item.icon_url&quot;&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">        &lt;span class=&quot;category_num&quot; v-if=&quot;categoryNum[index]&quot;&gt;&#123;&#123;categoryNum[index]&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p><code>v-for=&quot;(item,index) in menuList&quot; :key=&quot;index&quot;</code>遍历出每个菜单分类。</p><p><code>&lt;img :src=&quot;getImgPath(item.icon_url)&quot; v-if=&quot;item.icon_url&quot;&gt;</code>要有个判断icon_url是否存在。</p><p><code>&lt;span class=&quot;category_num&quot; v-if=&quot;categoryNum[index]&quot;&gt;&lt;/span&gt;</code>菜单类型右上角已加入购物车的数量，同时也需要判断是否有值。data中定义<code>categoryNum</code>，表示菜单类型右上角已加入购物车的数量。</p><h3 id="食品列表"><a href="#食品列表" class="headerlink" title="食品列表"></a>食品列表</h3><p>食品列表区域的最上方显示的是当前菜单的标题详情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;menu_right&quot;&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li v-for=&quot;(item, index) in menuList&quot; :key=&quot;index&quot;&gt;</div><div class="line">      &lt;header class=&quot;menu_detail_header&quot;&gt;</div><div class="line">        &lt;section class=&quot;menu_detail_header_left&quot;&gt;</div><div class="line">          &lt;strong class=&quot;menu_item_title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/strong&gt;</div><div class="line">          &lt;span class=&quot;menu_item_description&quot;&gt;&#123;&#123;item.description&#125;&#125;&lt;/span&gt;</div><div class="line">        &lt;/section&gt;</div><div class="line">        &lt;span class=&quot;menu_detail_header_right&quot; @click=&quot;showTitleDetail(index)&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;p class=&quot;description_tip&quot; v-if=&quot;index == titleDetailIndex&quot;&gt;</div><div class="line">          &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">          &#123;&#123;item.description&#125;&#125;</div><div class="line">        &lt;/p&gt;</div><div class="line">      &lt;/header&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>在食品列表区域的左上角有个省略号的图标，是显示当前菜单的标题详情，这需要个点击事件，点击后才会显示内容。先在data中定义<code>titleDetailIndex</code>默认为<code>null</code>，表示点击展示列表头部详情。创建点击事件<code>showTitleDetail(index)</code>来控制显示列表标题详情提示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">titleDetailIndex</span>: <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  showTitleDetail (index) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.titleDetailIndex === index) &#123;</div><div class="line">    <span class="keyword">this</span>.titleDetailIndex = <span class="literal">null</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.titleDetailIndex = index</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/%E8%8F%9C%E5%8D%95%E5%88%97%E8%A1%A8%E6%98%BE%E7%A4%BA%E6%8E%A7%E5%88%B6.gif" alt="菜单列表显示控制"></p><p>在遍历过menuList的基础上，再对每个item的item.foods进行遍历，获得每个food。</p><p><code>v-for=&quot;(food, foodIndex) in item.foods&quot; :key=&quot;foodIndex&quot;</code></p><p>对food设置路由，点击某个food就直接进入下个页面。</p><p><code>&lt;router-link :to=&quot;{path: &#39;shop/foodDetail&#39;}&quot; tag=&quot;div&quot; class=&quot;menu_detail_link&quot;&gt;&lt;/router-link&gt;</code> </p><p>food头像设置：<code>&lt;img :src=&quot;getImgPath(food.image_path)&quot;&gt;</code></p><p>food名称：<code>&lt;strong class=&quot;description_foodName&quot;&gt;&lt;/strong&gt;</code></p><p>attributes：需要先判断attributes是否存在<code>v-if=&quot;food.attributes.length&quot;</code>，如果有对它进行遍历<code>&lt;li v-for=&quot;(attribute, foodIndex) in food.attributes&quot; :key=&quot;foodIndex&quot;&gt;</code>，同时设置它的显示样式 <code>:style=&quot;{color: &#39;#&#39; + attribute.icon_color,borderColor:&#39;#&#39; +attribute.icon_color}&quot;</code>，绑定当前class显示<code>:class=&quot;{attribute_new: attribute.icon_name == &#39;新&#39;}&quot;</code>。</p><p>food描述：<code>&lt;p class=&quot;food_description_content&quot;&gt;&lt;/p&gt;</code></p><p>food月销售量和好评率：<code>&lt;span&gt;月售份&lt;/span&gt;  &lt;span&gt;好评率%&lt;/span&gt;</code></p><p>food价格：<code>&lt;span&gt;¥&lt;/span&gt;</code></p><p>food规格：<code>&lt;span v-if=&quot;food.specifications.length&quot;&gt;起&lt;/span&gt;</code></p><p>完整代码太长就不贴了，上面每个dom显示数据都有讲到，具体代码见<strong>shop.vue</strong>组件。</p><p>完整效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e16.png" alt="e16"></p><h2 id="具体代码见："><a href="#具体代码见：" class="headerlink" title="具体代码见："></a>具体代码见：</h2><p><a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;餐厅食品页面shop-vue&quot;&gt;&lt;a href=&quot;#餐厅食品页面shop-vue&quot; class=&quot;headerlink&quot; title=&quot;餐厅食品页面shop.vue&quot;&gt;&lt;/a&gt;餐厅食品页面shop.vue&lt;/h1&gt;&lt;p&gt;点击某个餐厅进入餐厅食品页面。简单的说这个页面分三个区域，分别是头部、导航、内容。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（六）：搜索页面开发</title>
    <link href="http://kakajing.github.io/2018/04/09/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%90%9C%E7%B4%A2%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/04/09/饿了么45个页面重构（六）：搜索页面开发/</id>
    <published>2018-04-09T15:02:41.000Z</published>
    <updated>2018-04-13T12:33:24.170Z</updated>
    
    <content type="html"><![CDATA[<p>点击首页的搜索图标跳转到搜索页面，效果如图：</p><a id="more"></a><p> <img src="http://omux103p0.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E6%90%9C%E7%B4%A2.gif" alt="点击搜索按钮跳转"></p><h2 id="搜索组件"><a href="#搜索组件" class="headerlink" title="搜索组件"></a>搜索组件</h2><p>搜索页面分为四个部分：头部、搜索框、商家列表、搜索历史。输入搜索内容展示搜索数据，搜索食品或者餐厅时隐藏搜索历史。</p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>引入e-header.vue组件，设置头部名称，返回按钮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;paddingTop search_page&quot;&gt;</div><div class="line">  &lt;e-header :head-title=&quot;headTitle&quot; :go-back=&quot;goBack&quot;&gt;&lt;/e-header&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">export default&#123;</div><div class="line">  data()&#123;</div><div class="line">    return &#123;</div><div class="line">      headTitle: &apos;搜索&apos;,</div><div class="line">      goBack: true</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><p>添加输入框和提交按钮dom，绑定搜索内容<code>v-model=&quot;searchValue&quot;</code>，在输入框内输入搜索内容直接显示搜索到的数据。点击提交按钮，搜索结果并显示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"search_form"</span>&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">:placeholder</span>=<span class="string">"placeholder"</span> <span class="attr">v-model</span>=<span class="string">"searchValue"</span> <span class="attr">class</span>=<span class="string">"search_input"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"search_submit"</span> @<span class="attr">click.prevent</span>=<span class="string">"searchTarget('')"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">import &#123; searchRestaurant &#125; from 'api/search'</div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">    placeholder: '请输入商家或美食名称',</div><div class="line">searchValue: '',</div><div class="line">    extras: '',</div><div class="line">    restaurant: [],      // 搜索返回结果中的餐厅</div><div class="line">    restaurantList: [],  // 搜索返回的结果</div><div class="line">    restaurantFood: []  // 搜索返回结果中的food</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">computed: &#123;</div><div class="line">  ...mapState([</div><div class="line">    'latitude', 'longitude'</div><div class="line">  ])</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  searchTarget () &#123;</div><div class="line">    this.extras = ['activities', 'coupon']</div><div class="line"></div><div class="line">    // 获取搜索结果</div><div class="line">    searchRestaurant(this.searchValue, this.latitude, this.longitude, this.extras).then((res) =&gt; &#123;</div><div class="line">      this.restaurantList = res.inside[3].restaurant_with_foods</div><div class="line">      this.restaurantList.forEach(item =&gt; &#123;</div><div class="line">        this.restaurant = item.restaurant</div><div class="line">        this.restaurantFood = item.foods</div><div class="line">        //  console.log(this.restaurantList)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>searchRestaurant()</code>方法中需要用到参数<code>latitude</code>和<code>longitude</code>，我直接通过vuex mapState获取到它们的值。</p><h3 id="搜索结果商家列表"><a href="#搜索结果商家列表" class="headerlink" title="搜索结果商家列表"></a>搜索结果商家列表</h3><p>对搜索到的数据渲染在dom上。使用具有路由功能的router-link应用（点击）导航，通过 <code>to</code> 属性指定目标地址，默认渲染成带有正确链接的 <code>&lt;a&gt;</code> 标签，可以通过配置 <code>tag</code> 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。对搜索结果<code>restaurantFood</code>进行遍历获取 <code>v-for=&quot;item in restaurantFood&quot;</code>，设置key值<code>:key=&quot;item.id&quot;</code>。设置路由路径<code>:to=&quot;{path: &#39;/shop&#39;, query: {id:item.id}}&quot;</code>，query是带查询参数，结果为 <code>/shop?id=xxx</code>。对获取到的每个Item进行dom填充数据渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;paddingTop search_page&quot;&gt;</div><div class="line">    ...</div><div class="line">    &lt;section v-if=&quot;restaurantList.length&quot;&gt;</div><div class="line">      &lt;h4 class=&quot;title_restaurant&quot;&gt;商家&lt;/h4&gt;</div><div class="line">      &lt;ul class=&quot;list_container&quot;&gt;</div><div class="line">        &lt;router-link :to=&quot;&#123;path: &apos;/shop&apos;, query: &#123;id:item.id&#125;&#125;&quot; tag=&quot;li&quot; v-for=&quot;item in restaurantFood&quot; :key=&quot;item.id&quot; class=&quot;list_li&quot;&gt;</div><div class="line">          &lt;section class=&quot;item_left&quot;&gt;</div><div class="line">            &lt;img :src=&quot;getImgPath(item.image_path)&quot; class=&quot;restaurant_img&quot;&gt;</div><div class="line">          &lt;/section&gt;</div><div class="line">          &lt;section class=&quot;item_right&quot;&gt;</div><div class="line">            &lt;div class=&quot;item_right_text&quot;&gt;</div><div class="line">              &lt;p&gt;</div><div class="line">                &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">                &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;24&quot; height=&quot;14&quot; class=&quot;pay_icon&quot;&gt;</div><div class="line">                  &lt;polygon points=&quot;0,14 4,0 24,0 20,14&quot; style=&quot;fill:none;stroke:#FF6000;stroke-width:1&quot;/&gt;</div><div class="line">                  &lt;line x1=&quot;1.5&quot; y1=&quot;12&quot; x2=&quot;20&quot; y2=&quot;12&quot; style=&quot;stroke:#FF6000;stroke-width:1.5&quot;/&gt;</div><div class="line">                  &lt;text x=&quot;3.5&quot; y=&quot;9&quot; style=&quot;fill:#FF6000;font-size:9px;font-weight:bold;&quot;&gt;支付&lt;/text&gt;</div><div class="line">                &lt;/svg&gt;</div><div class="line">              &lt;/p&gt;</div><div class="line">              &lt;p&gt;月售 &#123;&#123;item.month_sales&#125;&#125; 单&lt;/p&gt;</div><div class="line">              &lt;!--&lt;p&gt;&#123;&#123;item.delivery_fee&#125;&#125; 元起送 / 距离&#123;&#123;item.distance&#125;&#125;&lt;/p&gt;--&gt;</div><div class="line">              &lt;p&gt;¥&#123;&#123;item.price&#125;&#125;&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;ul class=&quot;item_right_detail&quot;&gt;</div><div class="line">              &lt;li v-for=&quot;activitiy in item.activities&quot; :key=&quot;activitiy.id&quot;&gt;</div><div class="line">                &lt;span :style=&quot;&#123;backgroundColor: &apos;#&apos; + activitiy.icon_color&#125;&quot;</div><div class="line">                      class=&quot;activities_icon&quot;&gt;&#123;&#123;activitiy.icon_name&#125;&#125;&lt;/span&gt;</div><div class="line">                &lt;span&gt;&#123;&#123;activitiy.name&#125;&#125;&lt;/span&gt;</div><div class="line">                &lt;span class=&quot;only_phone&quot;&gt;(手机客户端专享)&lt;/span&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">          &lt;/section&gt;</div><div class="line">        &lt;/router-link&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h3 id="搜索历史"><a href="#搜索历史" class="headerlink" title="搜索历史"></a>搜索历史</h3><p>每次把输入的搜索内容记录下来并保存。修改searchTarget方法，在获取搜索结果之前先判断是否有搜索历史记录historyValue，如果有添加到searchHistory里，同时隐藏历史记录。点击搜索结果进入下一页面时进行判断是否已经有一样的历史记录，如果没有则新增，如果有则不做重复储存，判断完成后进入下一页。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">searchTarget (historyValue) &#123;</div><div class="line">  <span class="keyword">this</span>.extras = [<span class="string">'activities'</span>, <span class="string">'coupon'</span>]</div><div class="line">  <span class="keyword">if</span> (historyValue) &#123;</div><div class="line">    <span class="keyword">this</span>.searchHistory = historyValue</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.searchValue) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 隐藏历史记录</span></div><div class="line">  <span class="keyword">this</span>.showHistory = <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="comment">// 获取搜索结果</span></div><div class="line">  searchRestaurant(<span class="keyword">this</span>.searchValue, <span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude, <span class="keyword">this</span>.extras).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.restaurantList = res.inside[<span class="number">3</span>].restaurant_with_foods</div><div class="line">    <span class="keyword">this</span>.restaurantList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.restaurant = item.restaurant</div><div class="line">      <span class="keyword">this</span>.restaurantFood = item.foods</div><div class="line">      <span class="comment">//  console.log(this.restaurantList)</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.emptyResult = !<span class="keyword">this</span>.restaurantList.length</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">/**</span></div><div class="line">         * 点击搜索结果进入下一页面时进行判断是否已经有一样的历史记录</div><div class="line">         * 如果没有则新增，如果有则不做重复储存，判断完成后进入下一页</div><div class="line">         */</div><div class="line">  <span class="keyword">let</span> history = getStore(<span class="string">'searchHistory'</span>)</div><div class="line">  <span class="keyword">if</span> (history) &#123;</div><div class="line">    <span class="keyword">let</span> checkRepeat = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>.searchHistory = <span class="built_in">JSON</span>.parse(history)</div><div class="line">    <span class="keyword">this</span>.searchHistory.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (item === <span class="keyword">this</span>.searchValue) &#123;</div><div class="line">        checkRepeat = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">if</span> (!checkRepeat) &#123;</div><div class="line">      <span class="keyword">this</span>.searchHistory.push(<span class="keyword">this</span>.searchValue)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.searchHistory.push(<span class="keyword">this</span>.searchValue)</div><div class="line">  &#125;</div><div class="line">  setStore(<span class="string">'searchHistory'</span>, <span class="keyword">this</span>.searchHistory)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>在dom中渲染数据。首先判断是否存在searchHistory，如果有显示搜索历史块<code>v-if=&quot;searchHistory.length&amp;&amp;showHistory&quot;</code>。遍历searchHistory得出每个item，当点击某个item时进入下一页<code>@click=&quot;searchTarget(item)&quot;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;search_history&quot; v-if=&quot;searchHistory.length&amp;&amp;showHistory&quot;&gt;</div><div class="line">  &lt;h4 class=&quot;title_restaurant&quot;&gt;搜索历史&lt;/h4&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li v-for=&quot;(item, index) in searchHistory&quot; :key=&quot;index&quot; class=&quot;history_list&quot;&gt;</div><div class="line">      &lt;span class=&quot;history_text ellipsis&quot; @click=&quot;searchTarget(item)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; class=&quot;delete_icon&quot; @click=&quot;deleteHistory(index)&quot;&gt;</div><div class="line">        &lt;line x1=&quot;8&quot; y1=&quot;8&quot; x2=&quot;18&quot; y2=&quot;18&quot; style=&quot;stroke:#999;stroke-width:3&quot; /&gt;</div><div class="line">        &lt;line x1=&quot;18&quot; y1=&quot;8&quot; x2=&quot;8&quot; y2=&quot;18&quot; style=&quot;stroke:#999;stroke-width:3&quot; /&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">  &lt;footer class=&quot;clear_history&quot; @click=&quot;clearAllHistory&quot;&gt;清空搜索历史&lt;/footer&gt;</div><div class="line">&lt;/section&gt;</div><div class="line">&lt;div class=&quot;search_none&quot; v-if=&quot;emptyResult&quot;&gt;很抱歉！无搜索结果&lt;/div&gt;</div></pre></td></tr></table></figure><p>对每个搜索历史添加个删除按钮，删除某个搜索历史，创建<code>deleteHistory(index)</code>事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deleteHistory (index) &#123;</div><div class="line">  <span class="comment">// 点击删除按钮，删除当前历史记录</span></div><div class="line">  <span class="keyword">this</span>.searchHistory.splice(index, <span class="number">1</span>)</div><div class="line">  setStore(<span class="string">'searchHistory'</span>, <span class="keyword">this</span>.searchHistory)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>删除当前历史记录同时再对搜索历史进行存储。</p><p>点击清空搜索历史，也就是清除全部搜索历史，对<code>searchHistory</code>置空同时再对搜索历史进行存储。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clearAllHistory () &#123;</div><div class="line">  <span class="keyword">this</span>.searchHistory = []</div><div class="line">  setStore(<span class="string">'searchHistory'</span>, <span class="keyword">this</span>.searchHistory)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 搜索结束后，删除搜索内容直到为空时清空搜索结果，并显示历史记录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">checkInput () &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.searchValue === <span class="string">''</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.showHistory = <span class="literal">true</span>  <span class="comment">// 显示历史记录</span></div><div class="line">    <span class="keyword">this</span>.restaurantList = []  <span class="comment">// 清空搜索结果</span></div><div class="line">    <span class="keyword">this</span>.emptyResult = <span class="literal">false</span>  <span class="comment">// 隐藏搜索为空提示</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>功能实现如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/%E6%90%9C%E7%B4%A2.gif" alt="搜索"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击首页的搜索图标跳转到搜索页面，效果如图：&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（五）transition动画使用及food页面开发二</title>
    <link href="http://kakajing.github.io/2018/04/05/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E4%BA%94%EF%BC%89transition%E5%8A%A8%E7%94%BB%E4%BD%BF%E7%94%A8%E5%8F%8Afood%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E4%BA%8C/"/>
    <id>http://kakajing.github.io/2018/04/05/饿了么45个页面重构（五）transition动画使用及food页面开发二/</id>
    <published>2018-04-05T08:35:54.000Z</published>
    <updated>2018-04-13T12:37:30.261Z</updated>
    
    <content type="html"><![CDATA[<p>接<a href="https://kakajing.github.io/2018/02/04/%E9%A5%BF%E4%BA%86%E4%B9%88%E5%95%86%E5%9F%8E%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Avuex%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8Cfood%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E4%B8%80/">饿了么45个页面重构（四）：vuex的使用和food页面开发一</a></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>同理，与分类一样，添加个<code>chooseType()</code>点击事件展示排序内容。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;sort_item&quot; :class=&quot;&#123;choose_type:sortBy == &apos;sort&apos;&#125;&quot;&gt;</div><div class="line">  &lt;div class=&quot;sort_item_container&quot; @click=&quot;chooseType(&apos;sort&apos;)&quot;&gt;</div><div class="line">    &lt;div class=&quot;sort_item_border&quot;&gt;</div><div class="line">      &lt;span :class=&quot;&#123;category_title: sortBy == &apos;sort&apos;&#125;&quot;&gt;排序&lt;/span&gt;</div><div class="line">      &lt;svg width=&quot;10&quot; height=&quot;10&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; class=&quot;sort_icon&quot;&gt;</div><div class="line">        &lt;polygon points=&quot;0,3 10,3 5,8&quot;/&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>排序的筛选条件分为：智能排序、距离最近、销量最高、起步价最低、配送速度最快、评分最高。分别在dom中渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;transition name=&quot;showlist&quot;&gt;</div><div class="line">          &lt;section class=&quot;sort_detail_type&quot; v-show=&quot;sortBy == &apos;sort&apos;&quot;&gt;</div><div class="line">            &lt;ul class=&quot;sort_list_container&quot; @click=&quot;foodSort($event)&quot;&gt;</div><div class="line">              &lt;li class=&quot;sort_list_li&quot;&gt;</div><div class="line">                ...</div><div class="line">                &lt;p id=&quot;0&quot; :class=&quot;&#123;sort_select: sortByType == 0&#125;&quot;&gt;</div><div class="line">                  &lt;span&gt;智能排序&lt;/span&gt;</div><div class="line">                  ...</div><div class="line">                &lt;/p&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">              &lt;li class=&quot;sort_list_li&quot;&gt;</div><div class="line">                ...</div><div class="line">                &lt;p id=&quot;5&quot; :class=&quot;&#123;sort_select: sortByType == 5&#125;&quot;&gt;</div><div class="line">                  &lt;span&gt;距离最近&lt;/span&gt;</div><div class="line">                  &lt;svg v-if=&quot;sortByType == 5&quot;&gt;...&lt;/svg&gt;</div><div class="line">                &lt;/p&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">              &lt;li class=&quot;sort_list_li&quot;&gt;</div><div class="line">                ...</div><div class="line">                &lt;p id=&quot;6&quot; :class=&quot;&#123;sort_select: sortByType == 6&#125;&quot;&gt;</div><div class="line">                  &lt;span&gt;销量最高&lt;/span&gt;</div><div class="line">                  &lt;svg v-if=&quot;sortByType == 6&quot;&gt;...&lt;/svg&gt;</div><div class="line">                &lt;/p&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">              &lt;li class=&quot;sort_list_li&quot;&gt;</div><div class="line">                ...</div><div class="line">                &lt;p id=&quot;1&quot; :class=&quot;&#123;sort_select: sortByType == 1&#125;&quot;&gt;</div><div class="line">                  &lt;span&gt;起送价最低&lt;/span&gt;</div><div class="line">                  &lt;svg v-if=&quot;sortByType == 1&quot;&gt;...&lt;/svg&gt;</div><div class="line">                &lt;/p&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">              &lt;li class=&quot;sort_list_li&quot;&gt;</div><div class="line">                ...</div><div class="line">                &lt;p id=&quot;2&quot; :class=&quot;&#123;sort_select: sortByType == 2&#125;&quot;&gt;</div><div class="line">                  &lt;span&gt;配送速度最快&lt;/span&gt;</div><div class="line">                  &lt;svg v-if=&quot;sortByType == 2&quot;&gt;...&lt;/svg&gt;</div><div class="line">                &lt;/p&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">              &lt;li class=&quot;sort_list_li&quot;&gt;</div><div class="line">                ...</div><div class="line">                &lt;p id=&quot;3&quot; :class=&quot;&#123;sort_select: sortByType == 3&#125;&quot;&gt;</div><div class="line">                  &lt;span&gt;评分最高&lt;/span&gt;</div><div class="line">                  &lt;svg v-if=&quot;sortByType == 3&quot;&gt;...&lt;/svg&gt;</div><div class="line">                &lt;/p&gt;</div><div class="line">              &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">          &lt;/section&gt;</div><div class="line">        &lt;/transition&gt;</div></pre></td></tr></table></figure><p>定义它们的id值，同时绑定当前点击的<code>sortByType</code>为它们的id，代码表示<code>&lt;p id=&quot;0&quot; :class=&quot;{sort_select: sortByType == 0}&quot;&gt;</code>。</p><p>点击某个选项后当前选项会有一个√的标识符。例如：<code>&lt;svg v-if=&quot;sortByType == 5&quot;&gt;</code>用来判断<code>sortByType</code>是否与当前id值相同，如果相同，显示√标识符。效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e13.png" alt="e13"></p><h3 id="点击某个排序方式获取相应数据"><a href="#点击某个排序方式获取相应数据" class="headerlink" title="点击某个排序方式获取相应数据"></a>点击某个排序方式获取相应数据</h3><p>点击某个排序方式获取相应数据，创建<code>foodSort($event)</code>点击事件</p><p><code>&lt;ul class=&quot;sort_list_container&quot; @click=&quot;foodSort($event)&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  foodSort (event) &#123;</div><div class="line">    <span class="keyword">this</span>.sortByType = event.target.getAttribute(<span class="string">'id'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sortByType)</div><div class="line">    getFoodSort(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude, <span class="keyword">this</span>.extras, <span class="keyword">this</span>.sortByType, <span class="keyword">this</span>.restaurant_category_id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.shopListArr = <span class="built_in">Array</span>.from(<span class="built_in">Object</span>.keys(res.items).map(<span class="function"><span class="params">key</span> =&gt;</span> res.items[key].restaurant))</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">this</span>.sortBy = <span class="string">''</span></div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>传入一个事件<code>event</code>，通过event获得触发事件的元素id。<code>this.sortByType = event.target.getAttribute(&#39;id&#39;)</code>，在控制台打印<code>this.sortByType</code>发现就是当前点击目标的id值。</p><p>获取餐厅成功，如图：</p><p>  <img src="http://oxkc6g4t4.bkt.clouddn.com/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F.gif" alt="选择排序方式"></p><h3 id="transition过渡"><a href="#transition过渡" class="headerlink" title="transition过渡"></a>transition过渡</h3><p>Vue 提供了<code>transition</code>的封装组件，使用<code>transition</code>来设置过渡总体效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;transition name=&quot;showlist&quot; v-if=&quot;category&quot;&gt;</div><div class="line">...</div><div class="line">&lt;/transition&gt;</div></pre></td></tr></table></figure><p>接着为过渡类名添加规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.showlist-enter-active</span>, <span class="selector-class">.showlist-leave-active</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.showlist-enter</span>, <span class="selector-class">.showlist-leave-active</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-100%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这四个类名与上面transition的name属性有关，比如name=”showlist”，会有如下四个CSS类名：</p><ol><li>showlist-enter：进入过渡的开始状态，元素被插入时生效，只应用一帧后立即删除；</li><li>showlist-enter-active：进入过渡的结束状态，元素被插入时就生效，在过渡过程完成之后移除；</li><li>showlist-leave：离开过渡的开始状态，元素被删除时触发，只应用一帧后立即删除；</li><li>showlist-leave-active：离开过渡的结束状态，元素被删除时生效，离开过渡完成之后被删除</li></ol><p>showlist-enter和showlist-leave-active类设置CSS为<code>opacity: 0</code>，说明过渡刚进入和离开的时候透明度为0，即不显示。</p><h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>筛选包括配送方式和商家属性，选择后点击确定转跳到筛选后对应的餐厅列表。同理，与前两个一样，添加个<code>chooseType()</code>点击事件展示排序内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;sort_item&quot; :class=&quot;&#123;choose_type:sortBy == &apos;activity&apos;&#125;&quot;&gt;</div><div class="line">  &lt;div class=&quot;sort_item_container&quot; @click=&quot;chooseType(&apos;activity&apos;)&quot;&gt;</div><div class="line">    &lt;span :class=&quot;&#123;category_title: sortBy == &apos;activity&apos;&#125;&quot;&gt;筛选&lt;/span&gt;</div><div class="line">    &lt;svg width=&quot;10&quot; height=&quot;10&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; class=&quot;sort_icon&quot;&gt;</div><div class="line">      &lt;polygon points=&quot;0,3 10,3 5,8&quot;/&gt;</div><div class="line">    &lt;/svg&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="获取配送方式和商家属性数据"><a href="#获取配送方式和商家属性数据" class="headerlink" title="获取配送方式和商家属性数据"></a>获取配送方式和商家属性数据</h3><p>直接上代码吧！</p><p><strong>webpack.dev.config.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/foodDelivery'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://h5.ele.me/restapi/shopping/v1/restaurants/filter-bar/attributes'</span></div><div class="line">  axios.get(url, &#123;</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">      <span class="attr">Host</span>: <span class="string">'h5.ele.me'</span>,</div><div class="line">      <span class="attr">Referer</span>: <span class="string">'https://h5.ele.me/msite/food/'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">params</span>: req.query</div><div class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  res.json(response.data)</div><div class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(e)</div><div class="line">  &#125;)</div><div class="line">&#125;),</div></pre></td></tr></table></figure><p><strong>food.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getFoodDelivery</span> (<span class="params">latitude, longitude</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/foodDelivery'</span></div><div class="line"></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    latitude,</div><div class="line">    longitude,</div><div class="line">    <span class="attr">terminal</span>: <span class="string">'h5'</span></div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>food.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">created () &#123;</div><div class="line">  msiteAdress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 记录当前经度纬度</span></div><div class="line">    <span class="keyword">this</span>.SET_LATITUDE(res.latitude)</div><div class="line">    <span class="keyword">this</span>.SET_LONGITUDE(res.longitude)</div><div class="line">    </div><div class="line">    getFoodDelivery(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude).then(<span class="function"><span class="params">res3</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.delivery = res3.delivery_mode</div><div class="line">      <span class="keyword">this</span>.deliveryId = res3.delivery_mode.id</div><div class="line">      <span class="keyword">this</span>.deliveryName = res3.delivery_mode.text</div><div class="line">      <span class="keyword">this</span>.supports = res3.supports</div><div class="line">      <span class="keyword">this</span>.supports.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.support_ids[index] = &#123;<span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">id</span>: item.id&#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="配送方式"><a href="#配送方式" class="headerlink" title="配送方式"></a>配送方式</h3><p>创建点击事件<code>selectDeliveryMode(id)</code>，选中配送方式。在data中定义要用到的数据属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">delivery</span>: <span class="literal">null</span>,        <span class="comment">// 配送方式数据</span></div><div class="line">    supports: [],        <span class="comment">// 商家支持活动数据</span></div><div class="line">    deliveryMode: <span class="literal">null</span>,     <span class="comment">// 选中的配送方式</span></div><div class="line">    support_ids: [],        <span class="comment">// 选中的商铺活动列表</span></div><div class="line">    filterNum: <span class="number">0</span>,      <span class="comment">// 所选中的所有样式的集合</span></div><div class="line">    deliveryId: <span class="string">''</span>,</div><div class="line">    <span class="attr">deliveryName</span>: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  selectDeliveryMode (id) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.deliveryMode === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.filterNum++</div><div class="line">      <span class="keyword">this</span>.deliveryMode = id</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.deliveryMode === id) &#123;</div><div class="line">      <span class="keyword">this</span>.filterNum--</div><div class="line">      <span class="keyword">this</span>.deliveryMode = <span class="literal">null</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.deliveryMode = id</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当delivery_mode为空时，选中当前项同时filterNum加一；反之delivery_mode为当前已有值时，清空所选项，并且filterNum减一；如果delivery_mode已有值且不等于当前选择值，则赋值delivery_mode为当前所选id。</p><p>将获取到的数据填充dom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;section style=&quot;width: 100%;&quot;&gt;</div><div class="line">  &lt;header class=&quot;filter_header_style&quot;&gt;配送方式&lt;/header&gt;</div><div class="line">  &lt;ul class=&quot;filter_ul&quot;&gt;</div><div class="line">    &lt;li class=&quot;filter_li&quot; :key=&quot;deliveryId&quot; @click=&quot;selectDeliveryMode(deliveryId)&quot;&gt;</div><div class="line">      &lt;svg :style=&quot;&#123;opacity: (deliveryId == 0)&amp;&amp;(deliveryMode !== 0)? 0: 1&#125;&quot;&gt;</div><div class="line">      &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; :xlink:href=&quot;deliveryMode == deliveryId? &apos;#selected&apos;:&apos;#fengniao&apos;&quot;&gt;&lt;/use&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">      &lt;span :class=&quot;&#123;selected_filter: deliveryMode == deliveryId&#125;&quot;&gt;&#123;&#123;deliveryName&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><h3 id="商家属性"><a href="#商家属性" class="headerlink" title="商家属性"></a>商家属性</h3><p>将获取到的商家属性数据填充dom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;section style=&quot;width: 100%&quot;&gt;</div><div class="line">  &lt;header class=&quot;filter_header_style&quot;&gt;商家属性（可以多选）&lt;/header&gt;</div><div class="line">  &lt;ul class=&quot;filter_ul&quot; style=&quot;padding-bottom: .5rem;&quot;&gt;</div><div class="line">    &lt;li class=&quot;filter_li&quot; v-for=&quot;(item,index) in supports&quot; :key=&quot;item.id&quot; @click=&quot;selectSupportIds(index, item.id)&quot;&gt;</div><div class="line">      &lt;svg v-show=&quot;support_ids[index].status&quot; class=&quot;activity_svg&quot;&gt;</div><div class="line">      &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#selected&quot;&gt;&lt;/use&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">      &lt;span class=&quot;filter_icon&quot; :style=&quot;&#123;color: &apos;#&apos; + item.icon_color, borderColor: &apos;#&apos; + item.icon_color&#125;&quot;&gt;&#123;&#123;item.icon_name&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;span :class=&quot;&#123;selected_filter: support_ids[index].status&#125;&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>遍历supports商家属性<code>v-for=&quot;(item,index) in supports&quot;</code>，获取每个item的属性。点击商家活动，选中取反当前状态，创建点击事件<code>selectSupportIds(index, item.id)</code>。绑定当前选中的商家属性，表示为<code>:class=&quot;{selected_filter: support_ids[index].status}&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">selectSupportIds (index, id) &#123;</div><div class="line">  <span class="comment">// 数组替换新的值</span></div><div class="line">  <span class="keyword">this</span>.support_ids.splice(index, <span class="number">1</span>, &#123;<span class="attr">status</span>: !<span class="keyword">this</span>.support_ids[index].status, id&#125;)</div><div class="line">  <span class="comment">// 重新计算filterNum的个数</span></div><div class="line">  <span class="keyword">this</span>.filterNum = <span class="keyword">this</span>.delivery_mode === <span class="literal">null</span> ? <span class="number">0</span> : <span class="number">1</span></div><div class="line">  <span class="keyword">this</span>.support_ids.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (item.status) &#123;</div><div class="line">    <span class="keyword">this</span>.filterNum++</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h3 id="清空与确定"><a href="#清空与确定" class="headerlink" title="清空与确定"></a>清空与确定</h3><p>点击确定或清空按钮，触发相应的事件处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;footer class=&quot;confirm_filter&quot;&gt;</div><div class="line">  &lt;div class=&quot;clear_all filter_button_style&quot; @click=&quot;clearSelect&quot;&gt;清空&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;confirm_select filter_button_style&quot; @click=&quot;confirmSelectFun&quot;&gt;</div><div class="line">  确定</div><div class="line">  &lt;span v-show=&quot;filterNum&quot;&gt;(&#123;&#123;filterNum&#125;&#125;)&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure><h4 id="清空事件"><a href="#清空事件" class="headerlink" title="清空事件"></a>清空事件</h4><p>点击清空按钮清空数据，否则一直保持原有状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">clearSelect () &#123;</div><div class="line">  <span class="keyword">this</span>.support_ids.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">  item.status = <span class="literal">false</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">this</span>.filterNum = <span class="number">0</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="确定事件"><a href="#确定事件" class="headerlink" title="确定事件"></a>确定事件</h4><p>点击确认后更新相对应的餐厅列表数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">confirmSelectFun () &#123;</div><div class="line">  getFoodFilter(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude, <span class="keyword">this</span>.extras, <span class="keyword">this</span>.support_ids, <span class="keyword">this</span>.deliveryMode, <span class="keyword">this</span>.restaurant_category_id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.shopListArr = <span class="built_in">Array</span>.from(<span class="built_in">Object</span>.keys(res.items).map(<span class="function"><span class="params">key</span> =&gt;</span> res.items[key].restaurant))</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">this</span>.sortBy = <span class="string">''</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>筛选选项整个效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/%E7%AD%9B%E9%80%89.gif" alt="筛选"></p><p>到此food页面开发完毕！</p><p>具体代码见：<a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;https://kakajing.github.io/2018/02/04/%E9%A5%BF%E4%BA%86%E4%B9%88%E5%95%86%E5%9F%8E%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Avuex%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8Cfood%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E4%B8%80/&quot;&gt;饿了么45个页面重构（四）：vuex的使用和food页面开发一&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;p&gt;同理，与分类一样，添加个&lt;code&gt;chooseType()&lt;/code&gt;点击事件展示排序内容。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（四）：vuex的使用和food页面开发一</title>
    <link href="http://kakajing.github.io/2018/04/05/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Avuex%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8Cfood%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E4%B8%80/"/>
    <id>http://kakajing.github.io/2018/04/05/饿了么45个页面重构（四）：vuex的使用和food页面开发一/</id>
    <published>2018-04-05T06:17:26.000Z</published>
    <updated>2018-04-13T12:42:46.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>在进入项目之前先学习一下Vuex。</p><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。这是官网的解释。个人理解为在data中的属性需要共享给其他vue组件使用的部分叫做状态。简单的说就是data中需要共用的属性。</p></blockquote><a id="more"></a><p>vuex有几个核心概念，下面是我对它们的理解，简而言之：</p><ul><li>state：也就是共享的数据</li><li>mutation：对数据进行修改操作，也就是修改state（Mutation除了接收<br>state 作为第一个参数外，还可以接收其他的参数）。</li><li>getters：取数据</li><li>action：对取出的数据做处理</li></ul><p>这里不过多的解释，感兴趣的同学可以去网上搜一些相关文章！</p><h3 id="使用vuex"><a href="#使用vuex" class="headerlink" title="使用vuex"></a>使用vuex</h3><p>1、安装vuex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vuex --save</div></pre></td></tr></table></figure><p>2、新建一个store文件夹，并在文件夹下新建index.js文件，文件中引入vue和vuex。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div></pre></td></tr></table></figure><p>3、使用vuex</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.use(Vuex)</div></pre></td></tr></table></figure><p>同时创建state.js、mutation-type.js、mutations.js、getters.js、actions.js这几个文件，引入到index文件中，实例化vuex时加入这几个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></div><div class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></div><div class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  actions,</div><div class="line">  getters,</div><div class="line">  state,</div><div class="line">  mutations</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>4、在main.js 中引入新建的vuex文件，在实例化 Vue对象时加入 store 对象 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  store,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h1 id="food页面"><a href="#food页面" class="headerlink" title="food页面"></a>food页面</h1><p>点击foodType（例如：点击美食）进入相应的food页面。如图操作：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/food%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC.gif" alt="food页面跳转"></p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>修改msite页面foodType的router-link配置。</p><p><strong>msite.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;swiper-slide food_types_container&quot; v-for=&quot;(item, index) in foodTypes&quot; :key=&quot;index&quot;&gt;</div><div class="line">            &lt;router-link :to=&quot;&#123;path: &apos;/food&apos;,</div><div class="line">                                query: &#123;geohash, title: foodItem.name, restaurant_category_id: getCategoryId(foodItem.link)&#125;&#125;&quot;</div><div class="line">                         v-for=&quot;foodItem in item&quot; </div><div class="line">                         :key=&quot;foodItem.id&quot;</div><div class="line">                         class=&quot;link_to_food&quot;&gt;</div><div class="line">            &lt;/router-link&gt;</div><div class="line">          &lt;/div&gt;</div></pre></td></tr></table></figure><p>设置跳转带的参数<code>geohash</code>、<code>title</code>、<code>restaurant_category_id</code>。点击图标后进入food页面。</p><h2 id="food页面-1"><a href="#food页面-1" class="headerlink" title="food页面"></a>food页面</h2><p>food页面分为三个部分：对应头部名称、选项排序、餐厅列表。</p><h3 id="头部名称"><a href="#头部名称" class="headerlink" title="头部名称"></a>头部名称</h3><p>首先设置它的头部名称，我们可以直接根据router-link配置中的查询参数获取相应参数。代码如下：</p><p><strong>food.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"food_container"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head-top</span> <span class="attr">:head-title</span>=<span class="string">"headTitle"</span> <span class="attr">goBack</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">head-top</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">  <span class="keyword">import</span> EHeader <span class="keyword">from</span> <span class="string">'components/e-header/e-header'</span></div><div class="line"></div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">headTitle</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">goBack</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  created() &#123;</div><div class="line">    <span class="keyword">this</span>.headTitle = <span class="keyword">this</span>.$route.query.title</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">      EHeader</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选项排序"><a href="#选项排序" class="headerlink" title="选项排序"></a>选项排序</h3><p>选项排序又分为三部分：分类、排序、筛选。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;sort_container&quot;&gt;</div><div class="line">&lt;div class=&quot;sort_item&quot; :class=&quot;&#123;choose_type:sortBy == &apos;food&apos;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;sort_item&quot; :class=&quot;&#123;choose_type:sortBy == &apos;sort&apos;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;sort_item&quot; :class=&quot;&#123;choose_type:sortBy == &apos;activity&apos;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p><code>:class</code>表示被绑定的DOM 将与数据保持同步，每当数据有改动，相应的DOM视图也会更新。也就是说当choose_type发生改变时<code>sortBy</code>会更新对应的数据。<code>sortBy</code>表示为筛选条件。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>想要展示分类下的内容，需要添加个点击事件<code>chooseType()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;sort_item&quot; :class=&quot;&#123;choose_type:sortBy == &apos;food&apos;&#125;&quot;&gt;</div><div class="line">  &lt;div class=&quot;sort_item_container&quot; @click=&quot;chooseType(&apos;food&apos;)&quot;&gt;</div><div class="line">    &lt;div class=&quot;sort_item_border&quot;&gt;</div><div class="line">      &lt;span&gt;&#123;&#123;foodTitle&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;svg width=&quot;10&quot; height=&quot;10&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; class=&quot;sort_icon&quot;&gt;</div><div class="line">        &lt;polygon points=&quot;0,3 10,3 5,8&quot;/&gt;</div><div class="line">      &lt;/svg&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>当点击顶部三个选项展示不同的列表，选中当前选项进行展示同时收回其他选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  chooseType (type) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.sortBy !== type) &#123;</div><div class="line">      <span class="keyword">this</span>.sortBy = type</div><div class="line">      <span class="comment">// food选项中头部标题发生改变，需要特殊处理</span></div><div class="line">      <span class="keyword">if</span> (type === <span class="string">'food'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.foodTitle = <span class="string">'分类'</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 将foodTitle 和 headTitle 进行同步</span></div><div class="line">        <span class="keyword">this</span>.foodTitle = <span class="keyword">this</span>.headTitle</div><div class="line">      &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 再次点击相同选项时收回列表</span></div><div class="line">        <span class="keyword">this</span>.sortBy = <span class="string">''</span></div><div class="line">        <span class="keyword">if</span> (type === <span class="string">'food'</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.foodTitle = <span class="keyword">this</span>.headTitle</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>截图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/%E5%88%86%E7%B1%BB.gif" alt="分类"></p><h5 id="获取展开headTitle左侧的食品分类"><a href="#获取展开headTitle左侧的食品分类" class="headerlink" title="获取展开headTitle左侧的食品分类"></a>获取展开headTitle左侧的食品分类</h5><p>点击headTitle后变成分类。通过使用axios请求获取分类数据。同理，先在webpack.dev.conf.js文件中添加后台数据。</p><p><strong>webpack.dev.conf.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/foodCategory'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://h5.ele.me/restapi/shopping/v2/restaurant/category'</span></div><div class="line">  axios.get(url, &#123;</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">      <span class="attr">Host</span>: <span class="string">'h5.ele.me'</span>,</div><div class="line">      <span class="attr">Referer</span>: <span class="string">'https://h5.ele.me/msite/food/'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">params</span>: req.query</div><div class="line">    &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">    res.json(response.data)</div><div class="line">    &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(e)</div><div class="line">  &#125;)</div><div class="line"> &#125;),</div></pre></td></tr></table></figure><p>接着设置访问参数</p><p><strong>food.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getFoodCategory</span> (<span class="params">latitude, longitude</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/foodCategory'</span></div><div class="line"></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    latitude,</div><div class="line">    longitude</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请求中需要得到<code>latitude</code>和<code>longitude</code>的值，想要得到这两个参数值先要获取当前地址，使用vuex管理特性对这两个参数进行状态记录和设置。</p><p><strong>state.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">latitude</span>: <span class="string">''</span>,   <span class="comment">// 当前位置纬度</span></div><div class="line">  longitude: <span class="string">''</span>   <span class="comment">// 当前位置经度</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</div></pre></td></tr></table></figure><p><strong>mutation-types.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_LATITUDE = <span class="string">'SET_LATITUDE'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_LONGITUDE = <span class="string">'SET_LONGITUDE'</span></div></pre></td></tr></table></figure><p><strong>mutations.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> matutaions = &#123;</div><div class="line">  <span class="comment">// 记录当前经度</span></div><div class="line">  [types.SET_LATITUDE] (state, latitude) &#123;</div><div class="line">    state.latitude = latitude</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 记录当前纬度</span></div><div class="line">  [types.SET_LONGITUDE] (state, longitude) &#123;</div><div class="line">    state.longitude = longitude</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> matutaions</div></pre></td></tr></table></figure><p><strong>getters.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> latitude = <span class="function"><span class="params">state</span> =&gt;</span> state.latitude</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> longitude = <span class="function"><span class="params">state</span> =&gt;</span> state.longitude</div></pre></td></tr></table></figure><p>在food.vue组件中引入<code>getFoodCategory()</code>和vuex管理特性。data中定义category表示分类左侧数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getFoodCategory &#125; <span class="keyword">from</span> <span class="string">'api/food'</span></div><div class="line"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">sortBy</span>: <span class="string">''</span>, </div><div class="line">    <span class="attr">category</span>: <span class="literal">null</span> </div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">  </div><div class="line"> <span class="attr">computed</span>: &#123;</div><div class="line">   ...mapState([</div><div class="line">     <span class="string">'latitude'</span>, <span class="string">'longitude'</span></div><div class="line">   ])</div><div class="line">&#125;,</div><div class="line"></div><div class="line">created () &#123;</div><div class="line">  msiteAdress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 记录当前经度纬度</span></div><div class="line">  <span class="keyword">this</span>.SET_LATITUDE(res.latitude)</div><div class="line">  <span class="keyword">this</span>.SET_LONGITUDE(res.longitude)</div><div class="line">  <span class="comment">// 获取category 种类列表</span></div><div class="line">  getFoodCategory(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude).then(<span class="function"><span class="params">resq</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.category = resq</div><div class="line">    <span class="built_in">console</span>.log(resq)</div><div class="line">   &#125;)</div><div class="line">&#125;,</div><div class="line">                     </div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  ...mapMutations([</div><div class="line">     <span class="string">'SET_LATITUDE'</span>,</div><div class="line">     <span class="string">'SET_LONGITUDE'</span></div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>dom渲染：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;section class=&quot;category_left&quot;&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li class=&quot;category_left_li&quot;</div><div class="line">        v-for=&quot;(item, index) in category&quot; :key=&quot;index&quot;</div><div class="line">        :class=&quot;&#123;category_active:restaurant_category_id == item.id&#125;&quot;&gt;</div><div class="line">      &lt;section&gt;</div><div class="line">      &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;/section&gt;</div><div class="line">      &lt;section&gt;</div><div class="line">        &lt;span class=&quot;category_count&quot;&gt;&#123;&#123;item.count&#125;&#125;&lt;/span&gt;</div><div class="line">        &lt;svg v-if=&quot;index&quot; width=&quot;8&quot; height=&quot;8&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;</div><div class="line">        class=&quot;category_arrow&quot;&gt;</div><div class="line">        &lt;path d=&quot;M0 0 L6 4 L0 8&quot; stroke=&quot;#666&quot; stroke-width=&quot;1.5&quot; fill=&quot;none&quot;/&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">      &lt;/section&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><p>遍历<code>category</code>，填充每个item需要的相应数据。绑定当前点击的<code>category</code>，表示为<code>:class=&quot;{category_active:restaurant_category_id == item.id}&quot;</code></p><p>得到category数据，dom渲染运行如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e11.png" alt="e11"></p><h5 id="获取category右侧的数据"><a href="#获取category右侧的数据" class="headerlink" title="获取category右侧的数据"></a>获取category右侧的数据</h5><p>获取每个category所对应的数据，data中定义属性categoryDetail表示分类右侧的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">categoryDetail</span>: <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">created () &#123;</div><div class="line">  msiteAdress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 记录当前经度纬度</span></div><div class="line">  <span class="keyword">this</span>.SET_LATITUDE(res.latitude)</div><div class="line">  <span class="keyword">this</span>.SET_LONGITUDE(res.longitude)</div><div class="line">  <span class="comment">// 获取category 种类列表</span></div><div class="line">  getFoodCategory(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude).then(<span class="function"><span class="params">resq</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.category = resq</div><div class="line">    <span class="keyword">this</span>.category.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.restaurant_category_id === item.id) &#123;</div><div class="line">      <span class="keyword">this</span>.categoryDetail = item.sub_categories</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">   &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在dom中渲染。当点击category左侧列表的某个选项时，右侧渲染相应的sub_categories列表，创建<code>selectCategoryName(item.id, index)</code>点击事件获取右侧数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;div name=&quot;showlist&quot; v-if=&quot;category&quot;&gt;</div><div class="line">  &lt;section v-show=&quot;sortBy == &apos;food&apos;&quot; class=&quot;category_container sort_detail_type&quot;&gt;</div><div class="line">    &lt;section class=&quot;category_left&quot;&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li class=&quot;category_left_li&quot;</div><div class="line">            v-for=&quot;(item, index) in category&quot; :key=&quot;index&quot;</div><div class="line">            :class=&quot;&#123;category_active:restaurant_category_id == item.id&#125;&quot;</div><div class="line">            @click=&quot;selectCategoryName(item.id, index)&quot;&gt;</div><div class="line">          ...</div><div class="line">        &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">    &lt;section class=&quot;category_right&quot;&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li v-for=&quot;(detailItem, index) in categoryDetail&quot; :key=&quot;detailItem.id&quot;</div><div class="line">            v-if=&quot;index&quot;</div><div class="line">            class=&quot;category_right_li&quot;</div><div class="line">            @click=&quot;getCategoryIds(detailItem.id, detailItem.name)&quot;</div><div class="line">            :class=&quot;&#123;category_right_choosed: restaurant_category_ids == detailItem.id || (!restaurant_category_ids)&amp;&amp;index == 0&#125;&quot;</div><div class="line">            &gt;</div><div class="line">          &lt;img :src=&quot;imgBaseUrl + detailItem.image_url + &apos;.png&apos;&quot; v-if=&quot;index&quot; class=&quot;category_icon&quot;&gt;</div><div class="line">          &lt;span&gt;&#123;&#123;detailItem.name&#125;&#125;&lt;/span&gt;</div><div class="line">          &lt;span&gt;&#123;&#123;detailItem.count&#125;&#125;&lt;/span&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/section&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  selectCategoryName (id, index) &#123;</div><div class="line">    // 第一个选项 -- 全部商家 因为没有自己的列表，所以点击则默认获取选所有数据</div><div class="line">    if (index === 0) &#123;</div><div class="line">      this.restaurant_category_ids = null</div><div class="line">      this.sortBy = &apos;&apos;</div><div class="line">    &#125; else &#123;</div><div class="line">    // 不是第一个选项时，右侧展示其子级sub_categories的列表</div><div class="line">      this.restaurant_category_id = id</div><div class="line">      this.categoryDetail = this.category[index].sub_categories</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>遍历<code>categoryDetail</code>，填充每个<code>detailItem</code>需要的相应数据。绑定当前点击的<code>categoryDetail</code>，表示为<code>:class=&quot;{category_right_choosed: restaurant_category_ids == detailItem.id || (!restaurant_category_ids)&amp;&amp;index == 0}&quot;</code>。</p><p>页面渲染如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/categoryDetail.gif" alt="categoryDetail"></p><p>左侧数据为category，右侧则是categoryDetail。渲染成功！</p><h4 id="获取当前餐厅列表"><a href="#获取当前餐厅列表" class="headerlink" title="获取当前餐厅列表"></a>获取当前餐厅列表</h4><p>在<strong>msite.vue</strong>组件中，设置router-link时query参数需要带<code>restaurant_category_id</code>，这是就需要在<strong>shop-list.vue</strong>组件props中添加<code>restaurantCategoryId</code>属性。</p><p><strong>shop-list.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">props: [<span class="string">'restaurantCategoryId'</span>, <span class="string">'geohash'</span>, <span class="string">'shopListArr'</span>]</div></pre></td></tr></table></figure><p>继续回到<strong>msite.vue</strong>组件中，对<code>restaurant_category_id</code>的值做些处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;router-link :to=&quot;&#123;path: &apos;/food&apos;,</div><div class="line">             query: &#123;geohash, title: foodItem.name, restaurant_category_id: getCategoryId(foodItem.link)&#125;&#125;&quot;</div><div class="line">              v-for=&quot;foodItem in item&quot; :key=&quot;foodItem.id&quot; class=&quot;link_to_food&quot;&gt;</div><div class="line">&lt;/router-link&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">getCategoryId (url) &#123; </div><div class="line">      let urlData = decodeURIComponent(url).split(&apos;=&apos;)[3].replace(&apos;&amp;navType&apos;, &apos;&apos;)</div><div class="line">      if (/restaurant_category_id/gi.test(urlData)) &#123;</div><div class="line">      return JSON.parse(urlData).restaurant_category_id</div><div class="line">      &#125; else &#123;</div><div class="line">      return &apos;&apos;</div><div class="line">      &#125;</div><div class="line">   &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>getCategoryId(url)</code>作用是解码url地址，求<code>restaurant_category_id</code>值。首先对传入的url进行拆分处理，通过正则表达式去匹配，看有没有和urlData相同的字符串，如果匹配成功返回<code>restaurant_category_id</code>的值，如果匹配失败则返回空。</p><p>前面我们已经写了个餐厅列表shop-list.vue基础组件，直接拿来使用就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;food_container&quot;&gt;</div><div class="line">  &lt;section class=&quot;shop_list_container&quot;&gt;</div><div class="line">      &lt;shop-list&gt;&lt;/shop-list&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">import ShopList from &apos;base/shop-list/shop-list&apos;</div><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">  geohash: &apos;&apos;,</div><div class="line">    restaurant_category_id: &apos;&apos;,  </div><div class="line">  shopListArr: []</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  components: &#123;</div><div class="line">    ShopList</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>webpack.dev.conf.js文件中添加后台数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/restaurants'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://h5.ele.me/restapi/shopping/v3/restaurants'</span></div><div class="line">  axios.get(url, &#123;</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">      <span class="attr">Host</span>: <span class="string">'h5.ele.me'</span>,</div><div class="line">      <span class="attr">Referer</span>: <span class="string">'https://h5.ele.me/msite/food/'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">params</span>: req.query</div><div class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  res.json(response.data)</div><div class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(e)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>food.js文件设置请求参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getFoodRestaurants</span> (<span class="params">latitude, longitude, extras, restaurantCategoryIds</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/restaurants'</span></div><div class="line"></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    latitude,</div><div class="line">    longitude,</div><div class="line">    <span class="attr">keyword</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">offset</span>: <span class="number">0</span>,</div><div class="line">    extras,</div><div class="line">    <span class="attr">terminal</span>: <span class="string">'h5'</span>,</div><div class="line">    <span class="attr">brand_ids</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">restaurant_category_ids</span>: restaurantCategoryIds</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>food.vue中引入<code>getFoodRestaurants()</code>，获取商铺列表数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">created () &#123;</div><div class="line">  <span class="keyword">this</span>.restaurant_category_id = <span class="keyword">this</span>.$route.query.restaurant_category_id</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.latitude) &#123;</div><div class="line">    <span class="comment">// 获取位置信息</span></div><div class="line">    msiteAdress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 记录当前经度纬度</span></div><div class="line">      <span class="keyword">this</span>.SET_LATITUDE(res.latitude)</div><div class="line">      <span class="keyword">this</span>.SET_LONGITUDE(res.longitude)</div><div class="line">      <span class="comment">// 获取商铺列表</span></div><div class="line">      getFoodRestaurants(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude, <span class="keyword">this</span>.extras, <span class="keyword">this</span>.restaurant_category_id).then(<span class="function"><span class="params">res2</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.shopListArr = <span class="built_in">Array</span>.from(<span class="built_in">Object</span>.keys(res2.items).map(<span class="function"><span class="params">key</span> =&gt;</span> res2.items[key].restaurant))</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过路由里面传递的参数获取<code>restaurant_category_id</code>。</p><p>页面渲染如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e12.png" alt="e12"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h1&gt;&lt;p&gt;在进入项目之前先学习一下Vuex。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式&lt;/strong&gt;。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。这是官网的解释。个人理解为在data中的属性需要共享给其他vue组件使用的部分叫做状态。简单的说就是data中需要共用的属性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（三）轮播图及msite页面开发</title>
    <link href="http://kakajing.github.io/2018/03/24/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%8F%8Amsite%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <id>http://kakajing.github.io/2018/03/24/饿了么45个页面重构（三）轮播图及msite页面开发/</id>
    <published>2018-03-24T02:42:50.000Z</published>
    <updated>2018-04-13T12:42:54.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="miste页面"><a href="#miste页面" class="headerlink" title="miste页面"></a>miste页面</h1><p>点击城市地址转跳msite页面。miste页面分为三个部分，分别是头部地址展示、食品分类列表展示和商铺列表展示。食品分类列表使用<a href="http://www.swiper.com.cn/" target="_blank" rel="external">Swiper</a>插件做轮播图展示，接下来就来了解如何使用<a href="http://www.swiper.com.cn/" target="_blank" rel="external">Swiper</a>。</p><a id="more"></a><h2 id="Swiper的应用"><a href="#Swiper的应用" class="headerlink" title="Swiper的应用"></a>Swiper的应用</h2><p><em>Swiper</em>(<em>Swiper</em> master)是目前应用较广泛的移动端网页触摸内容滑动js插件。</p><h4 id="在package-json中配置swiper"><a href="#在package-json中配置swiper" class="headerlink" title="在package.json中配置swiper"></a>在<strong>package.json</strong>中配置swiper</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">    "vue": "^2.5.2",</div><div class="line">    "vue-router": "^3.0.1",</div><div class="line">    "vuex": "^3.0.1",</div><div class="line">    "axios": "^0.17.1",</div><div class="line">    "good-storage": "^1.0.1",</div><div class="line">    "babel-runtime": "^6.26.0",</div><div class="line">    "swiper": "^4.1.0"</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><p>在需要的组件中引入Swiper就可以使用了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Swiper <span class="keyword">from</span> <span class="string">'swiper'</span></div></pre></td></tr></table></figure><h2 id="头部地址展示"><a href="#头部地址展示" class="headerlink" title="头部地址展示"></a>头部地址展示</h2><p>引入e-header组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;e-header signin-up=&apos;msite&apos;&gt;</div><div class="line">      &lt;router-link to=&quot;/search/geohash&quot; class=&quot;link_search&quot; slot=&quot;search&quot;&gt;</div><div class="line">        &lt;svg width=&quot;100%&quot; height=&quot;100%&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</div><div class="line">          &lt;circle cx=&quot;9&quot; cy=&quot;9&quot; r=&quot;8&quot; stroke=&quot;rgb(255,255,255)&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot;/&gt;</div><div class="line">          &lt;line x1=&quot;15&quot; y1=&quot;15&quot; x2=&quot;20&quot; y2=&quot;20&quot; style=&quot;stroke:rgb(255,255,255);stroke-width:2&quot;/&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">      &lt;/router-link&gt;</div><div class="line">      &lt;router-link to=&quot;/home&quot; slot=&quot;msite-title&quot; class=&quot;msite_title&quot;&gt;</div><div class="line">        &lt;span class=&quot;title_text&quot;&gt;&#123;&#123;msiteTitle&#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;/router-link&gt;</div><div class="line">&lt;/e-header&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">import EHeader from &apos;components/e-header/e-header&apos;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>在data中定义<code>msiteTitle</code>表示城市地址，以及其他相关属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">msiteTitle</span>: <span class="string">'获取地址中...'</span>,</div><div class="line">    <span class="attr">geohash</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">latitude</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">longitude</span>: <span class="string">''</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过引入<code>msiteAdress()</code>方法获取当前地址的相关数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getMsiteAdress () &#123;</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">  msiteAdress().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  that.msiteTitle = res.name</div><div class="line">  that.latitude = res.latitude</div><div class="line">  that.longitude = res.longitude</div><div class="line">  that.geohash = res.geohash</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>页面地址展示：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e21.png" alt="e8"></p><h2 id="食品分类列表展示"><a href="#食品分类列表展示" class="headerlink" title="食品分类列表展示"></a>食品分类列表展示</h2><p>上面已经说过，使用<a href="http://www.swiper.com.cn/" target="_blank" rel="external">Swiper</a>做展示。接着看以下代码渲染以及使用swiper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;nav class=&quot;msite_nav&quot;&gt;</div><div class="line">      &lt;div class=&quot;swiper-container&quot; v-if=&quot;foodTypes.length&quot;&gt;</div><div class="line">        &lt;div class=&quot;swiper_wrapper&quot;&gt;</div><div class="line">          &lt;div class=&quot;swiper-slide food_types_container&quot; v-for=&quot;(item, index) in foodTypes&quot; :key=&quot;index&quot;&gt;</div><div class="line">            &lt;router-link :to=&quot;&#123;path: &apos;/food&apos;, query: &#123;geohash, title: foodItem.name, restaurant_category_id: getCategoryId(foodItem.link)&#125;&#125;&quot;</div><div class="line">                         v-for=&quot;foodItem in item&quot; :key=&quot;foodItem.id&quot;</div><div class="line">                         class=&quot;link_to_food&quot;&gt;</div><div class="line">              &lt;figure&gt;</div><div class="line">                &lt;img :src=&quot;imgBaseUrl + foodItem.image_hash + &apos;.jpeg&apos;&quot;/&gt;</div><div class="line">                &lt;figcaption&gt;&#123;&#123;foodItem.name&#125;&#125;&lt;/figcaption&gt;</div><div class="line">              &lt;/figure&gt;</div><div class="line">            &lt;/router-link&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/nav&gt;</div></pre></td></tr></table></figure><p>data中定义<code>foodTypes</code>表示为食品分类列表，在页面中使用v-for对<code>foodTypes</code>进行遍历，得到每个<code>item</code>，然后对item再进行遍历，得到每个<code>foodItem</code>以此使用<code>foodItem</code>里的属性进行数据填充渲染。</p><h3 id="初始化swiper"><a href="#初始化swiper" class="headerlink" title="初始化swiper"></a>初始化swiper</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">initSwiper () &#123;</div><div class="line">       <span class="keyword">this</span>.swiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</div><div class="line">         <span class="attr">pagination</span>: &#123;</div><div class="line">           <span class="attr">el</span>: <span class="string">'.swiper-pagination'</span>,</div><div class="line">           <span class="attr">type</span>: <span class="string">'bullets'</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">loop</span>: <span class="literal">true</span></div><div class="line">       &#125;)</div><div class="line">     &#125;,</div></pre></td></tr></table></figure><h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h3><p>对饿了么官网进行数据抓取，在webpack.dev.conf.js添加以下代码：</p><p><strong>webpack.dev.conf.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/msiteFoodTypes'</span>, (req, res) =&gt; &#123;</div><div class="line">       <span class="keyword">const</span> url = <span class="string">'https://h5.ele.me/restapi/shopping/openapi/entries'</span></div><div class="line">       axios.get(url, &#123;</div><div class="line">         <span class="attr">headers</span>: &#123;</div><div class="line">           <span class="attr">Host</span>: <span class="string">'h5.ele.me'</span>,</div><div class="line">           <span class="attr">Referer</span>: <span class="string">'https://h5.ele.me/'</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">params</span>: req.query</div><div class="line">       &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">         res.json(response.data)</div><div class="line">       &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">         <span class="built_in">console</span>.log(e)</div><div class="line">       &#125;)</div><div class="line">     &#125;),</div></pre></td></tr></table></figure><p>设置访问参数</p><p><strong>msite.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">msiteFoodTypes</span> (<span class="params">latitude, longitude</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/msiteFoodTypes'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">latitude</span>: latitude,</div><div class="line">    <span class="attr">longitude</span>: longitude,</div><div class="line">    <span class="string">'templates[]'</span>: <span class="string">'main_template'</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在msite组件中引入<code>msiteFoodTypes</code>方法，得到数据进行渲染。</p><p><strong>msite.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; msiteAdress, msiteFoodTypes &#125; <span class="keyword">from</span> <span class="string">'api/msite'</span></div><div class="line"></div><div class="line">getMsiteFoodTypes () &#123;</div><div class="line">  msiteFoodTypes(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> resLength = res[<span class="number">0</span>].entries.length</div><div class="line">    <span class="keyword">let</span> resArr = res[<span class="number">0</span>].entries.concat([])</div><div class="line">    <span class="keyword">let</span> foodArr = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; resLength; i += <span class="number">8</span>, j++) &#123;</div><div class="line">      foodArr[j] = resArr.splice(<span class="number">0</span>, <span class="number">8</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.foodTypes = foodArr</div><div class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.initSwiper()</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>页面展示：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/22.png" alt="e9"></p><h2 id="商铺列表展示"><a href="#商铺列表展示" class="headerlink" title="商铺列表展示"></a>商铺列表展示</h2><p>由于商铺列表在其他组件中也可能用到，所以单独作为基础组件。</p><h3 id="基础组件shop-list-vue"><a href="#基础组件shop-list-vue" class="headerlink" title="基础组件shop-list.vue"></a>基础组件shop-list.vue</h3><p>基础代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;router-link :to=&quot;&#123;path: &apos;food&apos;, query:&#123;&#125;&#125;&quot; v-for=&quot;item in shopListArr&quot; tag=&apos;li&apos; :key=&quot;item.id&quot; class=&quot;shop_li&quot;&gt;</div><div class="line">&lt;section&gt;</div><div class="line">&lt;img :src=&quot;imgBaseUrl + subImgUrl(item.image_path)&quot; class=&quot;shop_img&quot;&gt;</div><div class="line">&lt;/section&gt;</div><div class="line">&lt;hgroup class=&quot;shop_right&quot;&gt;</div><div class="line">&lt;header class=&quot;shop_detail_header&quot;&gt;</div><div class="line">&lt;h4 :class=&quot;item.is_premium? &apos;premium&apos;: &apos;&apos;&quot; class=&quot;&quot; class=&quot;shop_title ellipsis&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/h4&gt;</div><div class="line">&lt;ul class=&quot;shop_detail_ul&quot;&gt;</div><div class="line">&lt;li class=&quot;supports&quot; v-for=&quot;child in item.supports&quot; :key=&quot;child.id&quot;&gt;&#123;&#123;child.icon_name&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/header&gt;</div><div class="line">&lt;h5&gt;</div><div class="line">              ...</div><div class="line">              &lt;/h5&gt;</div><div class="line">&lt;h5&gt;</div><div class="line">              ...</div><div class="line">              &lt;/h5&gt;</div><div class="line">&lt;/hgroup&gt;</div><div class="line">&lt;/router-link&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。在vue里，父组件通过 props 向下传递数据给子组件。组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，需要通过子组件的 props 选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">      <span class="attr">geohash</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">default</span>: <span class="string">''</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">shopListArr</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">Array</span>,</div><div class="line">        <span class="attr">default</span>: []</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>shopListArr</code>表示店铺列表数据。</p><p>在msite组件中引入shop-list组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;div&gt;</div><div class="line">...</div><div class="line"></div><div class="line">&lt;shop-list&gt;&lt;/shop-list&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">import ShopList from &apos;base/shop-list/shop-list&apos;</div><div class="line"></div><div class="line">export default&#123;</div><div class="line">components: &#123;</div><div class="line">      EHeader,</div><div class="line">      ShopList</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="动态绑定数据"><a href="#动态绑定数据" class="headerlink" title="动态绑定数据"></a>动态绑定数据</h3><p>在模板中，要动态地绑定父组件的数据到子模板的 props，与绑定到任何普通的HTML特性相类似，就是用 <code>v-bind</code>。每当父组件的数据变化时，该变化也会传导给子组件。这里使用<code>:geohash</code>和<code>:shopListArr</code>动态的绑定数据，同时在data中定义geohash和shopListArr属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;shop-list :geohash=&quot;geohash&quot; :shopListArr=&quot;shopListArr&quot;&gt;&lt;/shop-list&gt;</div><div class="line"></div><div class="line">data()&#123;</div><div class="line">  return &#123;</div><div class="line">    geohash: &apos;&apos;,</div><div class="line">shopListArr: []</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="抓取数据-1"><a href="#抓取数据-1" class="headerlink" title="抓取数据"></a>抓取数据</h3><p>在webpack.dev.conf.js添加以下代码：</p><p><strong>webpack.dev.conf.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/shopList'</span>, (req, res) =&gt; &#123;</div><div class="line">       <span class="keyword">const</span> url = <span class="string">'https://h5.ele.me/restapi/shopping/v3/restaurants'</span></div><div class="line">       axios.get(url, &#123;</div><div class="line">         <span class="attr">headers</span>: &#123;</div><div class="line">           <span class="attr">Referer</span>: <span class="string">'https://h5.ele.me/'</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">params</span>: req.query</div><div class="line">       &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">         res.json(response.data)</div><div class="line">       &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">         <span class="built_in">console</span>.log(e)</div><div class="line">       &#125;)</div><div class="line">     &#125;),</div></pre></td></tr></table></figure><p>设置访问参数</p><p><strong>msite.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shopList</span> (<span class="params">latitude, longitude, extras</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/shopList'</span></div><div class="line">  <span class="keyword">const</span> data = &#123;</div><div class="line">    <span class="attr">latitude</span>: latitude,</div><div class="line">    <span class="attr">longitude</span>: longitude,</div><div class="line">    <span class="attr">offset</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">limit</span>: <span class="number">8</span>,</div><div class="line">    extras,</div><div class="line">    <span class="attr">extra_filters</span>: <span class="string">'home'</span>,</div><div class="line">    <span class="attr">rank_id</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">terminal</span>: <span class="string">'h5'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在msite组件中引入<code>shopList</code>方法，获得数据。</p><p><strong>msite.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; msiteAdress, msiteFoodTypes, shopList &#125; <span class="keyword">from</span> <span class="string">'api/msite'</span></div><div class="line"></div><div class="line">mounted () &#123;</div><div class="line">      <span class="keyword">this</span>.extras = [<span class="string">'activities'</span>, <span class="string">'tags'</span>]</div><div class="line">      msiteAdress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.msiteTitle = res.name</div><div class="line">        <span class="keyword">this</span>.geohash = res.geohash</div><div class="line">        shopList(res.latitude, res.longitude, res.extras).then(<span class="function"><span class="params">resq</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.shopListArr = <span class="built_in">Array</span>.from(<span class="built_in">Object</span>.keys(resq.items).map(<span class="function"><span class="params">key</span> =&gt;</span> resq.items[key].restaurant))</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">      <span class="keyword">this</span>.getMsiteFoodTypes()</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><p>页面展示</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e10.png" alt="e10"></p><p>具体代码见：<a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;miste页面&quot;&gt;&lt;a href=&quot;#miste页面&quot; class=&quot;headerlink&quot; title=&quot;miste页面&quot;&gt;&lt;/a&gt;miste页面&lt;/h1&gt;&lt;p&gt;点击城市地址转跳msite页面。miste页面分为三个部分，分别是头部地址展示、食品分类列表展示和商铺列表展示。食品分类列表使用&lt;a href=&quot;http://www.swiper.com.cn/&quot;&gt;Swiper&lt;/a&gt;插件做轮播图展示，接下来就来了解如何使用&lt;a href=&quot;http://www.swiper.com.cn/&quot;&gt;Swiper&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（二）：axios的应用及首页和city页面相关</title>
    <link href="http://kakajing.github.io/2018/02/20/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Aaxios%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%8A%E9%A6%96%E9%A1%B5%E5%92%8Ccity%E9%A1%B5%E9%9D%A2%E7%9B%B8%E5%85%B3/"/>
    <id>http://kakajing.github.io/2018/02/20/饿了么45个页面重构（二）：axios的应用及首页和city页面相关/</id>
    <published>2018-02-19T18:12:00.000Z</published>
    <updated>2018-04-17T07:36:25.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域请求数据"><a href="#跨域请求数据" class="headerlink" title="跨域请求数据"></a>跨域请求数据</h2><h3 id="使用axios跨域请求数据"><a href="#使用axios跨域请求数据" class="headerlink" title="使用axios跨域请求数据"></a>使用axios跨域请求数据</h3><p>我们的项目是前后端分离，后端只负责接口，前端负责数据展示、逻辑处理。但是前后端开发模式，有一个重要的问题，就是跨域问题。Vue-cli 创建的项目，可以直接利用 Node.js 代理服务器，实现跨域请求，我使用axios解决跨域。<br><a id="more"></a></p><h4 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h4><p>vue2.0官方推荐axios进行ajax请求。axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 <a href="http://baike.baidu.com/link?url=iUceAfgyfJOacUtjPgT4ifaSOxDULAc_MzcLEOTySflAn5iLlHfMGsZMtthBm5sK4y6skrSvJ1HOO2qKtV1ej_" target="_blank" rel="external">CSRF/XSRF</a></li></ul><h4 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure><p>在其他文件中axios即可。</p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><strong>home.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">        &lt;head-top signin-up=&apos;home&apos;&gt;</div><div class="line">            &lt;router-link to=&apos;/home&apos; slot=&apos;logo&apos; class=&quot;head_logo&quot;&gt;ele.me&lt;/router-link&gt;</div><div class="line">        &lt;/head-top&gt;</div><div class="line">        &lt;nav class=&quot;city_nav&quot;&gt;</div><div class="line">            &lt;div class=&quot;city_tip&quot;&gt;</div><div class="line">                &lt;span&gt;当前定位城市：&lt;/span&gt;</div><div class="line">                &lt;span&gt;定位不准时，请在城市列表中选择&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;router-link :to=&quot;&apos;/city/&apos; + guessCityid&quot; class=&quot;guess_city&quot;&gt;</div><div class="line">                &lt;span&gt;&#123;&#123;guessCity&#125;&#125;&lt;/span&gt;</div><div class="line">                &lt;span&gt;&gt;&lt;/span&gt;</div><div class="line">            &lt;/router-link&gt;  </div><div class="line">        &lt;/nav&gt;</div><div class="line">        &lt;div class=&quot;group_city_container&quot;&gt;</div><div class="line">            &lt;ul class=&quot;letter_classify&quot;&gt;</div><div class="line">                &lt;li v-for=&quot;(value, key, index) in sortGroupCity&quot; :key=&quot;key&quot;  class=&quot;letter_classify_li&quot;&gt;</div><div class="line">                    &lt;h4 class=&quot;ciyt_title&quot;&gt;&#123;&#123;key&#125;&#125;</div><div class="line">                        &lt;span v-if=&quot;index == 0&quot;&gt;（按字母排序）&lt;/span&gt;</div><div class="line">                    &lt;/h4&gt;</div><div class="line">                    &lt;ul class=&quot;groupcity_name_container citylistul clear&quot;&gt;</div><div class="line">                        &lt;router-link  tag=&quot;li&quot; v-for=&quot;item in value&quot; :to=&quot;&apos;/city/&apos; + item.id&quot; :key=&quot;item.id&quot; class=&quot;ellipsis&quot;&gt;</div><div class="line">                            &#123;&#123;item.name&#125;&#125;</div><div class="line">                        &lt;/router-link&gt;  </div><div class="line">                    &lt;/ul&gt;</div><div class="line">                &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h4 id="获取城市列表"><a href="#获取城市列表" class="headerlink" title="获取城市列表"></a>获取城市列表</h4><p>使用axios获取城市列表数据，因为最新的vue-webpack-template改用webpack.dev.conf.js文件代替，配置需写在这个文件中，在devServer{}括号里添加before(app){}。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/getCities'</span>, (req, res) =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> url = <span class="string">'https://www.ele.me/restapi/shopping/v1/cities'</span></div><div class="line">        axios.get(url, &#123;</div><div class="line">          <span class="attr">headers</span>: &#123;</div><div class="line">            <span class="attr">Host</span>: <span class="string">'www.ele.me'</span>,</div><div class="line">            <span class="attr">Referer</span>: <span class="string">'https://www.ele.me/'</span></div><div class="line">          &#125;&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">          res.json(response.data)</div><div class="line">        &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(e)</div><div class="line">        &#125;)</div><div class="line">      &#125;),</div></pre></td></tr></table></figure><p>我把业务组件相关的操作代码放在api文件下，使用时方便查找。创建/api/home.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getCities</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/getCities'</span></div><div class="line">  <span class="keyword">return</span> axios.get(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>引入axios，调用webpack.dev.conf.js中定义的/api/getCities url</p><p>回到home.vue组件，data中定义数据<code>groupCity</code>，表示所有城市列表。创建getCities()方法获取城市列表数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  getCities () &#123;</div><div class="line">    getCities().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">      <span class="keyword">this</span>.groupCity = res</div><div class="line">    &#125;)</div><div class="line">  &#125;,  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>获取到的数据发现并不是我想要的数据结构，需要手动将数据转化成我想要的数据结构。创建sortGroupCity()方法，将获取的数据按照A-Z字母开头排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sortGroupCity () &#123;</div><div class="line">        <span class="keyword">let</span> sortObj = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">65</span>; i &lt;= <span class="number">90</span>; i++) &#123;</div><div class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.groupCity[<span class="built_in">String</span>.fromCharCode(i)]) &#123;</div><div class="line">            sortObj[<span class="built_in">String</span>.fromCharCode(i)] = <span class="keyword">this</span>.groupCity[<span class="built_in">String</span>.fromCharCode(i)]</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sortObj</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在控制台console.log出数据：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e2.png" alt="e2"></p><p>在template中动态获取城市列表数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;group_city_container&quot;&gt;</div><div class="line">  &lt;ul class=&quot;letter_classify&quot;&gt;</div><div class="line">    &lt;li v-for=&quot;(value, key, index) in sortGroupCity&quot; :key=&quot;key&quot;  class=&quot;letter_classify_li&quot;&gt;</div><div class="line">      &lt;h4 class=&quot;ciyt_title&quot;&gt;&#123;&#123;key&#125;&#125;</div><div class="line">        &lt;span v-if=&quot;index == 0&quot;&gt;（按字母排序）&lt;/span&gt;</div><div class="line">      &lt;/h4&gt;</div><div class="line">      &lt;ul class=&quot;groupcity_name_container citylistul clear&quot;&gt;</div><div class="line">        &lt;router-link  tag=&quot;li&quot; v-for=&quot;item in value&quot; :to=&quot;&apos;/city/&apos; + item.id&quot; :key=&quot;item.id&quot; class=&quot;ellipsis&quot;&gt;</div><div class="line">          &#123;&#123;item.name&#125;&#125;</div><div class="line">        &lt;/router-link&gt;  </div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>页面展示</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e3.png" alt="e3"></p><h4 id="定位城市"><a href="#定位城市" class="headerlink" title="定位城市"></a>定位城市</h4><p>定位城市首先就是要获取到城市id，data中定义<code>guessCityid</code>和<code>guessCity</code>，分别表示当前城市id和城市名称，创建<code>getGuess()</code>方法获取当前城市。获取当前城市名称和id值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">guessCityid</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">guessCity</span>: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">methods: &#123;</div><div class="line">  getGuess () &#123;</div><div class="line">    getGuess().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.guessCity = res.name</div><div class="line">      <span class="keyword">this</span>.guessCityId = res.id</div><div class="line">    &#125;)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在template中渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;nav class=&quot;city_nav&quot;&gt;</div><div class="line">  &lt;div class=&quot;city_tip&quot;&gt;</div><div class="line">    &lt;span&gt;当前定位城市：&lt;/span&gt;</div><div class="line">    &lt;span&gt;定位不准时，请在城市列表中选择&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;router-link :to=&quot;&apos;/city/&apos; + guessCityid&quot; class=&quot;guess_city&quot;&gt;</div><div class="line">    &lt;span&gt;&#123;&#123;guessCity&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;span&gt;&gt;&lt;/span&gt;</div><div class="line">  &lt;/router-link&gt;  </div><div class="line">&lt;/nav&gt;</div></pre></td></tr></table></figure><p>红色遮盖部分就是当然城市的名称，页面展示</p><p>   <img src="http://oxkc6g4t4.bkt.clouddn.com/e17.png" alt="e4"></p><p>根据<code>guessCityid</code>获取到的城市。由此定位城市成功。</p><h5 id="点击刷新"><a href="#点击刷新" class="headerlink" title="点击刷新"></a>点击刷新</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;e-header signin-up=&apos;home&apos;&gt;</div><div class="line">      &lt;span slot=&quot;logo&quot; class=&quot;head_logo&quot; @click=&quot;reload&quot;&gt;clm.me&lt;/span&gt;</div><div class="line">&lt;/e-header&gt;</div></pre></td></tr></table></figure><p>点击span文字刷新页面，创建reload点击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reload () &#123;</div><div class="line">  <span class="built_in">window</span>.location.reload()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="city页面"><a href="#city页面" class="headerlink" title="city页面"></a>city页面</h2><h4 id="选择城市"><a href="#选择城市" class="headerlink" title="选择城市"></a>选择城市</h4><p>点击当前城市跳转到city页面。修改city.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;city_container&quot;&gt;</div><div class="line">    &lt;e-header :head-title=&quot;cityName&quot; :go-back=&quot;goBack&quot;&gt;</div><div class="line">      &lt;router-link to=&quot;/home&quot; slot=&quot;changCity&quot; class=&quot;chang_city&quot;&gt;切换城市&lt;/router-link&gt;</div><div class="line">    &lt;/e-header&gt;</div><div class="line">    &lt;form class=&quot;city_form&quot; @submit.prevent&gt;</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type=&quot;search&quot; name=&quot;city&quot; v-model=&quot;query&quot; :placeholder=&quot;placeholder&quot; class=&quot;city_input input_style&quot; required/&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;city_submit input_style&quot; @click=&quot;postPois&quot; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>引入e-header组件并使用。</p><h5 id="获取当前城市数据"><a href="#获取当前城市数据" class="headerlink" title="获取当前城市数据"></a>获取当前城市数据</h5><p>同理，在webpack.dev.conf.js文件中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api/getCurrentCity'</span>, (req, res) =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> url = <span class="string">'https://h5.ele.me/restapi/bgs/poi/reverse_geo_coding'</span></div><div class="line">        axios.get(url, &#123;</div><div class="line">          <span class="attr">headers</span>: &#123;</div><div class="line">            <span class="attr">Host</span>: <span class="string">'h5.ele.me'</span>,</div><div class="line">            <span class="attr">Referer</span>: <span class="string">'https://h5.ele.me/'</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">params</span>: req.query</div><div class="line">        &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">          res.json(response.data)</div><div class="line">        &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(e)</div><div class="line">        &#125;)</div><div class="line">      &#125;),</div></pre></td></tr></table></figure><p>/api/city.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getCurrentCity</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/getGuess'</span></div><div class="line">  <span class="keyword">return</span> axios.get(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>city组件中，在data中定义<code>cityId</code>和<code>cityName</code>，分别表示当前城市id和当前城市名字，引入getCurrentCity()方法获取数据</p><p><strong>city.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">cityId</span>: <span class="string">''</span>,       </div><div class="line">    <span class="attr">cityName</span>: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">      getCurrentCity () &#123;</div><div class="line">        getCurrentCity().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.cityName = res.name</div><div class="line">          <span class="keyword">this</span>.cityId = res.city_id</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同时在mounted中挂载getCurrentCity()方法，渲染数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line"><span class="keyword">this</span>.getCurrentCity()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>页面展示</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e18.png" alt="e5"></p><h4 id="搜索地址"><a href="#搜索地址" class="headerlink" title="搜索地址"></a>搜索地址</h4><p>在input输入框里输入要搜索的地址，触发postPois事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"city_submit input_style"</span> @<span class="attr">click</span>=<span class="string">"postPois"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  postPois () &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.query) &#123;</div><div class="line">          query(<span class="keyword">this</span>.query, <span class="keyword">this</span>.geohash).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.historyTitle = <span class="literal">false</span></div><div class="line">            <span class="keyword">this</span>.placeList = res</div><div class="line">            <span class="keyword">if</span> (res.length &gt; <span class="number">0</span>) &#123;</div><div class="line">              <span class="keyword">this</span>.placeNone = <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="搜索历史"><a href="#搜索历史" class="headerlink" title="搜索历史"></a>搜索历史</h4><p>思路：用户通过在搜索框输入关键字之后点击提交按钮都展示搜索结果列表。 当搜索结果加载完毕时，将关键字和关键字对应的链接地址存起来。当搜索页重新加载时，将用户搜索的条件显示并保存在当前页面上。</p><p>首先，要写个js方法来保存搜索条件。在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的。这儿我就用localStorage对数据进行存储操作。</p><p>我把对于localStorage相关的操作代码写在mUtils.js中。</p><p><strong>common/js/mUtils.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> setStore = <span class="function">(<span class="params">name, content</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!name) <span class="keyword">return</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> content !== <span class="string">'string'</span>) &#123;</div><div class="line">    content = <span class="built_in">JSON</span>.stringify(content)</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">window</span>.localStorage.setItem(name, content)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStore = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!name) <span class="keyword">return</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.localStorage.getItem(name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeStore = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!name) <span class="keyword">return</span></div><div class="line">  <span class="built_in">window</span>.localStorage.removeItem(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>注意：一般我们会将JSON存入localStorage中，但是在localStorage会自动将localStorage转换成为字符串形式，这时我们可以使用<code>JSON.stringify()</code>这个方法，来将JSON转换成为JSON字符串。</p></blockquote><h5 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-if=&quot;historyTitle&quot; class=&quot;pois_search_history&quot;&gt;搜索历史&lt;/div&gt;</div></pre></td></tr></table></figure><p>点击提交按钮后即隐藏搜索历史头部，默认为显示搜索历史头部。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e19.png" alt="e6"></p><h5 id="获取搜索城市列表"><a href="#获取搜索城市列表" class="headerlink" title="获取搜索城市列表"></a>获取搜索城市列表</h5><p>点击提交按钮后显示搜索到的城市列表。在dom中进行遍历渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;getpois_ul&quot;&gt;</div><div class="line">  &lt;li v-for=&quot;(item, index) in placeList&quot; :key=&quot;index&quot; @click=&quot;nextPage(index, item.geohash)&quot;&gt;</div><div class="line">    &lt;h4 class=&quot;pois_name ellipsis&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/h4&gt;</div><div class="line">    &lt;p class=&quot;pois_address ellipsis&quot;&gt;&#123;&#123;item.address&#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;div class=&quot;search_none_place&quot; v-if=&quot;placeNone&quot;&gt;很抱歉！无搜索结果&lt;/div&gt;</div></pre></td></tr></table></figure><p>得到搜索城市列表数据后，将搜索的条件显示并保存在当前页面上，同时点击哪个城市地址将进入到下一页面。创建nextPage事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  nextPage (index, geohash) &#123;</div><div class="line">    <span class="keyword">let</span> history = getStore(<span class="string">'placeHistory'</span>)</div><div class="line">    <span class="keyword">let</span> choosePlace = <span class="keyword">this</span>.placeList[index]</div><div class="line">    <span class="keyword">if</span> (history) &#123;</div><div class="line">      <span class="keyword">let</span> checkRepeat = <span class="literal">false</span></div><div class="line">      <span class="keyword">this</span>.placeHistory = <span class="built_in">JSON</span>.parse(history)</div><div class="line">      <span class="keyword">this</span>.placeHistory.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (item.geohash === geohash) &#123;</div><div class="line">        checkRepeat = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">        <span class="keyword">if</span> (!checkRepeat) &#123;</div><div class="line">        <span class="keyword">this</span>.placeHistory.push(choosePlace)</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.placeHistory.push(choosePlace)</div><div class="line">    &#125;</div><div class="line">    setStore(<span class="string">'placeHistory'</span>, <span class="keyword">this</span>.placeHistory)</div><div class="line">    <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/msite'</span>, <span class="attr">query</span>: &#123;geohash&#125;&#125;)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将localStorage的key设置为placeHistory，先判断是否已经有一样的历史记录，如果没有则新增，如果有则不做重复储存，判断完成后进入下一页。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e20.png" alt="e7"></p><p> 到此，city页面已经完成！</p><p>具体代码见：<a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跨域请求数据&quot;&gt;&lt;a href=&quot;#跨域请求数据&quot; class=&quot;headerlink&quot; title=&quot;跨域请求数据&quot;&gt;&lt;/a&gt;跨域请求数据&lt;/h2&gt;&lt;h3 id=&quot;使用axios跨域请求数据&quot;&gt;&lt;a href=&quot;#使用axios跨域请求数据&quot; class=&quot;headerlink&quot; title=&quot;使用axios跨域请求数据&quot;&gt;&lt;/a&gt;使用axios跨域请求数据&lt;/h3&gt;&lt;p&gt;我们的项目是前后端分离，后端只负责接口，前端负责数据展示、逻辑处理。但是前后端开发模式，有一个重要的问题，就是跨域问题。Vue-cli 创建的项目，可以直接利用 Node.js 代理服务器，实现跨域请求，我使用axios解决跨域。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>饿了么45个页面重构（一）框架搭建</title>
    <link href="http://kakajing.github.io/2018/02/17/%E9%A5%BF%E4%BA%86%E4%B9%8845%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://kakajing.github.io/2018/02/17/饿了么45个页面重构（一）框架搭建/</id>
    <published>2018-02-17T15:44:35.000Z</published>
    <updated>2018-04-13T12:40:57.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发相关的技术栈"><a href="#开发相关的技术栈" class="headerlink" title="开发相关的技术栈"></a>开发相关的技术栈</h2><p>vue2 + vuex + vue-router + webpack + ES6/7 + sass + flex + svg + axios</p><h2 id="构建项目框架"><a href="#构建项目框架" class="headerlink" title="构建项目框架"></a>构建项目框架</h2><p>使用vue-cli脚手架搭建项目</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建一个基于 webpack 模板的新项目hs</div><div class="line">$ vue init webpack hs</div><div class="line"># 进入项目目录</div><div class="line">$ cd hs</div><div class="line"># 安装依赖</div><div class="line">$ npm install</div><div class="line"># 运行项目</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure><p>项目运行成功！</p><p> <img src="http://omux103p0.bkt.clouddn.com/h1.png" alt="h1"></p><blockquote><p>注意：早期的vue-lic下面有dev-server.js和dev-client.js两文件，请求本地数据在dev-server.js里配置，最新的vue-webpack-template 中已经去掉了dev-server.js和dev-client.js 改用webpack.dev.conf.js代替，所以 配置本地访问在webpack.dev.conf.js里配置即可。</p></blockquote><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">├── build  #webpack编译相关文件目录，一般不用动 </div><div class="line">├── config  #配置目录</div><div class="line">│   ├────dev.env.js  #开发环境变量</div><div class="line">│   ├────index.js    #主配置文件</div><div class="line">│   └────prod.env.js #生产环境变量</div><div class="line">├── dist  #生产环境下build后的文件存放目录（发布目录）</div><div class="line">├── src #前端项目源码目录</div><div class="line">│   ├───—api  #封装的接口文件目录</div><div class="line">│   ├───—assets  #资源目录</div><div class="line">│   ├───—base  #基础组件目录</div><div class="line">│   ├───—common  #公用文件目录</div><div class="line">│   ├───—components  #组件及页面文件目录</div><div class="line">│   ├───—router  #路由目录</div><div class="line">│   ├───—App.vue #项目入口文件</div><div class="line">│   ├───—bus.js  #公共通信组件</div><div class="line">│   └────main.js  #项目的核心文件</div><div class="line">├── static  #开发模式下的静态资源目录</div><div class="line">├── index.html #首页入口文件，你可以添加一些 meta 信息或同统计代码啥的</div><div class="line">├── package.json #项目配置文件</div><div class="line">└── README.md #项目的说明文档，markdown 格式</div></pre></td></tr></table></figure><h2 id="设置路径别名"><a href="#设置路径别名" class="headerlink" title="设置路径别名"></a>设置路径别名</h2><p>设置路径别名，以减少开发过程中路径的复杂性，比如<code>../../</code>这类路径。</p><p>修改webpack.base.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</div><div class="line">      <span class="string">'components'</span>: resolve(<span class="string">'src/components'</span>),</div><div class="line">      <span class="string">'config'</span>: resolve(<span class="string">'src/config'</span>),</div><div class="line">      <span class="string">'common'</span>: resolve(<span class="string">'src/common'</span>),</div><div class="line">      <span class="string">'page'</span>: resolve(<span class="string">'src/page'</span>),</div><div class="line">      <span class="string">'api'</span>: resolve(<span class="string">'src/api'</span>),</div><div class="line">      <span class="string">'elm'</span>: resolve(<span class="string">'src/elm'</span>),</div><div class="line">      <span class="string">'base'</span>: resolve(<span class="string">'src/base'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h2 id="创建基础页面"><a href="#创建基础页面" class="headerlink" title="创建基础页面"></a>创建基础页面</h2><p>创建基本页面</p><p><strong>home.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;首页&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>这里不一一展示，直接看截图</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/e1.png" alt="e1"></p><p>组件明细：</p><ul><li>home ——–  首页城市列表页</li><li>checkout ——–  确认订单页</li><li>city ——–    当前选择城市页</li><li>forget ——–  修改密码页</li><li>login ——–  登陆注册页</li><li>msite ——–  所有商铺列表页</li><li>order ——–  订单列表页</li><li>profile ——–  个人信息页</li><li>search ——–  商铺详情页</li><li>vipcard ——– vip卡页</li></ul><h2 id="配置及安装依赖"><a href="#配置及安装依赖" class="headerlink" title="配置及安装依赖"></a>配置及安装依赖</h2><p>在package.json中配置所需的依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">  "vue": "^2.5.2",</div><div class="line">  "vue-router": "^3.0.1",</div><div class="line">  "vuex": "^3.0.1",</div><div class="line">  "axios": "^0.17.1",</div><div class="line">&#125;，</div><div class="line">"devDependencies": &#123;</div><div class="line">  ...</div><div class="line">  "babel-polyfill": "^6.26.0",</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install</div></pre></td></tr></table></figure><h2 id="配置router"><a href="#配置router" class="headerlink" title="配置router"></a>配置router</h2><p>在router/index.js配置routers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">routes: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">redirect</span>: <span class="string">'/home'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">component</span>: App,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/home'</span>,</div><div class="line">          <span class="attr">component</span>: Home  <span class="comment">// 首页城市列表页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/checkout'</span>,</div><div class="line">          <span class="attr">component</span>: Checkout  <span class="comment">// 确认订单页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/city/:cityId'</span>,</div><div class="line">          <span class="attr">component</span>: City  <span class="comment">// 当前选择城市页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/forget'</span>,</div><div class="line">          <span class="attr">component</span>: Forget   <span class="comment">// 修改密码页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/login'</span>,</div><div class="line">          <span class="attr">component</span>: Login  <span class="comment">// 登陆注册页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/msite'</span>,</div><div class="line">          <span class="attr">component</span>: Msite,   <span class="comment">// 所有商铺列表页</span></div><div class="line">          meta: &#123;<span class="attr">keepAlive</span>: <span class="literal">true</span>&#125;,   <span class="comment">// 需要被缓存</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/order'</span>,</div><div class="line">          <span class="attr">component</span>: Order  <span class="comment">// 订单列表页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/profile'</span>,</div><div class="line">          <span class="attr">component</span>: Profile  <span class="comment">// 个人信息页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/search/:geohash'</span>,</div><div class="line">          <span class="attr">component</span>: Search  <span class="comment">// 搜索页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/shop'</span>,</div><div class="line">          <span class="attr">component</span>: Shop   <span class="comment">// 商铺详情页</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/vipcard'</span>,</div><div class="line">          <span class="attr">component</span>: Vipcard  <span class="comment">// vip卡页</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div></pre></td></tr></table></figure><p>创建e-header.vue基础组件，因为后面可能有多个页面会用到这种组件，把它分离出来单独一个组件，方便使用。</p><p><strong>e-header.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">      &lt;header id=&apos;head_top&apos;&gt;</div><div class="line">          &lt;slot name=&apos;logo&apos;&gt;&lt;/slot&gt;</div><div class="line">          &lt;div class=&quot;head_goback&quot; v-if=&quot;goBack&quot; @click=&quot;back&quot;&gt;&lt;/div&gt;</div><div class="line">          &lt;router-link to=&apos;/login&apos; v-if=&apos;signinUp&apos; class=&quot;head_login&quot;&gt;登陆|注册&lt;/router-link&gt;</div><div class="line">         &lt;div class=&quot;title_head&quot; v-if=&quot;headTitle&quot;&gt;&#123;&#123;headTitle&#125;&#125;&lt;/div&gt;</div><div class="line">         &lt;slot name=&quot;changecity&quot;&gt;&lt;/slot&gt;</div><div class="line">      &lt;/header&gt;</div><div class="line">  &lt;/template&gt;</div><div class="line">  </div><div class="line">  </div><div class="line">export default&#123;</div><div class="line">    props: &#123;</div><div class="line">  // 名称</div><div class="line">      signinUp: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;&apos;</div><div class="line">      &#125;,</div><div class="line">  // 头名称</div><div class="line">      headTitle: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;&apos;</div><div class="line">      &#125;,</div><div class="line">  // 返回</div><div class="line">      goBack: &#123;</div><div class="line">        type: Boolean,</div><div class="line">        default: false</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">methods: &#123;</div><div class="line">  // 返回上一页</div><div class="line">      back () &#123;</div><div class="line">        this.$router.go(-1)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><h3 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h3><p>css部分这里不写了，参考代码。此项目用到的是scss，首先就是安装依赖。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"devDependencies": &#123;</div><div class="line">  "sass": "^1.0.0-beta.4",</div><div class="line">  "sass-loader": "^6.0.6",</div><div class="line">  "scss": "^0.2.4",</div><div class="line">  "scss-loader": "^0.0.1",</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install</div></pre></td></tr></table></figure><p>如果安装失败的话，在项目内添加一个 <code>.npmrc</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">phantomjs_cdnurl=http:<span class="comment">//cnpmjs.org/downloads</span></div><div class="line">sass_binary_site=https:<span class="comment">//npm.taobao.org/mirrors/node-sass/</span></div><div class="line">registry=https:<span class="comment">//registry.npm.taobao.org</span></div></pre></td></tr></table></figure><p>然后使用 <code>npm install</code> 安装。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>此项目是移动端项目，我使用<a href="http://caibaojian.com/t/rem" target="_blank" rel="external">rem</a>实现<a href="http://caibaojian.com/t/%e8%87%aa%e9%80%82%e5%ba%94" target="_blank" rel="external">自适应</a>，或叫<a href="http://caibaojian.com/t/rem" target="_blank" rel="external">rem</a><a href="http://caibaojian.com/356.html" target="_blank" rel="external">响应式</a>布局，通过使用一个js脚本就可以实现<a href="http://caibaojian.com/t/%e8%87%aa%e9%80%82%e5%ba%94" target="_blank" rel="external">自适应</a>，不用再为各种设备宽度不同而烦恼如何实现自适应的问题。</p><h4 id="设置viewport配合进行缩放"><a href="#设置viewport配合进行缩放" class="headerlink" title="设置viewport配合进行缩放"></a>设置viewport配合进行缩放</h4><p>通常在写移动端页面的时候，我们都会设置viewport，保证页面缩放没有问题，在index.js添加一下meta标签：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, minimal-ui"</span>&gt;</div></pre></td></tr></table></figure><h4 id="基于JS进行屏幕分辨率计算"><a href="#基于JS进行屏幕分辨率计算" class="headerlink" title="基于JS进行屏幕分辨率计算"></a>基于JS进行屏幕分辨率计算</h4><p>通过js来调整html的字体大小，而在页面中的制作稿则统一使用rem这个单位来制作。代码如下：</p><p>config/rem.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> docEl = doc.documentElement</div><div class="line">  <span class="keyword">let</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span></div><div class="line">  <span class="keyword">let</span> recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> clientWidth = docEl.clientWidth</div><div class="line">    <span class="keyword">if</span> (!clientWidth) &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!doc.addEventListener) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</div><div class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</div><div class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</div></pre></td></tr></table></figure><p>orientationchange：这是一个事件，菜鸟教程中做了这么一个解释：事件是在用户水平或者垂直翻转设备（即方向发生变化）时触发的事件。</p><h4 id="引入rem文件"><a href="#引入rem文件" class="headerlink" title="引入rem文件"></a>引入rem文件</h4><p>vue项目中，在main.js中引入rem.js就可以使用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'./common/js/rem'</span></div></pre></td></tr></table></figure><p>具体代码见：<a href="https://github.com/kakajing/vue-elmm" target="_blank" rel="external">https://github.com/kakajing/vue-elmm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发相关的技术栈&quot;&gt;&lt;a href=&quot;#开发相关的技术栈&quot; class=&quot;headerlink&quot; title=&quot;开发相关的技术栈&quot;&gt;&lt;/a&gt;开发相关的技术栈&lt;/h2&gt;&lt;p&gt;vue2 + vuex + vue-router + webpack + ES6/7 + sass + flex + svg + axios&lt;/p&gt;
&lt;h2 id=&quot;构建项目框架&quot;&gt;&lt;a href=&quot;#构建项目框架&quot; class=&quot;headerlink&quot; title=&quot;构建项目框架&quot;&gt;&lt;/a&gt;构建项目框架&lt;/h2&gt;&lt;p&gt;使用vue-cli脚手架搭建项目&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>后台管理开发（二）：axios使用及用户页面</title>
    <link href="http://kakajing.github.io/2017/11/10/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Aaxios%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%94%A8%E6%88%B7%E9%A1%B5%E9%9D%A2/"/>
    <id>http://kakajing.github.io/2017/11/10/后台管理开发（二）：axios使用及用户页面/</id>
    <published>2017-11-10T15:34:05.000Z</published>
    <updated>2018-02-05T16:02:34.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户页面"><a href="#用户页面" class="headerlink" title="用户页面"></a>用户页面</h2><p>用户页面基础代码展示，<strong>user.vue</strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;user-wrap&quot;&gt;</div><div class="line">    &lt;breadcr :meName=&quot;meName&quot;&gt;&lt;/breadcr&gt;</div><div class="line">    </div><div class="line">  &lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot;&gt;</div><div class="line">      &lt;el-form-item label=&quot;姓名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.name$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item label=&quot;用户名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.username$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;small&quot; @click=&quot;search&quot;&gt;搜索&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;el-icon-plus&quot; @click=&quot;showAndUser&quot;&gt;添加用户&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">    &lt;/el-form&gt;</div><div class="line">    </div><div class="line">    &lt;el-table :data=&quot;users&quot; highlight-current-row @current-change=&quot;currentChange&quot; height=&quot;500&quot; border</div><div class="line">              style=&quot;width: 100%&quot;&gt;</div><div class="line">      &lt;el-table-column sortable prop=&quot;name&quot; label=&quot;姓名&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column sortable prop=&quot;username&quot; label=&quot;用户名&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;是否启用&quot; :formatter=&quot;formatterColumn&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop=&quot;action&quot; label=&quot;操作&quot; align=&quot;center&quot;&gt;</div><div class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</div><div class="line">          &lt;el-button size=&quot;mini&quot; @click=&quot;showEditUser(scope.$index,scope.row)&quot; plain&gt;编辑&lt;/el-button&gt;</div><div class="line">          &lt;el-button size=&quot;mini&quot; icon=&quot;el-icon-edit&quot; type=&quot;info&quot; plain @click=&quot;showAuthorized&quot;&gt;用户赋权&lt;/el-button&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">      &lt;/el-table-column&gt;</div><div class="line">    &lt;/el-table&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><p>接下来依次分析<strong>user.vue</strong>的代码。</p><h3 id="路径展示区"><a href="#路径展示区" class="headerlink" title="路径展示区"></a>路径展示区</h3><p>在用户页面里首先需要展示当前页面的路径，可以快速返回之前的页面。</p><h4 id="编写基础组件breadcr-vue"><a href="#编写基础组件breadcr-vue" class="headerlink" title="编写基础组件breadcr.vue"></a>编写基础组件breadcr.vue</h4><p>这里用到element-ui的Breadcrumb 面包屑。考虑到在其他页面也要用到次此组件，所以我把Breadcrumb组件抽取出来做基础组件，方便其他页面使用。</p><p>组件路径在<code>/base/breadcr/breadcr.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;breadcr-wrap&quot;&gt;</div><div class="line">    &lt;el-breadcrumb separator-class=&quot;el-icon-arrow-right&quot;&gt;</div><div class="line">      &lt;el-breadcrumb-item :to=&quot;&#123; path: &apos;/&apos; &#125;&quot;&gt;首页&lt;/el-breadcrumb-item&gt;</div><div class="line">      &lt;el-breadcrumb-item :to=&quot;&#123; path: &apos;/&apos; &#125;&quot;&gt;系统设置&lt;/el-breadcrumb-item&gt;</div><div class="line">      &lt;el-breadcrumb-item&gt;&#123;&#123;meName&#125;&#125;&lt;/el-breadcrumb-item&gt;</div><div class="line">    &lt;/el-breadcrumb&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>在Vue里父组件向子组件中传送数据是通过props实现的。所以我在props里定义属性<code>meName</code>，默认为空，表示菜单名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">      <span class="attr">meName</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">default</span>: <span class="string">''</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>在user.vue组件里注册breadcr组件，并使用它。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class="user-wrap"&gt;</div><div class="line">    &lt;breadcr&gt;&lt;/breadcr&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">export default&#123;</div><div class="line">  components: &#123;</div><div class="line">      Breadcr</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以用 <code>v-bind</code> 来动态地将 props 绑定到父组件的数据。每当父组件的数据变化时，该变化也会传导给子组件。<code>v-bind</code>的缩写语法是<code>:</code></p><p>在data里声明<code>meName</code>并赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;breadcr :meName=<span class="string">"meName"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">breadcr</span>&gt;</span></span></div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line"><span class="attr">meName</span>: <span class="string">'用户管理'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>页面展示如下(红框部分)：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h5.png" alt="5"></p><h3 id="搜索区"><a href="#搜索区" class="headerlink" title="搜索区"></a>搜索区</h3><p>搜索区使用element-ui的Form表单实现，这里使用行内表单，可以把几个表单放置在一行内，以此来实现我想要的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot;&gt;</div><div class="line">      &lt;el-form-item label=&quot;姓名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.name$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item label=&quot;用户名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.username$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;small&quot;&gt;搜索&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;el-icon-plus&quot;&gt;添加用户&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">&lt;/el-form&gt;</div></pre></td></tr></table></figure><p><code>:inline</code>设置为<code>true</code>可以让表单域变为行内的表单域，<code>:model</code>表示绑定要输入的搜索数据，所以要在data里搜索数据对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 搜索数据</span></div><div class="line">    searchForm: &#123;</div><div class="line">      <span class="attr">name$LIKE</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">username$LIKE</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>页面效果如下（红框部分）：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h6.png" alt="6"></p><h3 id="用户表格区"><a href="#用户表格区" class="headerlink" title="用户表格区"></a>用户表格区</h3><p>使用element-ui的Table表格展示用户数据。<code>data</code>表示要显示的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;el-table :data=<span class="string">""</span> highlight-current-row @current-change=<span class="string">"currentChange"</span> height=<span class="string">"500"</span> border</div><div class="line">              style=<span class="string">"width: 100%"</span>&gt;</div><div class="line">      &lt;el-table-column sortable prop="name" label="姓名" align="center"&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column sortable prop="username" label="用户名" align="center"&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop="status" label="是否启用" :formatter="formatterColumn" align="center"&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop="action" label="操作" align="center"&gt;</div><div class="line">        &lt;template slot-scope="scope"&gt;</div><div class="line">          &lt;el-button size="mini" @click="showEditUser(scope.$index,scope.row)" plain&gt;编辑&lt;/el-button&gt;</div><div class="line">          &lt;el-button size="mini" icon="el-icon-edit" type="info" plain @click="showAuthorized"&gt;用户赋权&lt;/el-button&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">      &lt;/el-table-column&gt;</div><div class="line">&lt;/el-table&gt;</div></pre></td></tr></table></figure><p><code>highlight-current-row</code>表示高亮当前行，同时当表格的当前行发生变化的时候会触发<code>@current-change</code>事件,在data里定义<code>currentRow</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">currentRow</span>: <span class="literal">null</span>,</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  currentChange (val) &#123;</div><div class="line">   <span class="keyword">this</span>.currentRow = val</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="跨域请求数据"><a href="#跨域请求数据" class="headerlink" title="跨域请求数据"></a>跨域请求数据</h2><h3 id="使用axios跨域请求数据"><a href="#使用axios跨域请求数据" class="headerlink" title="使用axios跨域请求数据"></a>使用axios跨域请求数据</h3><p>不同域名之间的访问，需要跨域才能正确请求。我们的项目是前后端分离，存在跨域问题。Vue-cli 创建的项目，可以直接利用 Node.js 代理服务器，实现跨域请求，我使用axios解决跨域。</p><h4 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h4><p>vue2.0官方推荐axios进行ajax请求。axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 <a href="http://baike.baidu.com/link?url=iUceAfgyfJOacUtjPgT4ifaSOxDULAc_MzcLEOTySflAn5iLlHfMGsZMtthBm5sK4y6skrSvJ1HOO2qKtV1ej_" target="_blank" rel="external">CSRF/XSRF</a></li></ul><p>废话不多说，直接开始使用</p><h4 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure><h4 id="封装axios方法"><a href="#封装axios方法" class="headerlink" title="封装axios方法"></a>封装axios方法</h4><p>一般情况下，我们会用到的方法有：GET，POST，PUT，PATCH，DELETE，封装方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vue()</div><div class="line"></div><div class="line">axios.defaults.withCredentials = <span class="literal">true</span></div><div class="line">axios.defaults.baseURL = <span class="string">'/api'</span></div><div class="line">axios.create(&#123;</div><div class="line">  <span class="attr">headers</span>: &#123;<span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 添加一个响应拦截器</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (response.data &amp;&amp; response.data.errcode) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(response.data.errcode) === <span class="number">40001</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'未登录'</span>)</div><div class="line">      <span class="comment">// 未登录</span></div><div class="line">      v.$emit(<span class="string">'go'</span>, <span class="string">'/'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> response</div><div class="line">&#125;, error =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> POST = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.post(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.get(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(res.data))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> PUT = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.put(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DELETE = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.delete(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> PATCH = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.patch(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><p>在config/index.js文件中修改dev中的proxyTable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">      <span class="string">'/api'</span>: &#123;</div><div class="line">        <span class="attr">target</span>: <span class="string">'http://localhost:8080'</span>,</div><div class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">pathRewrite</span>: &#123;</div><div class="line">          <span class="string">'^/api'</span>: <span class="string">'/'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 ‘/api’ 为匹配项，target 为被请求的地址，因为在 ajax 的 url 中加了前缀 ‘/api’，而原本的接口是没有这个前缀的，所以需要<strong>通过 pathRewrite 来重写地址，将前缀 ‘/api’ 转为 ‘/‘</strong>，如果本身的接口地址就有 ‘/api’ 这种通用前缀，就可以把 pathRewrite 删掉。</p><h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><p>这里我把用户相关的操作代码放在api文件下，使用时方便查找一目了然。</p><p><strong>api/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> API <span class="keyword">from</span> <span class="string">'./index'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/user'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">pageIndex</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">sortField</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">sortOrder</span>: <span class="string">''</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> API.GET(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">JSON</span>.parse(res))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在引入封装好的axios文件，执行GET请求，给出url和所需参数，url是接口地址。这里<code>url=&#39;/user&#39;</code>而不是<code>url=&#39;/api/user&#39;</code>，是因为我在index.js文件里设置<code>axios.defaults.baseURL = &#39;/api&#39;</code>，使用 axios可以全局配置一个 <code>baseURL</code>，所以无需再加上<code>/api</code>。</p><p><strong>user.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getUser &#125; <span class="keyword">from</span> <span class="string">'api/user'</span></div><div class="line"><span class="keyword">import</span> &#123; statusCode &#125; <span class="keyword">from</span> <span class="string">'common/js/config'</span></div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">      _getUerList () &#123;</div><div class="line">        getUser().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.status === statusCode) &#123;</div><div class="line">         <span class="comment">//   console.log(res.result.data)</span></div><div class="line">            <span class="keyword">this</span>.users = res.result.data</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>引入api/user.js文件，调用<code>getUser()</code>方法，判断response的状态码，如果正确，控制台输出用户列表，截图如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h7.png" alt="7"></p><p> 想要在页面展示数据，首先在data中定义<code>users</code>对象，默认为<code>[]</code>，同时设置<code>:data=&quot;users&quot;</code>，在table表格内填充数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;el-table :data=<span class="string">"users"</span> highlight-current-row @current-change=<span class="string">"currentChange"</span> height=<span class="string">"500"</span> border style=<span class="string">"width: 100%"</span>&gt;</div><div class="line"></div><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">users</span>: []</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>截图如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h8.png" alt="8"></p><p> 用户数据成功展示，完美~！ </p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>前面已经创建搜索数据对象，接下来对搜索按钮进行操作，点击搜索按钮触发search事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-form-item&gt;</div><div class="line">   &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;small&quot; @click=&quot;search&quot;&gt;搜索&lt;/el-button&gt;</div><div class="line">&lt;/el-form-item&gt;</div></pre></td></tr></table></figure><p>在api/user.js里创建<code>searchUser()</code>，调用GET方法</p><p><strong>api/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">searchUser</span> (<span class="params">queryParams, queryParamsIndex</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/user'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, queryParams, queryParamsIndex)</div><div class="line">  <span class="keyword">return</span> API.GET(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">JSON</span>.parse(res))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样user.vue引入<code>searchUser()</code>方法。这里需要注意下，因为后台给出的数据与所得出的数据不同，需要先对数据处理得出我们想要的数据结构。数据处理方法可能会在其他组件中用到，所以我把它放在common包下，代码如下：</p><p>common/js/utils.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">encodeQueryParam</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> queryParam = &#123;&#125;</div><div class="line">  <span class="keyword">let</span> index = <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> temp = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">in</span> data) &#123;</div><div class="line">    <span class="keyword">if</span> (data[f] === <span class="string">''</span>) <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> (f.indexOf(<span class="string">'$LIKE'</span>) !== <span class="number">-1</span> &amp;&amp; data[f].indexOf(<span class="string">'%'</span>) === <span class="number">-1</span>) temp = <span class="string">'%'</span> + data[f] + <span class="string">'%'</span></div><div class="line">    <span class="keyword">if</span> (f.indexOf(<span class="string">'$START'</span>) !== <span class="number">-1</span>) temp = <span class="string">'%'</span> + data[f]</div><div class="line">    <span class="keyword">if</span> (f.indexOf(<span class="string">'$END'</span>) !== <span class="number">-1</span>) temp = data[f] + <span class="string">'%'</span></div><div class="line">    queryParam[<span class="string">'terms['</span> + (index) + <span class="string">'].column'</span>] = f</div><div class="line">    queryParam[<span class="string">'terms['</span> + (index) + <span class="string">'].value'</span>] = temp</div><div class="line">    temp = <span class="string">''</span></div><div class="line">    index++</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> queryParam</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>user.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; encodeQueryParam &#125; <span class="keyword">from</span> <span class="string">'common/js/utils'</span>  </div><div class="line"></div><div class="line"> search () &#123;</div><div class="line">     <span class="keyword">this</span>.total = <span class="number">0</span></div><div class="line">     <span class="keyword">this</span>.pageIndex = <span class="number">1</span></div><div class="line">     <span class="keyword">this</span>.searchUser()</div><div class="line">   &#125;,</div><div class="line">searchUser () &#123;</div><div class="line">       <span class="keyword">let</span> that = <span class="keyword">this</span></div><div class="line">       <span class="keyword">let</span> queryParams = &#123;</div><div class="line">         <span class="attr">name</span>: encodeQueryParam(that.searchForm)</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">let</span> queryParamsPage = &#123;</div><div class="line">         <span class="attr">pageIndex</span>: that.pageIndex,</div><div class="line">         <span class="attr">pageSize</span>: that.pageSize,</div><div class="line">         <span class="attr">sortField</span>: <span class="string">''</span>,</div><div class="line">         <span class="attr">sortOrder</span>: <span class="string">''</span></div><div class="line">       &#125;</div><div class="line">       searchUser(queryParams.name, queryParamsPage).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">         <span class="keyword">if</span> (res.status === statusCode) &#123;</div><div class="line">           that.total = res.total</div><div class="line">           <span class="keyword">this</span>.users = res.result.data</div><div class="line">           <span class="comment">// this.users = that.data</span></div><div class="line">         &#125;</div><div class="line">       &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">         <span class="built_in">console</span>.log(error)</div><div class="line">         that.$message.error(&#123;</div><div class="line">           <span class="attr">message</span>: <span class="string">'请求出现异常'</span>,</div><div class="line">           <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">         &#125;)</div><div class="line">       &#125;)</div><div class="line">     &#125;,</div></pre></td></tr></table></figure><p>截图效果如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h9.png" alt="9"></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>对添加用户按钮进行操作，点击添加用户按钮触发<code>showAndUser</code>事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-form-item&gt;</div><div class="line">  &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;el-icon-plus&quot; @click=&quot;showAndUser&quot;&gt;添加用户&lt;/el-button&gt;</div><div class="line">&lt;/el-form-item&gt;</div></pre></td></tr></table></figure><p>添加用户页面我使用element-ui里的Dialog 对话框来实现，点击按钮弹出添加用户页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!--添加用户页面--&gt;</div><div class="line">&lt;el-dialog title=&quot;添加用户&quot; :visible.sync=&quot;dialogFormVisible&quot; center&gt;</div><div class="line">     &lt;el-form :model=&quot;addForm&quot; ref=&quot;addForm&quot;&gt;</div><div class="line">       &lt;el-form-item label=&quot;姓名：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input v-model=&quot;addForm.name&quot; auto-complete=&quot;off&quot; style=&quot;width: 240px&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">       &lt;el-form-item label=&quot;用户名：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input v-model=&quot;addForm.username&quot; auto-complete=&quot;off&quot; style=&quot;width: 240px&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">       &lt;el-form-item label=&quot;密码：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input v-model=&quot;addForm.password&quot; auto-complete=&quot;off&quot; style=&quot;width: 240px&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">       &lt;el-form-item label=&quot;备注：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input type=&quot;textarea&quot; v-model=&quot;addForm.describe&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">     &lt;/el-form&gt;</div><div class="line">     &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</div><div class="line">       &lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;保存&lt;/el-button&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line">   &lt;/el-dialog&gt;</div></pre></td></tr></table></figure><p><code>:visible.sync=&quot;dialogFormVisible&quot;</code>表示是否显示 Dialog，同时在data里定义<code>dialogFormVisible</code>，默认为<code>false</code>，表示是否显示添加页面。定义<code>addForm</code>对象表示添加数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">  <span class="comment">// 添加相关数据</span></div><div class="line">    dialogFormVisible: <span class="literal">false</span>,  <span class="comment">// 添加页面是否显示</span></div><div class="line">    addForm: &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">password</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">describe</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">addFormRules</span>: &#123;</div><div class="line">      <span class="attr">name</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入姓名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</div><div class="line">      <span class="attr">username</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</div><div class="line">      <span class="attr">password</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</div><div class="line">      <span class="attr">describe</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'备注'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用POST请求</p><p><strong>api/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addUser</span> (<span class="params">userParams</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> API.POST(<span class="string">'/user'</span>, userParams)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>user.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">showAndUser () &#123;</div><div class="line">  <span class="keyword">this</span>.dialogFormVisible = <span class="literal">true</span></div><div class="line">  <span class="keyword">this</span>.addForm = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">password</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">describe</span>: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">saveUser () &#123;</div><div class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span></div><div class="line">  <span class="keyword">this</span>.$refs.addForm.validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (valid) &#123;</div><div class="line">      <span class="keyword">this</span>.$confirm(<span class="string">'确定保存吗？'</span>, <span class="string">'提示'</span>, &#123;&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> userParams = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.addForm)</div><div class="line">        addUser(userParams).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.status === statusCode) &#123;</div><div class="line">            that.$message.success(&#123;</div><div class="line">              <span class="attr">message</span>: <span class="string">'添加用户成功'</span>,</div><div class="line">              <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">            &#125;)</div><div class="line">            that.$refs[<span class="string">'addForm'</span>].resetFields()</div><div class="line">            that.dialogFormVisible = <span class="literal">false</span></div><div class="line">            that.search()</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            that.$message.error(&#123;</div><div class="line">              <span class="attr">message</span>: <span class="string">'添加用户失败'</span>,</div><div class="line">              <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">            &#125;)</div><div class="line">          &#125;</div><div class="line">        &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(error)</div><div class="line">          that.$message.error(&#123;</div><div class="line">            <span class="attr">showClose</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">message</span>: <span class="string">'请求出现异常'</span>,</div><div class="line">            <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">          &#125;)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>页面展示：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h10.png" alt="10"></p><p>具体代码看：<a href="https://github.com/hs-web/hsweb-ui-vue" target="_blank" rel="external">https://github.com/hs-web/hsweb-ui-vue</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用户页面&quot;&gt;&lt;a href=&quot;#用户页面&quot; class=&quot;headerlink&quot; title=&quot;用户页面&quot;&gt;&lt;/a&gt;用户页面&lt;/h2&gt;&lt;p&gt;用户页面基础代码展示，&lt;strong&gt;user.vue&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>后台管理开发（一）：开发技术框架相关及home页面详解</title>
    <link href="http://kakajing.github.io/2017/11/08/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E5%8F%8Ahome%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/"/>
    <id>http://kakajing.github.io/2017/11/08/后台管理开发（一）：开发技术框架相关及home页面详解/</id>
    <published>2017-11-08T07:26:10.000Z</published>
    <updated>2018-02-05T16:02:17.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发相关的技术栈"><a href="#开发相关的技术栈" class="headerlink" title="开发相关的技术栈"></a>开发相关的技术栈</h2><ul><li>vuejs2.0：一套构建用户界面的渐进式框架，易用、灵活、高效</li><li>element-ui：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库</li><li>vue-router：官方的路由组件，配合vue.js创建单页应用（SPA）非常简单</li><li>axios: 基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</li><li>scass</li></ul><a id="more"></a><h2 id="构建项目框架"><a href="#构建项目框架" class="headerlink" title="构建项目框架"></a>构建项目框架</h2><p>使用vue-cli脚手架搭建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建一个基于 webpack 模板的新项目hs</div><div class="line">$ vue init webpack hs</div><div class="line"># 进入项目目录</div><div class="line">$ cd hs</div><div class="line"># 安装依赖</div><div class="line">$ npm install</div><div class="line"># 运行项目</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure><p>项目运行后看到以下界面，恭喜你，项目环境搭建成功！</p><p> <img src="http://omux103p0.bkt.clouddn.com/h1.png" alt="1"></p><h3 id="项目结构及新建的基础页面"><a href="#项目结构及新建的基础页面" class="headerlink" title="项目结构及新建的基础页面"></a>项目结构及新建的基础页面</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">├── build  #webpack编译相关文件目录，一般不用动 </div><div class="line">├── config  #配置目录</div><div class="line">│   ├────dev.env.js  #开发环境变量</div><div class="line">│   ├────index.js    #主配置文件</div><div class="line">│   └────prod.env.js #生产环境变量</div><div class="line">├── dist  #生产环境下build后的文件存放目录（发布目录）</div><div class="line">├── server  #服务端代码目录，提供给前端接口</div><div class="line">├── src #前端项目源码目录</div><div class="line">│   ├───—api  #封装的接口文件目录</div><div class="line">│   ├───—assets  #资源目录</div><div class="line">│   ├───—common  #公用文件目录</div><div class="line">│   ├───—components  #组件及页面文件目录</div><div class="line">│   ├───—router  #路由目录</div><div class="line">│   ├───—App.vue #项目入口文件</div><div class="line">│   ├───—bus.js  #公共通信组件</div><div class="line">│   └────main.js  #项目的核心文件</div><div class="line">├── static  #开发模式下的静态资源目录</div><div class="line">├── index.html #首页入口文件，你可以添加一些 meta 信息或同统计代码啥的</div><div class="line">├── package.json #项目配置文件</div><div class="line">└── README.md #项目的说明文档，markdown 格式</div></pre></td></tr></table></figure><h4 id="创建基础页面"><a href="#创建基础页面" class="headerlink" title="创建基础页面"></a>创建基础页面</h4><p>首先需要先简单创建几个基本页面方便接下来展示。</p><p>home.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    首页</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>其他页面就省略了，创建占位。目录截图如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h4.png" alt="4"></p><h4 id="目录明细："><a href="#目录明细：" class="headerlink" title="目录明细："></a>目录明细：</h4><p>src/components/</p><ul><li>logine ——————– 登录页</li><li>home ——————–首页</li><li>menu ——————– 菜单管理页</li><li>permission ——————– 权限管理页</li><li>role ——————– 角色管理页</li><li>uesr ——————– 用户管理页</li><li>organiz ———————— 机构管理页</li><li>inte-setting ———————— 综合设置页</li></ul><h2 id="配置及安装依赖"><a href="#配置及安装依赖" class="headerlink" title="配置及安装依赖"></a>配置及安装依赖</h2><p>在package.json中配置所需的依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">  <span class="string">"babel-runtime"</span>:<span class="string">"^6.26.0"</span>,</div><div class="line">  <span class="string">"vue"</span>: <span class="string">"^2.5.2"</span>,</div><div class="line">  <span class="string">"vue-router"</span>: <span class="string">"^3.0.1"</span>,</div><div class="line">  <span class="string">"element-ui"</span>: <span class="string">"^2.0.0-beta.1"</span>,</div><div class="line">  <span class="string">"scss"</span>: <span class="string">"^0.2.4"</span>,</div><div class="line">  <span class="string">"axios"</span>: <span class="string">"^0.17.0"</span></div><div class="line">&#125;，</div><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"babel-polyfill"</span>: <span class="string">"^6.26.0"</span>,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里简单说明下<code>babel-polyfill</code>，它是对ES6的API做转义。有兴趣的同学可以查阅其他资料。</p><p><strong>安装依赖</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install</div></pre></td></tr></table></figure><h3 id="引入element-ui"><a href="#引入element-ui" class="headerlink" title="引入element-ui"></a>引入element-ui</h3><p>在app.vue引入element-ui，然后就可以在其他任何页面中使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-ui'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span></div><div class="line">Vue.use(Element)</div></pre></td></tr></table></figure><h3 id="设置路径别名"><a href="#设置路径别名" class="headerlink" title="设置路径别名"></a>设置路径别名</h3><p>设置路径别名，以减少开发过程中路径的复杂性，比如<code>../../</code>这类路径。</p><p>修改webpack.base.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</div><div class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</div><div class="line">      <span class="string">'common'</span>: resolve(<span class="string">'src/common'</span>),</div><div class="line">      <span class="string">'components'</span>: resolve(<span class="string">'src/components'</span>),</div><div class="line">      <span class="string">'api'</span>: resolve(<span class="string">'src/api'</span>),</div><div class="line">      <span class="string">'base'</span>: resolve(<span class="string">'src/base'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h2 id="配置router"><a href="#配置router" class="headerlink" title="配置router"></a>配置router</h2><p>在router/index.js配置routers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'登录'</span>,</div><div class="line">      <span class="attr">component</span>: Login</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/home'</span>,</div><div class="line">      <span class="attr">component</span>: Home,</div><div class="line">      <span class="attr">name</span>: <span class="string">'系统设置'</span>,</div><div class="line">      <span class="attr">iconCls</span>: <span class="string">'el-icon-setting'</span>,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/menu'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'菜单管理'</span>,</div><div class="line">          <span class="attr">component</span>: Menu</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/permission'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'权限管理'</span>,</div><div class="line">          <span class="attr">component</span>: Permission</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/role'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'角色管理'</span>,</div><div class="line">          <span class="attr">component</span>: Role</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/user'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'用户管理'</span>,</div><div class="line">          <span class="attr">component</span>: User</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/home'</span>,</div><div class="line">      <span class="attr">component</span>: Home,</div><div class="line">      <span class="attr">name</span>: <span class="string">'组织架构'</span>,</div><div class="line">      <span class="attr">iconCls</span>: <span class="string">'el-icon-menu'</span>,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/organiz'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'机构管理'</span>,</div><div class="line">          <span class="attr">component</span>: Organiz</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/setting'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'综合设置'</span>,</div><div class="line">          <span class="attr">component</span>: InSetting</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="编写home-vue组件"><a href="#编写home-vue组件" class="headerlink" title="编写home.vue组件"></a>编写home.vue组件</h2><p>使用element-ui2.0的Container布局容器，方便快速搭建页面的基本结构。</p><p>先上<strong>components/home.vue</strong>的代码及效果图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;el-container class=&quot;container&quot;&gt;</div><div class="line">    &lt;el-header class=&quot;header&quot;&gt;</div><div class="line">      &lt;el-row&gt;</div><div class="line">        &lt;el-col :span=&quot;24&quot; class=&quot;h-col&quot;&gt;</div><div class="line">          &lt;el-col :span=&quot;10&quot; class=&quot;logo&quot; :class=&quot;collapsed?&apos;logo-collapse-width&apos;:&apos;logo-width&apos;&quot;&gt;</div><div class="line">            &#123;&#123;collapsed ? &apos;&apos; : title&#125;&#125;</div><div class="line">          &lt;/el-col&gt;</div><div class="line">          &lt;el-col :span=&quot;10&quot;&gt;</div><div class="line">            &lt;div class=&quot;tools&quot; @click.prevent=&quot;collapse&quot;&gt;</div><div class="line">              &lt;i class=&quot;el-icon-arrow-right&quot;&gt;&lt;/i&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">          &lt;/el-col&gt;</div><div class="line"></div><div class="line">          &lt;el-col :span=&quot;4&quot; class=&quot;userinfo&quot;&gt;</div><div class="line">            &lt;el-dropdown trigger=&quot;hover&quot;&gt;</div><div class="line">              &lt;span class=&quot;el-dropdown-link userinfo-inner&quot;&gt;&#123;&#123;userName&#125;&#125;&lt;i class=&quot;el-icon-setting&quot;&gt;&lt;/i&gt;&lt;/span&gt;</div><div class="line">              &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</div><div class="line">                &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</div><div class="line">                &lt;el-dropdown-item&gt;设置&lt;/el-dropdown-item&gt;</div><div class="line">                &lt;el-dropdown-item @click.native=&quot;logout&quot;&gt;退出登录&lt;/el-dropdown-item&gt;</div><div class="line">              &lt;/el-dropdown-menu&gt;</div><div class="line">            &lt;/el-dropdown&gt;</div><div class="line">          &lt;/el-col&gt;</div><div class="line">        &lt;/el-col&gt;</div><div class="line">      &lt;/el-row&gt;</div><div class="line">    &lt;/el-header&gt;</div><div class="line"></div><div class="line">    &lt;el-container&gt;</div><div class="line">      &lt;el-aside class=&quot;aside&quot; :class=&quot;&#123;showSidebar:!collapsed&#125;&quot;&gt;</div><div class="line">        &lt;el-menu default-active=&quot;0&quot; class=&quot;el-menu&quot; ref=&quot;menuCollapsed&quot; router :collapse=&quot;collapsed&quot;&gt;</div><div class="line">          &lt;template v-for=&quot;(item,index) in $router.options.routes&quot; v-if=&quot;item.name !== &apos;登录&apos;&quot;&gt;</div><div class="line">            &lt;el-submenu :index=&quot;index+&apos;&apos;&quot; v-if=&quot;!item.leaf&quot;&gt;</div><div class="line">              &lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;&lt;/template&gt;</div><div class="line">              &lt;el-menu-item v-for=&quot;child in item.children&quot;</div><div class="line">                            :index=&quot;child.path&quot;</div><div class="line">                            :key=&quot;child.path&quot;</div><div class="line">                            v-if=&quot;!child.menuShow&quot;</div><div class="line">                            :class=&quot;$route.path==child.path?&apos;is-active&apos;:&apos;&apos;&quot;</div><div class="line">              &gt;&#123;&#123;child.name&#125;&#125;</div><div class="line">              &lt;/el-menu-item&gt;</div><div class="line">            &lt;/el-submenu&gt;</div><div class="line">            &lt;el-menu-item v-else-if=&quot;item.leaf&amp;&amp;item.children&amp;&amp;item.children.length&quot;</div><div class="line">                          :index=&quot;item.children[0].path&quot;</div><div class="line">                          :class=&quot;$route.path==item.children[0].path?&apos;is-avtive&apos;:&apos;&apos;&quot;&gt;</div><div class="line">              &lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.children[0].name&#125;&#125;&lt;/span&gt;</div><div class="line">            &lt;/el-menu-item&gt;</div><div class="line">          &lt;/template&gt;</div><div class="line">        &lt;/el-menu&gt;</div><div class="line">      &lt;/el-aside&gt;</div><div class="line"></div><div class="line">      &lt;el-main&gt;</div><div class="line">        &lt;transition&gt;</div><div class="line">          &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">        &lt;/transition&gt;</div><div class="line">      &lt;/el-main&gt;</div><div class="line">    &lt;/el-container&gt;</div><div class="line">  &lt;/el-container&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>运行项目展示页面如下：</p><p><img src="http://omux103p0.bkt.clouddn.com/h3.png" alt="3"></p><h3 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h3><p>接下来依次分析<strong>home.vue</strong>的代码。</p><h4 id="动态配置菜单"><a href="#动态配置菜单" class="headerlink" title="动态配置菜单"></a>动态配置菜单</h4><p>使用菜单组件<code>&lt;el-menu&gt;</code>，<code>:default-active=&quot;0&quot;</code>设置当前激活菜单的<code>index</code>，设置为<code>router</code>模式会在激活导航时以 <code>index</code> 作为 <code>path</code> 进行路由跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-menu :<span class="keyword">default</span>-active=<span class="string">"0"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-menu"</span> ref=<span class="string">"menuCollapsed"</span> router :collapse=<span class="string">"collapsed"</span>&gt;</div><div class="line">...</div><div class="line">&lt;<span class="regexp">/e-menu&gt;</span></div></pre></td></tr></table></figure><p>接着使用<code>$router.options.routes</code>来遍历生成侧边导航栏，<code>v-if</code>将登录的路径隐藏。在菜单中通过<code>submenu</code>组件可以生成二级菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template v-for=&quot;(item,index) in $router.options.routes&quot; v-if=&quot;item.name !== &apos;登录&apos;&quot;&gt;</div><div class="line">&lt;el-submenu :index=&quot;index+&apos;&apos;&quot; v-if=&quot;!item.leaf&quot;&gt;</div><div class="line">              &lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/el-submenu&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>分组名可以通过<code>title</code>属性直接设定进行<code>solt</code>分发菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;&lt;/template&gt;</div></pre></td></tr></table></figure><p>用<code>item.name</code>和<code>item.children.name</code>来配置菜单栏和子菜单栏的名称。<code>$route.path</code>表示当前路由对象的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;el-menu-item v-for=&quot;child in item.children&quot;</div><div class="line">                            :index=&quot;child.path&quot;</div><div class="line">                            :key=&quot;child.path&quot;</div><div class="line">                            v-if=&quot;!child.menuShow&quot;</div><div class="line">                            :class=&quot;$route.path==child.path?&apos;is-active&apos;:&apos;&apos;&quot;</div><div class="line">              &gt;&#123;&#123;child.name&#125;&#125;&lt;/el-menu-item&gt;</div></pre></td></tr></table></figure><p>最后，如上图路由菜单展示，完美~！</p><h4 id="导航菜单折叠功能"><a href="#导航菜单折叠功能" class="headerlink" title="导航菜单折叠功能"></a>导航菜单折叠功能</h4><p>首先在data中创建是否折叠<code>collapsed</code>属性，默认值为<code>false</code>。写个<code>collapse()</code>方法以此来控制菜单是否折叠。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> data () &#123;</div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">   <span class="attr">collapsed</span>: <span class="literal">false</span></div><div class="line">   &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  collapse () &#123;</div><div class="line">    <span class="keyword">this</span>.collapsed = !<span class="keyword">this</span>.collapsed</div><div class="line"> &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分别在header和aside组件上设置<code>collapsed</code>来控制菜单折叠</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;el-col :span=&quot;10&quot; class=&quot;logo&quot; :class=&quot;collapsed?&apos;logo-collapse-width&apos;:&apos;logo-width&apos;&quot;&gt;</div><div class="line">   &#123;&#123;collapsed ? &apos;&apos; : title&#125;&#125;</div><div class="line">&lt;/el-col&gt;</div><div class="line"></div><div class="line">&lt;el-aside class=&quot;aside&quot; :class=&quot;&#123;showSidebar:!collapsed&#125;&quot;&gt;</div><div class="line">...</div><div class="line">&lt;/el-aside&gt;</div></pre></td></tr></table></figure><p>具体代码看：<a href="https://github.com/hs-web/hsweb-ui-vue" target="_blank" rel="external">https://github.com/hs-web/hsweb-ui-vue</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发相关的技术栈&quot;&gt;&lt;a href=&quot;#开发相关的技术栈&quot; class=&quot;headerlink&quot; title=&quot;开发相关的技术栈&quot;&gt;&lt;/a&gt;开发相关的技术栈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vuejs2.0：一套构建用户界面的渐进式框架，易用、灵活、高效&lt;/li&gt;
&lt;li&gt;element-ui：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库&lt;/li&gt;
&lt;li&gt;vue-router：官方的路由组件，配合vue.js创建单页应用（SPA）非常简单&lt;/li&gt;
&lt;li&gt;axios: 基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用&lt;/li&gt;
&lt;li&gt;scass&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（六）：播放器的实现（一）</title>
    <link href="http://kakajing.github.io/2017/10/28/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://kakajing.github.io/2017/10/28/Vue音乐播放器开发（六）：播放器的实现（一）/</id>
    <published>2017-10-28T07:24:36.000Z</published>
    <updated>2017-11-23T13:11:12.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="播放器内置组件开发"><a href="#播放器内置组件开发" class="headerlink" title="播放器内置组件开发"></a>播放器内置组件开发</h2><p>播放器可以通过歌手详情列表、歌单详情列表、排行榜列表以及搜索结果打开，换言之，多个组件都可以操作这个播放器。</p><a id="more"></a><h3 id="播放器Vuex数据设计"><a href="#播放器Vuex数据设计" class="headerlink" title="播放器Vuex数据设计"></a>播放器Vuex数据设计</h3><p>打开播放器时点击缩小播放器仍然可以在后台播放运行，也就是说全局性的控制播放器数据，所以要通过vuex管理 。首先思考播放器需要哪些相关数据。</p><p>列出播放器相关的数据：</p><p><code>playing</code>：播放状态</p><p><code>fullScreen</code>：展开或收起</p><p><code>playlist</code>：播放列表</p><p><code>sequenceList</code>：顺序列表</p><p><code>mode</code>：播放模式</p><p><code>currentIndex</code>：当前播放索引</p><p><strong>state.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;playMode&#125; <span class="keyword">from</span> <span class="string">'common/js/config'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">singer</span>: &#123;&#125;,</div><div class="line">  <span class="attr">playing</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">fullScreen</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">playlist</span>: [],</div><div class="line">  <span class="attr">sequenceList</span>: [],</div><div class="line">  <span class="attr">mode</span>: playMode.sequence,</div><div class="line">  <span class="attr">currentIndex</span>: <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</div></pre></td></tr></table></figure><p>这几个数据的其他配置如mutations、getters在此省略，具体参考代码。</p><h3 id="播放器组件开发"><a href="#播放器组件开发" class="headerlink" title="播放器组件开发"></a>播放器组件开发</h3><p>播放器<strong>player.vue</strong> 基础样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;player&quot;&gt;</div><div class="line">    &lt;div class=&quot;normal-player&quot;&gt;播放器&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mini-player&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>播放器是全局组件，放在<code>App.vue</code>下面，通过<code>Vuex</code>传递数据，触发<code>action</code>提交<code>mutation</code>，从而使播放器开始工作。</p><p><strong>App.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;m-header&gt;&lt;/m-header&gt;</div><div class="line">    &lt;tab&gt;&lt;/tab&gt;</div><div class="line">    &lt;keep-alive&gt;</div><div class="line">      &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/keep-alive&gt;</div><div class="line">    &lt;player&gt;&lt;/player&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>用vuex相关数据控制播放器的显示和隐藏，传入<code>fullScreen</code>控制显示或隐藏，<code>playlist</code>控制播放器渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;player&quot; v-show=&quot;playlist.length&gt;0&quot;&gt;</div><div class="line">    &lt;div class=&quot;normal-player&quot; v-show=&quot;fullScreen&quot;&gt;播放器&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mini-player&quot; v-show=&quot;fullScreen&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import &#123;mapGetters&#125; from &apos;vuex&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    computed: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        &apos;fullScreen&apos;,</div><div class="line">        &apos;playlist&apos;</div><div class="line">      ])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="控制播放器的展示"><a href="#控制播放器的展示" class="headerlink" title="控制播放器的展示"></a>控制播放器的展示</h4><p>点击歌曲列表时展开播放器，也就是点击歌曲列表song-list组件，给song-list组件添加事件<code>selectItem(item, index)</code></p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v40.png" alt="v40"></p><p> 而song-list又被music-list组件使用，在music-list组件触发select事件<code>@select=&quot;selectItem&quot;</code>。</p><p><strong>music-list.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"song-list-wrapper"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">song-list</span> @<span class="attr">select</span>=<span class="string">"selectItem"</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><code>selectItem</code>要做三件事：</p><p>1、点击歌曲时要播放整个歌曲列表，设置<code>playlist</code>和<code>sequenceList</code></p><p>2、根据点击的歌曲索引，设置<code>currentIndex</code>，点击时实际上歌曲要播放了，设置播放状态<code>playing</code></p><p>3、默认展开全屏播放器，设置<code>fullScreen</code></p><p>设置这些数据实际就是提交<code>mutations</code>。在一个动作中多次改变<code>mutation</code>那么会封装一个<code>action</code>。在<code>actions.js</code>里定义<code>selectPlay</code>。</p><p><strong>action.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectPlay = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit, state&#125;, &#123;list, index&#125;</span>) </span>&#123;</div><div class="line">  commit(types.SET_SEQUENCE_LIST, list)</div><div class="line">  commit(types.SET_PLAYLIST, list)</div><div class="line">  commit(types.SET_CURRENT_INDEX, index)</div><div class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</div><div class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>selectPlay对一系列mutation做封装，提交mutation。</p><p>在music-list组件里调用actions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    selectItem (item, index) &#123;</div><div class="line">        <span class="keyword">this</span>.selectPlay(&#123;</div><div class="line">          <span class="attr">list</span>: <span class="keyword">this</span>.songs,</div><div class="line">          index</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">      ...mapActions([</div><div class="line">        <span class="string">'selectPlay'</span></div><div class="line">      ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>action</code>逻辑执行<code>mutation</code>就会改变，<code>mutation</code>改变就会映射到<code>mapGetters</code>，也就会得到<code>fullScreen</code>和<code>playlist</code>的改变。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v46.png" alt="v46"></p><p>通过定义的vuex以及一些事件点击操作去修改的vuex数据，这些操作行为成功实现了player组件的显示。</p><p>传入<code>currentSong</code>填充歌曲基本数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;player&quot; v-show=&quot;playlist.length&gt;0&quot;&gt;</div><div class="line">    &lt;div class=&quot;normal-player&quot; v-show=&quot;fullScreen&quot;&gt;</div><div class="line">      &lt;div class=&quot;background&quot;&gt;</div><div class="line">        &lt;img width=&quot;100%&quot; height=&quot;100%&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      ...</div><div class="line">        &lt;h1 class=&quot;title&quot; v-html=&quot;currentSong.name&quot;&gt;&lt;/h1&gt;</div><div class="line">        &lt;h2 class=&quot;subtitle&quot; v-html=&quot;currentSong.singer&quot;&gt;&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;middle&quot;&gt;</div><div class="line">        &lt;div class=&quot;middle-l&quot;&gt;</div><div class="line">          &lt;div class=&quot;cd-wrapper&quot;&gt;</div><div class="line">            &lt;div class=&quot;cd&quot;&gt;</div><div class="line">              &lt;img class=&quot;image&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;bottom&quot;&gt;...&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot;&gt;</div><div class="line">      &lt;div class=&quot;icon&quot;&gt;</div><div class="line">        &lt;img width=&quot;40&quot; height=&quot;40&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;text&quot;&gt;</div><div class="line">        &lt;h2 class=&quot;name&quot; v-html=&quot;currentSong.name&quot;&gt;&lt;/h2&gt;</div><div class="line">        &lt;p class=&quot;desc&quot; v-html=&quot;currentSong.singer&quot;&gt;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      ...</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import &#123;mapGetters&#125; from &apos;vuex&apos;</div><div class="line">  </div><div class="line">  export default &#123;</div><div class="line">    computed: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        &apos;fullScreen&apos;,</div><div class="line">        &apos;playlist&apos;,</div><div class="line">        &apos;currentSong&apos;</div><div class="line">      ])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>效果展示：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v41.png" alt="v41"></p><h4 id="mini播放器的展示"><a href="#mini播放器的展示" class="headerlink" title="mini播放器的展示"></a>mini播放器的展示</h4><p>miniPlayer是需要把<code>fullScreen</code>设置为<code>false</code>，因此点击返回按钮时把<code>fullScreen</code>设置为<code>false</code>，添加个<code>click</code>事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;normal-player&quot; v-show=&quot;fullScreen&quot;&gt;</div><div class="line">...</div><div class="line">&lt;div class=&quot;top&quot;&gt;</div><div class="line">        &lt;div class=&quot;back&quot; @click=&quot;back&quot;&gt;</div><div class="line">          &lt;i class=&quot;icon-back&quot;&gt;&lt;/i&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;h1 class=&quot;title&quot; v-html=&quot;currentSong.name&quot;&gt;&lt;/h1&gt;</div><div class="line">        &lt;h2 class=&quot;subtitle&quot; v-html=&quot;currentSong.singer&quot;&gt;&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  methods: &#123;</div><div class="line">      back () &#123;</div><div class="line">        this.setFullScreen(false)</div><div class="line">      &#125;,</div><div class="line">      ...mapMutations(&#123;</div><div class="line">        setFullScreen: &apos;SET_FULL_SCREEN&apos;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过mutation改变fullScreen。</p><p>效果展示：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v42.png" alt="v42"></p><p> 点击mini播放器打开全屏，同理在mini播放器添加个click事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot; @click=&quot;open&quot;&gt;</div><div class="line">      ...</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">open () &#123;</div><div class="line">   this.setFullScreen(true)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="播放器展开收起动画"><a href="#播放器展开收起动画" class="headerlink" title="播放器展开收起动画"></a>播放器展开收起动画</h4><h5 id="最大化和最小化切换"><a href="#最大化和最小化切换" class="headerlink" title="最大化和最小化切换"></a>最大化和最小化切换</h5><p>播放器最大化和最小化切换时没有交互动画显得比较生硬，为了体验更好使用<code>&lt;transition&gt;&lt;/transition&gt;</code>自定义标签设置交互动画。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v43.png" alt="v43"></p><p>使用<code>&lt;transition&gt;&lt;/transition&gt;</code>包裹要实现的区块。然后根据<code>name</code>编写css样式</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v44.png" alt="v44"></p><h5 id="点击放大或缩小时的交互动画"><a href="#点击放大或缩小时的交互动画" class="headerlink" title="点击放大或缩小时的交互动画"></a>点击放大或缩小时的交互动画</h5><p>当展开收起播放器时，mini播放器的图片放大或缩小有渐变的效果，利用vuejs提供JavaScript钩子，在钩子里创建css3的animation。给name为normal的添加<code>@enter</code>、<code>@afterEnter</code>、<code>@leave</code>、<code>@afterLeave</code>这几个事件。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v45.png" alt="v45"></p><p> enter方法有两个参数，第一个参数el是要做动画的dom，第二个参数done是回调函数，done执行时就会跳到下一个钩子<code>afterEnter</code>，<code>leave</code>和<code>enter</code>一样有两个参数，done执行时跳到下个钩子<code>afterLeave</code>。</p><p>使用css3写动画首先要知道几个位置：从运动的起始点和终点的区域、横坐标和纵坐标以及scale的大小。但这些是动态获取的不能预先知道，所以通过js的方式创建css3动画。这里使用<a href="https://github.com/HenrikJoreteg/create-keyframe-animation" target="_blank" rel="external">create-keyframe-animation</a>第三方库实现通过js编程方式创建css3动画。</p><p>在这之前先封装个函数来获取初始位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取初始位置</span></div><div class="line">_getPosAndScale() &#123;</div><div class="line">        <span class="keyword">const</span> targetWidth = <span class="number">40</span></div><div class="line">        <span class="keyword">const</span> paddingLeft = <span class="number">40</span></div><div class="line">        <span class="keyword">const</span> paddingBottom = <span class="number">30</span></div><div class="line">        <span class="keyword">const</span> paddingTop = <span class="number">80</span></div><div class="line">        <span class="comment">// cd-wrapper的宽度</span></div><div class="line">        <span class="keyword">const</span> width = <span class="built_in">window</span>.innerWidth * <span class="number">0.8</span></div><div class="line">        <span class="comment">// 初始缩放比例</span></div><div class="line">        <span class="keyword">const</span> scale = targetWidth / width</div><div class="line">        <span class="keyword">const</span> x = -(<span class="built_in">window</span>.innerWidth / <span class="number">2</span> - paddingLeft)</div><div class="line">        <span class="keyword">const</span> y = <span class="built_in">window</span>.innerHeight - paddingTop - width / <span class="number">2</span> - paddingBottom</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          x,</div><div class="line">          y,</div><div class="line">          scale</div><div class="line">        &#125;</div><div class="line">      &#125;,</div></pre></td></tr></table></figure><p>点击目标创建动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">enter(el, done) &#123;</div><div class="line">        <span class="keyword">const</span> &#123;x, y, scale&#125; = <span class="keyword">this</span>._getPosAndScale()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> animation = &#123;</div><div class="line">          <span class="number">0</span>: &#123;</div><div class="line">            <span class="attr">transform</span>: <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0) scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">          &#125;,</div><div class="line">          <span class="number">60</span>: &#123;</div><div class="line">            <span class="attr">transform</span>: <span class="string">`translate3d(0,0,0) scale(1.1)`</span></div><div class="line">          &#125;,</div><div class="line">          <span class="number">100</span>: &#123;</div><div class="line">            <span class="attr">transform</span>: <span class="string">`translate3d(0,0,0) scale(1)`</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        animations.registerAnimation(&#123;</div><div class="line">          <span class="attr">name</span>: <span class="string">'move'</span>,</div><div class="line">          animation,</div><div class="line">          <span class="attr">presets</span>: &#123;</div><div class="line">            <span class="attr">duration</span>: <span class="number">400</span>,</div><div class="line">            <span class="attr">easing</span>: <span class="string">'linear'</span></div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        animations.runAnimation(<span class="keyword">this</span>.$refs.cdWrapper, <span class="string">'move'</span>, done)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>动画执行完后调用done函数，done函数执行后跳到afterEnter，afterEnter做的事情就是结束动画，animation设置为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">afterEnter () &#123;</div><div class="line">   animations.unregisterAnimation(<span class="string">'move'</span>)</div><div class="line">   <span class="keyword">this</span>.$refs.cdWrapper.style.animation = <span class="string">''</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>leave动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">leave(el, done) &#123;</div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.transition = <span class="string">'all 0.4s'</span></div><div class="line">  <span class="keyword">const</span> &#123;x, y, scale&#125; = <span class="keyword">this</span>._getPosAndScale()</div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0) scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.addEventListener(<span class="string">'transitionend'</span>, done)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>leave动画执行完后调用done，done执行完后跳到afterLeave，afterLeave将动画设置为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">afterLeave() &#123;</div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.transition = <span class="string">''</span></div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style[transform] = <span class="string">''</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="播放器歌曲播放功能实现"><a href="#播放器歌曲播放功能实现" class="headerlink" title="播放器歌曲播放功能实现"></a>播放器歌曲播放功能实现</h4><p>播放功能实际上是使用HTML5的<code>audio</code>标签实现的，<code>src</code>属性指向的是播放音乐地址。</p><p>在<strong>player.vue</strong>里添加<code>audio</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;audio ref=&quot;audio&quot; :src=&quot;currentSong.url&quot;&gt;&lt;/audio&gt;</div></pre></td></tr></table></figure><p>仅仅通过指定播放地址是不能播放，还需要调用<code>audio</code>的<code>play</code>方法，在<code>currentSong</code>发生改变时调用<code>play</code>方法，这样要watch <code>currentSong</code>的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      currentSong () &#123;</div><div class="line">        <span class="keyword">this</span>.$refs.audio.play()</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动效果会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught (<span class="keyword">in</span> promise) DOMException: The play() request was interrupted by a <span class="keyword">new</span> load request.</div></pre></td></tr></table></figure><p>这是dom异常，在调用<code>play</code>方法时同时去请求src，但dom还没被读取就调用<code>play</code>，所以报错了。在这加个延迟<code>$nextTick()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      currentSong () &#123;</div><div class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.audio.play()</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>报错消失，歌曲正常播放。</p><h4 id="音乐暂停功能实现"><a href="#音乐暂停功能实现" class="headerlink" title="音乐暂停功能实现"></a>音乐暂停功能实现</h4><p>vuex里有定义一个状态叫<code>playing</code>，是控制当前播放歌曲是播放还是暂停状态。点击歌曲列表时会提交一个action，在action里提交<code>SET_PLAYING_STATE</code>的mutation设置为<code>true</code>，所以当点击歌曲列表时<code>playing</code>状态为<code>true</code>。通过mapGetters里的<code>playing</code>获取当前状态，然后通过mutation改变<code>playing</code>的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        <span class="string">'fullScreen'</span>,</div><div class="line">        <span class="string">'playlist'</span>,</div><div class="line">        <span class="string">'currentSong'</span>,</div><div class="line">        <span class="string">'playing'</span></div><div class="line">      ])</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  ...mapMutations(&#123;</div><div class="line">        <span class="attr">setFullScreen</span>: <span class="string">'SET_FULL_SCREEN'</span>,</div><div class="line">        <span class="attr">setPlayingState</span>: <span class="string">'SET_PLAYING_STATE'</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用<code>setPlayingState</code>方法改变<code>playing</code>状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class="bottom"&gt;</div><div class="line">  &lt;div class="icon i-center"&gt;</div><div class="line">     &lt;i @click="togglePlaying" class="icon-play"&gt;&lt;/i&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">     </div><div class="line">togglePlaying () &#123;</div><div class="line">   this.setPlayingState(!this.playing)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>仅仅设置playing不能让播放器停止，真正控制播放的还是播放器，所以watch playing状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">playing (newPlaying) &#123;</div><div class="line">  <span class="keyword">const</span> audio = <span class="keyword">this</span>.$refs.audio</div><div class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    newPlaying ? audio.play() : audio.pause()</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="动态改变播放按钮样式"><a href="#动态改变播放按钮样式" class="headerlink" title="动态改变播放按钮样式"></a>动态改变播放按钮样式</h4><p>当点击歌曲播放时显示播放按钮，点击暂停时显示暂停按钮。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class="bottom"&gt;</div><div class="line">&lt;div class="icon i-center"&gt;</div><div class="line">    &lt;i @click="togglePlaying" :class="playIcon"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">        </div><div class="line">computed: &#123;</div><div class="line">      playIcon () &#123;</div><div class="line">        return this.playing ? 'icon-pause' : 'icon-play'</div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同理，mini播放器也是</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class="mini-player" v-show="!fullScreen" @click="open"&gt;</div><div class="line">&lt;div class="control"&gt;</div><div class="line">        &lt;i @click="togglePlaying" :class="miniIcon"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> </div><div class="line"> computed: &#123;</div><div class="line">   miniIcon () &#123;</div><div class="line">     return this.playing ? 'icon-pause-mini' : 'icon-play-mini'</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击mini播放器播放按钮发现播放器又弹了出来，是因为子元素点击事件会冒泡到父元素上，父元素也有个点击事件去打开播放器，为了防止事件向上冒泡修改为<code>@click.stop=&#39;togglePlaying&#39;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot; @click=&quot;open&quot;&gt;</div><div class="line">&lt;div class=&quot;control&quot;&gt;</div><div class="line">        &lt;i @click=&quot;togglePlaying&quot; :class=&quot;miniIcon&quot;&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="cd图片旋转"><a href="#cd图片旋转" class="headerlink" title="cd图片旋转"></a>cd图片旋转</h4><p>歌曲播放时歌曲图片跟着旋转，暂停时图片不动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;cd-wrapper&quot; ref=&quot;cdWrapper&quot;&gt;</div><div class="line">  &lt;div class=&quot;cd&quot; :class=&quot;cdCls&quot;&gt;</div><div class="line">  &lt;img class=&quot;image&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">computed: &#123; </div><div class="line">  cdCls () &#123;</div><div class="line">  return this.playing ? &apos;play&apos; : &apos;play pause&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同理，mini播放器也是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot; @click=&quot;open&quot;&gt;</div><div class="line">  &lt;div class=&quot;icon&quot;&gt;</div><div class="line">  &lt;img :class=&quot;cdCls&quot; width=&quot;40&quot; height=&quot;40&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="歌曲前进后退功能实现"><a href="#歌曲前进后退功能实现" class="headerlink" title="歌曲前进后退功能实现"></a>歌曲前进后退功能实现</h4><p>前进后退功能其实就是改变当前播放歌曲的索引。</p><p>vuex有个状态是<code>currentIndex</code>，表示当前播放歌曲的索引，当点击歌曲列表时触发action，action有个对<code>SET_CURRENT_INDEX</code>的mutation的提交，修改<code>currentIndex</code>播放到第几位，这也代表了当前播放的歌曲。通过mapGetters里的<code>currentIndex</code>获取当前播放歌曲，然后通过mutation改变<code>currentIndex</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...mapGetters([</div><div class="line">  <span class="string">'fullScreen'</span>,</div><div class="line">  <span class="string">'playlist'</span>,</div><div class="line">  <span class="string">'currentSong'</span>,</div><div class="line">  <span class="string">'playing'</span>,</div><div class="line">  <span class="string">'currentIndex'</span></div><div class="line">])</div></pre></td></tr></table></figure><p>添加<code>@prev</code>和<code>@next</code>方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div class="icon i-left"&gt;</div><div class="line">&lt;i @click="prev" class="icon-prev"&gt;&lt;/i&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="icon i-center"&gt;</div><div class="line">&lt;i @click="togglePlaying" :class="playIcon"&gt;&lt;/i&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="icon i-right"&gt;</div><div class="line">&lt;i @click="next" class="icon-next"&gt;&lt;/i&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  prev () &#123;</div><div class="line">    let index = this.currentIndex + 1</div><div class="line">    if (index === this.playlist.length) &#123;</div><div class="line">      index = 0</div><div class="line">    &#125;</div><div class="line">    this.setCurrentIndex(index)</div><div class="line">  &#125;,</div><div class="line">  next () &#123;</div><div class="line">    let index = this.currentIndex - 1</div><div class="line">    if (index === -1) &#123;</div><div class="line">      index = this.playlist.length - 1</div><div class="line">    &#125;</div><div class="line">    this.setCurrentIndex(index)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击暂停切换下首歌，下首歌播放了但icon没发生变化，是因为点击next时歌曲切换了但是<code>playing</code>状态没修改，这里修改下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">prev () &#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex + <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> (index === <span class="keyword">this</span>.playlist.length) &#123;</div><div class="line">    index = <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">    <span class="keyword">this</span>.togglePlaying()</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">next () &#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</div><div class="line">    index = <span class="keyword">this</span>.playlist.length - <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">    <span class="keyword">this</span>.togglePlaying()</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>快速切换歌曲时会报<code>Uncaught (in promise) DOMException: The play() request was interrupted by a new load request.</code>之前遇到的错误。</p><p><code>audio</code>有<code>@canplay</code>和<code>@error</code>两个事件：</p><p>1、<code>@canplay</code>：当歌曲加载播放会触发事件，</p><p>2、<code>@error</code>：当歌曲地址发生错误时会触发error事件</p><p>在<code>audio</code>标签监听<code>@canplay=&quot;read&quot;</code>和<code>@error=&quot;error&quot;</code>事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;audio ref=&quot;audio&quot; :src=&quot;currentSong.url&quot; @canplay=&quot;read&quot; @error=&quot;error&quot;&gt;&lt;/audio&gt;</div></pre></td></tr></table></figure><p>只有当歌曲read时才能点击下首歌，反之不能点击下首歌。用一个标识位控制，在data里定义<code>songReady</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">songReady</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">&#125;,</div><div class="line">  </div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">        prev () &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.songReady) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (index === <span class="keyword">this</span>.playlist.length) &#123;</div><div class="line">          index = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">          <span class="keyword">this</span>.togglePlaying()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.songReady = <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      next () &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.songReady) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</div><div class="line">          index = <span class="keyword">this</span>.playlist.length - <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">          <span class="keyword">this</span>.togglePlaying()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.songReady = <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      read () &#123;</div><div class="line">        <span class="keyword">this</span>.songReady = <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当用户切换下首歌遇到网络错误或者下首歌url错误，songReady永远不能执行，之后的点击事件都不能用，当下首歌加载失败触发error函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">read () &#123;</div><div class="line">       <span class="keyword">this</span>.songReady = <span class="literal">true</span></div><div class="line">     &#125;,</div><div class="line">     error () &#123;</div><div class="line">       <span class="keyword">this</span>.songReady = <span class="literal">true</span></div><div class="line">     &#125;,</div></pre></td></tr></table></figure><p>从样式上做些处理,当我们不能点击时给这个按钮绑定<code>disableClas</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div class="bottom"&gt;</div><div class="line">  &lt;div class="operators"&gt;</div><div class="line">   ...</div><div class="line">    &lt;div class="icon i-left" :class="disableCls"&gt;</div><div class="line">    &lt;i @click="prev" class="icon-prev"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class="icon i-center" :class="disableCls"&gt;</div><div class="line">    &lt;i @click="togglePlaying" :class="playIcon"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class="icon i-right" :class="disableCls"&gt;</div><div class="line">    &lt;i @click="next" class="icon-next"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">   ...</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">  disableCls () &#123;</div><div class="line">    return this.songReady ? '' : 'disable'</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="具体源代码"><a href="#具体源代码" class="headerlink" title="具体源代码"></a>具体源代码</h3><p>参考：<a href="https://github.com/kakajing/vue-music" target="_blank" rel="external">https://github.com/kakajing/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;播放器内置组件开发&quot;&gt;&lt;a href=&quot;#播放器内置组件开发&quot; class=&quot;headerlink&quot; title=&quot;播放器内置组件开发&quot;&gt;&lt;/a&gt;播放器内置组件开发&lt;/h2&gt;&lt;p&gt;播放器可以通过歌手详情列表、歌单详情列表、排行榜列表以及搜索结果打开，换言之，多个组件都可以操作这个播放器。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（五）：歌手详情页开发以及Vuex的使用二</title>
    <link href="http://kakajing.github.io/2017/10/19/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%A4%E4%BA%92%E6%95%88%E6%9E%9C%E4%BA%8C/"/>
    <id>http://kakajing.github.io/2017/10/19/Vue音乐播放器开发（五）：歌手详情页开发之交互效果二/</id>
    <published>2017-10-19T13:41:20.000Z</published>
    <updated>2017-10-26T12:51:11.518Z</updated>
    
    <content type="html"><![CDATA[<p>接 <a href="https://kakajing.github.io/2017/10/15/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8AVuex%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/">Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一</a></p><h2 id="交互效果"><a href="#交互效果" class="headerlink" title="交互效果"></a>交互效果</h2><h3 id="图片跟随滑动变小"><a href="#图片跟随滑动变小" class="headerlink" title="图片跟随滑动变小"></a>图片跟随滑动变小</h3><p>当歌曲列表往上滑动时，图片跟随滑动变小以展示更多歌曲数据，当往下拉时，图片跟着放大。</p><a id="more"></a><p>当向上滚动列表时有个底也要跟着向上滚，那就需要一个层，这个层在文字的下面，随着滚动有向上推的过程。在scroll组件之前添加这个<code>class</code>为<code>bg-layer</code>的<code>div</code>层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"bg-layer"</span> ref=<span class="string">"layer"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"> &lt;scroll <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> :data=<span class="string">"songs"</span> ref=<span class="string">"list"</span>&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list-wrapper"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></div></pre></td></tr></table></figure><p>让<code>bg-layer</code>有个向上回动的效果，当滚动时需要操作<code>bg-layer</code>层的<code>transform</code>外向的偏移，让它随着滚动，所以要监听滚动的距离。给scroll组件添加个<code>probeType</code>，在created时添加<code>probeType</code>和<code>listenScroll</code>属性，这样就可以实时监听scroll位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;scroll :probe-type=<span class="string">"probeType"</span> :listen-scroll=<span class="string">"listenScroll"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> :data=<span class="string">"songs"</span> ref=<span class="string">"list"</span>&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list-wrapper"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></div><div class="line"></div><div class="line">created () &#123;</div><div class="line">  <span class="keyword">this</span>.probeType = <span class="number">3</span></div><div class="line">  <span class="keyword">this</span>.listenScroll = <span class="literal">true</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>监听个scroll事件，首先要维护一个纵向滚动的值，在data里定义scrollY变量默认为0。</p><p><img src="http://oxkc6g4t4.bkt.clouddn.com/v37.png" alt="v37"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">scrollY</span>: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">    &#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  scroll (pos) &#123;</div><div class="line">    <span class="keyword">this</span>.scrollY = pos.y</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>给scrollY赋值就可以实时拿到scrollY的值。接着要做的是在滚动时拿到scrollY的值来设置bg-layer的偏移量。</p><p>设置bg-layer的滚动，watch scrollY。获取layer的<code>transform</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  scrollY (newY) &#123;</div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;newY&#125;</span>px,0)`</span></div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;newY&#125;</span>px,0)`</span></div><div class="line">  &#125;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure><p>发现个问题，滚动时图片还是会露出来，是因为bg-layer层的高度是100%。如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v38.png" alt="v38"></p><p>这里就要做个限制。bg-layer随着scroll滚动时并不是无限滚动的过程，只需要滚动到一个位置就行了。所以要设置它的最大的滚动距离。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line">  <span class="keyword">this</span>.imageHeight = <span class="keyword">this</span>.$refs.bgImage.clientHeight</div><div class="line">  <span class="comment">// 最小translateY值</span></div><div class="line">  <span class="keyword">this</span>.minTranslateY = -<span class="keyword">this</span>.imageHeight</div><div class="line">  <span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.imageHeight&#125;</span>px`</span></div><div class="line">    &#125;,</div><div class="line"><span class="attr">watch</span>: &#123;</div><div class="line">  scrollY (newY) &#123;</div><div class="line">    <span class="comment">// 最大滚动距离</span></div><div class="line">    <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>记录背景图的高度和最小translateY值，计算出最大滚动距离。</p><p>为了不让bg-layer滚动到顶部，只需要修改minTranslateY，这里定义个常量<code>RESERVED_HEIGHT</code>高度为40的偏移量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> RESERVED_HEIGHT = <span class="number">40</span></div><div class="line"></div><div class="line">mounted () &#123;</div><div class="line">  <span class="keyword">this</span>.imageHeight = <span class="keyword">this</span>.$refs.bgImage.clientHeight</div><div class="line">  <span class="keyword">this</span>.minTranslateY = -<span class="keyword">this</span>.imageHeight + RESERVED_HEIGHT</div><div class="line">  <span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.imageHeight&#125;</span>px`</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/V39.png" alt="V39"></p><p>红线圈出的部分就是<code>RESERVED_HEIGHT</code>的高度。</p><p>由图可以看出，当滚动到顶部时文字会遮住图片，实际效果是希望滚动到定不是图片会遮住文字。</p><p>bg-layer层的position为relative布局的，设置z-index为10就会发现图片会遮住文字，但又会发现这时图片的高度是不对的，图片完全遮住文字就没有刚才的效果了，这里需要修改z-index和图片的高度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      scrollY (newY) &#123;</div><div class="line">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">        <span class="keyword">let</span> zIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="comment">// 当滚动到顶部时</span></div><div class="line">        <span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</div><div class="line">      &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>这样跟随滚动的效果就实现，同时达到了滚动到顶部<code>overflow</code>是<code>hidden</code>的状态</p><h3 id="图片跟随滚动放大效果"><a href="#图片跟随滚动放大效果" class="headerlink" title="图片跟随滚动放大效果"></a>图片跟随滚动放大效果</h3><p>当鼠标下拉时，图片跟着有放大的效果，修改transform的scale，定义scale默认为1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      scrollY (newY) &#123;</div><div class="line">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">        <span class="keyword">let</span> zIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> scale = <span class="number">1</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="comment">// 计算scale的比例</span></div><div class="line">        <span class="keyword">const</span> percent = <span class="built_in">Math</span>.abs(newY / <span class="keyword">this</span>.imageHeight)</div><div class="line">        <span class="comment">// 往下拉时计算scale的值</span></div><div class="line">        <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</div><div class="line">          scale = <span class="number">1</span> + percent</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 当滚动到顶部时</span></div><div class="line">        <span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'transform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'webkitTransform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">      &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>鼠标往下拉时，图片也跟着往下有一点距离，它是无缝的，计算scale的值为<code>scale = 1 + percent</code>。背景图片的高度(this.imageHeight)乘以scale就等于增加newY的高度，所以图片的高度和newY的滚动是相契合的。</p><h3 id="图片跟随滚动高速模糊"><a href="#图片跟随滚动高速模糊" class="headerlink" title="图片跟随滚动高速模糊"></a>图片跟随滚动高速模糊</h3><p>当鼠标下拉时，希望图片有高速模糊的效果并且模糊效果随着图片向上滑时模糊度更大。定义变量blur，当newY&gt;0时设置blur的比例值，然后设置bg-image的filter的样式属性<code>backdrop-filter</code>（backdrio-filter是css高速模糊的属性）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      scrollY (newY) &#123;</div><div class="line">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">        <span class="keyword">let</span> zIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> scale = <span class="number">1</span></div><div class="line">        <span class="keyword">let</span> blur = <span class="number">0</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">const</span> percent = <span class="built_in">Math</span>.abs(newY / <span class="keyword">this</span>.imageHeight)</div><div class="line">        <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</div><div class="line">          scale = <span class="number">1</span> + percent</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 设置blur的值</span></div><div class="line">          blur = <span class="built_in">Math</span>.min(<span class="number">20</span> * percent, <span class="number">20</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置filter的模糊度</span></div><div class="line">        <span class="keyword">this</span>.$refs.filter.style[<span class="string">'backdrop-filter'</span>] = <span class="string">`blur(<span class="subst">$&#123;blur&#125;</span>px)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.filter.style[<span class="string">'webkitBackdrop-filter'</span>] = <span class="string">`blur(<span class="subst">$&#123;blur&#125;</span>px)`</span></div><div class="line">        <span class="comment">// 当滚动到顶部时</span></div><div class="line">        <span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'transform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'webkitTransform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><h2 id="实现返回键事件-click-quot-back-quot"><a href="#实现返回键事件-click-quot-back-quot" class="headerlink" title="实现返回键事件@click=&quot;back&quot;"></a>实现返回键事件<code>@click=&quot;back&quot;</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;music-list&quot;&gt;</div><div class="line">    &lt;div class=&quot;back&quot; @click=&quot;back&quot;&gt;</div><div class="line">      &lt;i class=&quot;icon-back&quot;&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    ....</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="实现背景图片里的按钮"><a href="#实现背景图片里的按钮" class="headerlink" title="实现背景图片里的按钮"></a>实现背景图片里的按钮</h2><p>随机播放全部按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;bg-image&quot; :style=&quot;bgStyle&quot; ref=&quot;bgImage&quot;&gt;</div><div class="line">      &lt;div class=&quot;play-wrapper&quot;&gt;</div><div class="line">        &lt;div class=&quot;play&quot;&gt;</div><div class="line">          &lt;i class=&quot;icon-play&quot;&gt;&lt;/i&gt;</div><div class="line">          &lt;span class=&quot;text&quot;&gt;随机播放全部&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;filter&quot; ref=&quot;filter&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>当数据加载完成时再显示按钮渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;play&quot; v-show=&quot;songs.length&gt;0&quot;&gt;</div></pre></td></tr></table></figure><p>当滚动到顶部时让随机播放全部按钮消失。</p><p>watch scrollY方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当滚动到顶部时</span></div><div class="line"><span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">  zIndex = <span class="number">10</span></div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">  <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">'none'</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">  <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="加载中效果"><a href="#加载中效果" class="headerlink" title="加载中效果"></a>加载中效果</h2><p>最后在scroll组件里注册loading组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;loading-container&quot; v-show=&quot;!songs.length&quot;&gt;</div><div class="line">    &lt;loading&gt;&lt;/loading&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接 &lt;a href=&quot;https://kakajing.github.io/2017/10/15/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8AVuex%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/&quot;&gt;Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;交互效果&quot;&gt;&lt;a href=&quot;#交互效果&quot; class=&quot;headerlink&quot; title=&quot;交互效果&quot;&gt;&lt;/a&gt;交互效果&lt;/h2&gt;&lt;h3 id=&quot;图片跟随滑动变小&quot;&gt;&lt;a href=&quot;#图片跟随滑动变小&quot; class=&quot;headerlink&quot; title=&quot;图片跟随滑动变小&quot;&gt;&lt;/a&gt;图片跟随滑动变小&lt;/h3&gt;&lt;p&gt;当歌曲列表往上滑动时，图片跟随滑动变小以展示更多歌曲数据，当往下拉时，图片跟着放大。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一</title>
    <link href="http://kakajing.github.io/2017/10/15/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8AVuex%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/"/>
    <id>http://kakajing.github.io/2017/10/15/Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一/</id>
    <published>2017-10-15T08:33:24.000Z</published>
    <updated>2017-10-25T09:41:32.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="歌手详情页开发"><a href="#歌手详情页开发" class="headerlink" title="歌手详情页开发"></a>歌手详情页开发</h1><p><strong>singer-detail.vue</strong>子组件开发及配置<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;singer-detail&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style scoped lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt;</div><div class="line">  .slide-enter-active, .slide-leave-active</div><div class="line">    transition: all 0.3s</div><div class="line"></div><div class="line">  .slide-enter, .slide-leave-to</div><div class="line">    transform: translate3d(100%, 0, 0)</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>需要在一级路由中嵌套二级路由，修改<strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">path</span>: <span class="string">'/singer'</span>,</div><div class="line">     <span class="attr">component</span>: Singer,</div><div class="line">     <span class="attr">children</span>: [</div><div class="line">       &#123;</div><div class="line">         <span class="attr">path</span>: <span class="string">':id'</span>,</div><div class="line">         <span class="attr">component</span>: SingerDetail</div><div class="line">       &#125;</div><div class="line">     ]</div><div class="line">   &#125;,</div></pre></td></tr></table></figure><p>使用<code>&lt;router-view&gt;&lt;/router-view&gt;</code>在singer.vue组件里挂载这个子路由<br><img src="http://oxkc6g4t4.bkt.clouddn.com/v24.png" alt="v24"></p><p>当点击列表元素时页面跳转至子路由，由于这个列表是基于listview实现的，所以在listview组件里添加<code>selectItem(item)</code>点击事件。listview是个基础组件，它的点击事件不会有任何逻辑相关的，做的事情仅仅是把这个事件触发出去，告诉外部我被点击了以及点击我的元素是什么，只有点击这个事件的人才会决定要做什么事。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v25.png" alt="v25"></p><blockquote><p> <code>$emit</code>：子组件改变父组件的值，通过on将父组件的事件绑定到子组件，在子组件中通过emit来触发<code>​$on</code>绑定的父组件事件</p></blockquote><p>实际情况下，有很多按钮在执行跳转之前，还会执行一系列方法，这时可使用<code>this.$router.push(location)</code> 来修改 url，完成跳转。接着在singer组件里监听这个事件，item在这其实是singer的实例</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v26.png" alt="v26"></p><p> 使用<code>&lt;transition&gt;&lt;/transition&gt;</code>给子路由singer-detail组件加个动画看上去更美观</p><p><strong>singer-detail.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;transition name=&quot;slide&quot;&gt;</div><div class="line">    &lt;music-list :songs=&quot;songs&quot; :title=&quot;title&quot; :bg-image=&quot;bgImage&quot;&gt;&lt;/music-list&gt;</div><div class="line">  &lt;/transition&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="初识vuex"><a href="#初识vuex" class="headerlink" title="初识vuex"></a>初识vuex</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>当你打算开发大型单页应用（SPA），会出现多个视图组件依赖同一个状态，来自不同视图的行为需要变更同一个状态。遇到以上情况时候，你就应该考虑使用Vuex了，它能把组件的共享状态抽取出来，当做一个全局单例模式进行管理。这样不管你在何处改变状态，都会通知使用该状态的组件做出相应修改。</p><p>简单来说，vuex 就是使用一个 store 对象来包含所有的应用层级状态，也就是数据的来源。当然如果应用比较庞大，我们可以将 store 模块化，也就是每个模块都有自己的 store。</p><h4 id="store-有四个属性"><a href="#store-有四个属性" class="headerlink" title="store 有四个属性"></a>store 有四个属性</h4><p>store 有四个属性：state， getters, mutations, actions</p><ul><li><p>state：简单说就是变量，也就是所谓的状态。</p></li><li><p>getters：存放一些公共函数供组件调用。</p></li><li><p>mutations：我们要改变 state 的一些方法，有点像是事件注册。</p><blockquote><p>一条重要的原则就是要记住 mutation 必须是同步函数。</p></blockquote></li><li><p>actions：管理触发条件。mutation 像事件注册，需要相应的触发条件。而 Action 就那个管理触发条件的。</p><blockquote><p>Action 类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。 </p></blockquote></li></ul><p>当 mutation 事件类型比较多的时候，我们可以使用常量替代 mutation 事件类型。同时把这些常量放在单独的文件（mutation-types.js）中可以让我们的代码合作者对整个 app 包含的 mutation 一目了然。</p><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>Vuex提供一些辅助函数帮助我们使用这些属性：</p><ul><li><p>mapState：当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。</p></li><li><p>mapGetters：仅仅是将 store 中的 getter 映射到局部计算属性。</p></li><li>mapMutations：将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</li><li>mapActions：将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）。</li></ul><h4 id="引入Vuex"><a href="#引入Vuex" class="headerlink" title="引入Vuex"></a>引入Vuex</h4><p>1、安装 vuex</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vuex --save</div></pre></td></tr></table></figure><p>2、新建一个store文件夹（这个不是必须的），并在文件夹下新建index.js文件，文件中引入vue和vuex。目录结构如下：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v28.png" alt="v28"></p><p><strong>index.js</strong>入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></div><div class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></div><div class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></div><div class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  actions,</div><div class="line">  getters,</div><div class="line">  state,</div><div class="line">  mutations,</div><div class="line">  <span class="attr">strict</span>: debug,</div><div class="line">  <span class="attr">plugins</span>: debug ? [createLogger()] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>3、在main.js 中引入新建的vuex文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  store,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="歌手数据的配置"><a href="#歌手数据的配置" class="headerlink" title="歌手数据的配置"></a>歌手数据的配置</h2><p>回归项目，在state定义singer变量，继而做一系列数据处理。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v27.png" alt="v27"></p><p> 当singer组件跳转时改变singer数据，通过mapMutations做对象映射，把mutation映射成方法名，把<code>setSinger</code>当做vue数据。</p><p><strong>singer.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">  selectSinger (singer) &#123;</div><div class="line">        <span class="keyword">this</span>.$router.push(&#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">`/singer/<span class="subst">$&#123;singer.id&#125;</span>`</span></div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">this</span>.setSinger(singer)</div><div class="line">      &#125;,</div><div class="line">  ...mapMutations(&#123;</div><div class="line">        <span class="attr">setSinger</span>: <span class="string">'SET_SINGER'</span></div><div class="line">      &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在singer-detail组件获取singer数据，通过mapGetters扩展到computed计算属性里，做完这层映射就可以在vue实例中挂载一个singer的属性，然后就可以拿到singer。</p><p><strong>singer-detail.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">  ...mapGetters([</div><div class="line">    <span class="string">'singer'</span></div><div class="line">  ])</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p><code>console.log(this.singer)</code>观察一下组件跳转的数据传递</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v29.png" alt="v29"></p><p>由此，通过vuex解决路由之间数据参数传递的问题。</p><h2 id="歌手详情数据抓取"><a href="#歌手详情数据抓取" class="headerlink" title="歌手详情数据抓取"></a>歌手详情数据抓取</h2><p>根据传入的singer抓取到歌手详情</p><p><strong>singer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingerDetail</span> (<span class="params">singerId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_track_cp.fcg'</span></div><div class="line"></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    <span class="attr">hostUin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">needNewCode</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">platform</span>: <span class="string">'h5page'</span>,</div><div class="line">    <span class="attr">order</span>: <span class="string">'listen'</span>,</div><div class="line">    <span class="attr">begin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">num</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">songstatus</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">g_tk</span>: <span class="number">5381</span>,</div><div class="line">    <span class="attr">singermid</span>: singerId</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> jsonp(url, data, options)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>singer-detail.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    created () &#123;</div><div class="line">      <span class="keyword">this</span>._getDetail()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      _getDetail () &#123;</div><div class="line">        getSingerDetail(<span class="keyword">this</span>.singer.id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.code === ERR_OK) &#123;</div><div class="line">            <span class="built_in">console</span>.log(res.data.list)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>获取到数据：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v30.png" alt="v30"></p><p> 这里发现个问题，在当前页面刷新获取不到数据，因为刷新是直接进入到子路由，之前并不知道歌手的相关信息是个空对象。在这里加个判断，也就是说如果在子路由刷新了，就让它会退到上级。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v31.png" alt="v31"></p><h4 id="歌手详情数据处理"><a href="#歌手详情数据处理" class="headerlink" title="歌手详情数据处理"></a>歌手详情数据处理</h4><p>除了歌手详情数据之外，还有歌单详情数据以及排行榜数据都包含歌曲数据，既然每个列表都有歌曲数据，那么就对歌曲数据进行抽象。</p><p><strong>common/js/song.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (&#123;id, mid, singer, name, album, duration, image, url&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id</div><div class="line">    <span class="keyword">this</span>.mid = mid</div><div class="line">    <span class="keyword">this</span>.singer = singer</div><div class="line">    <span class="keyword">this</span>.ablum = album</div><div class="line">    <span class="keyword">this</span>.duration = duration</div><div class="line">    <span class="keyword">this</span>.image = image</div><div class="line">    <span class="keyword">this</span>.url = url</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在每首歌曲都是musicdata里的数据，需要把这些数据提取成我们需要的部分构造成我们所需要的数据对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createSong</span> (<span class="params">musicData</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Song(&#123;</div><div class="line">    <span class="attr">id</span>: musicData.songid,</div><div class="line">    <span class="attr">mid</span>: musicData.songmid,</div><div class="line">    <span class="attr">singer</span>: filerSinger(musicData.singer),</div><div class="line">    <span class="attr">name</span>: musicData.songname,</div><div class="line">    <span class="attr">album</span>: musicData.albumname,</div><div class="line">    <span class="attr">duration</span>: musicData.interval,</div><div class="line">    <span class="attr">image</span>: <span class="string">`https://y.gtimg.cn/music/photo_new/T002R150x150M000<span class="subst">$&#123;musicData.albummid&#125;</span>.jpg?max_age=2592000`</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">`http://ws.stream.qqmusic.qq.com/<span class="subst">$&#123;musicData.songid&#125;</span>.m4a?fromtag=46`</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>singer是个数组，但我们需要的是字符串，数据可以直接运用在dom上，不需要额外再做处理。对singer进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filerSinger</span> (<span class="params">singer</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> ret = []</div><div class="line">  <span class="keyword">if</span> (!singer) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">  singer.forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</div><div class="line">    ret.push(s.name)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> ret.join(<span class="string">'/'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对歌手详情数据做最后的处理</p><p>   <img src="http://oxkc6g4t4.bkt.clouddn.com/v32.png" alt="v32"></p><h4 id="music-list组件开发"><a href="#music-list组件开发" class="headerlink" title="music-list组件开发"></a>music-list组件开发</h4><p>歌手详情页面、歌单详情页面、排行榜详情页面都是类似的，所以可以把这些类似的页面抽象成一个通用的业务组件<code>music-list.vue</code>。它们不同的是数据差异，这些差异可以通过props数据传入。</p><p><strong>music-list.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;music-list&quot;&gt;</div><div class="line">    &lt;div class=&quot;back&quot;&gt;</div><div class="line">      &lt;i class=&quot;icon-back&quot;&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;</div><div class="line">    &lt;div class=&quot;bg-image&quot;&gt;</div><div class="line">      &lt;div class=&quot;filter&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      bgImage: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;&apos;</div><div class="line">      &#125;,</div><div class="line">      songs: &#123;</div><div class="line">        type: Array,</div><div class="line">        default: []</div><div class="line">      &#125;,</div><div class="line">      title: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>music-list组件注册到singer-detail组件里，同时需要在music-list组件传入songs、title、bgImage三个参数，其中title和bgImage通过计算属性得到。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v33.png" alt="v33"></p><h4 id="传入title和bgImage的数据"><a href="#传入title和bgImage的数据" class="headerlink" title="传入title和bgImage的数据"></a>传入title和bgImage的数据</h4><p>效果图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v34.png" alt="v34"></p><h4 id="使用scroll组件做歌曲滚动列表"><a href="#使用scroll组件做歌曲滚动列表" class="headerlink" title="使用scroll组件做歌曲滚动列表"></a>使用scroll组件做歌曲滚动列表</h4><p>和music-list组件同理，把歌曲页面抽象成一个通用的基础组件<code>song-list.vue</code>。</p><p>song-list组件需要接收个songs数据，然后遍历songs。</p><p><strong>song-list.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;song-list&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;song in songs&quot; class=&quot;item&quot;&gt;</div><div class="line">        &lt;div class=&quot;content&quot;&gt;</div><div class="line">          &lt;h2 class=&quot;name&quot;&gt;&#123;&#123;song.name&#125;&#125;&lt;/h2&gt;</div><div class="line">          &lt;p class=&quot;desc&quot;&gt;&#123;&#123;getDesc(song)&#125;&#125;&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      songs: &#123;</div><div class="line">        type: Array,</div><div class="line">        default: []</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      getDesc (song) &#123;</div><div class="line">        return `$&#123;song.singer&#125; 。 $&#123;song.album&#125;`</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="展示歌曲数据"><a href="#展示歌曲数据" class="headerlink" title="展示歌曲数据"></a>展示歌曲数据</h4><p>在<code>music-list</code>组件里运用<code>song-list</code>，首先使用scroll组件包裹歌曲列表，为了控制它的样式包裹一个<code>class</code>为<code>song-list-wrapper</code>的<code>div</code>，注册<code>song-list</code>组件，传入<code>songs</code>数据，为了正确计算它的高度，在scroll组件传入songs作为它的数据。效果如下：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v35.png" alt="v35"></p><p> 滚动列表发现scroll的top值不对，根据不同浏览器大小背景图所占高度不一样，我们可以通过计算得到它。在mounted钩子里拿到scroll控制它的top值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line"><span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.$refs.bgImage.clientHeight&#125;</span>`</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>scroll组件的top就等于bgImage的高度。</p><p>通过css设置背景图的宽高比为70%占位，这样就得到了bgImage的高度。在图片加载之前就已经知道它的高度了，同样就可以设置scroll组件的top值。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v36.png" alt="v36"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;歌手详情页开发&quot;&gt;&lt;a href=&quot;#歌手详情页开发&quot; class=&quot;headerlink&quot; title=&quot;歌手详情页开发&quot;&gt;&lt;/a&gt;歌手详情页开发&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;singer-detail.vue&lt;/strong&gt;子组件开发及配置&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（三）：滚动列表开发和应用</title>
    <link href="http://kakajing.github.io/2017/10/12/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%BB%9A%E5%8A%A8%E5%88%97%E8%A1%A8%E5%BC%80%E5%8F%91%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>http://kakajing.github.io/2017/10/12/Vue音乐播放器开发（三）：滚动列表开发和应用/</id>
    <published>2017-10-12T12:17:04.000Z</published>
    <updated>2017-10-25T09:39:27.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌手页面开发"><a href="#歌手页面开发" class="headerlink" title="歌手页面开发"></a>歌手页面开发</h2><h3 id="歌手数据接口抓取"><a href="#歌手数据接口抓取" class="headerlink" title="歌手数据接口抓取"></a>歌手数据接口抓取</h3><a id="more"></a><p><strong>singer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'common/js/jsonp'</span></div><div class="line"><span class="keyword">import</span> &#123;commonParams, options&#125; <span class="keyword">from</span> <span class="string">'./config'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingerList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/v8.fcg'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    <span class="attr">channel</span>: <span class="string">'singer'</span>,</div><div class="line">    <span class="attr">page</span>: <span class="string">'list'</span>,</div><div class="line">    <span class="attr">key</span>: <span class="string">'all_all_all'</span>,</div><div class="line">    <span class="attr">pagesize</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">pagenum</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">hostUin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">platform</span>: <span class="string">'yqq'</span>,</div><div class="line">    <span class="attr">needNewCode</span>: <span class="number">0</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> jsonp(url, data, options)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>singer.vue</strong>获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</div><div class="line">  <span class="keyword">import</span> &#123;getSingerList&#125; <span class="keyword">from</span> <span class="string">'api/singer'</span></div><div class="line">  <span class="keyword">import</span> &#123;ERR_OK&#125; <span class="keyword">from</span> <span class="string">'api/config'</span></div><div class="line"></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    created() &#123;</div><div class="line">      <span class="keyword">this</span>._getSingerList()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      _getSingerList() &#123;</div><div class="line">        getSingerList().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.code === ERR_OK) &#123;</div><div class="line">            <span class="keyword">this</span>.singers = <span class="keyword">this</span>._normalizeSinger(res.data.list)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h3><p>获取到的数据发现并不是我想要的数据结构，那怎么处理请求获取到的数据？</p><p>思路：把歌手数据分做为两层数组，外层是ABCD为区分歌手的数组，另一层则是以字母为首相关的歌手(比如以A为首字母的歌手)的二级数组。<code>Findex</code>标识为ABCD，它是随机的，也没有热门的歌手数据。这里我把<code>Findex</code>做聚合，把相同的归类起来，其次把前10条数据作为热门数据提取出来，这样可以得到我想要的数据结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">_normalizeSinger(list) &#123;</div><div class="line">        <span class="keyword">let</span> map = &#123;</div><div class="line">          <span class="attr">hot</span>: &#123;</div><div class="line">            <span class="attr">title</span>: HOT_NAME,</div><div class="line">            <span class="attr">items</span>: []</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (index &lt; HOT_SINGER_LEN) &#123;</div><div class="line">            map.hot.items.push(<span class="keyword">new</span> Singer(&#123;</div><div class="line">              <span class="attr">name</span>: item.Fsinger_name,</div><div class="line">              <span class="attr">id</span>: item.Fsinger_mid</div><div class="line">            &#125;))</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">const</span> key = item.Findex</div><div class="line">          <span class="keyword">if</span> (!map[key]) &#123;</div><div class="line">            map[key] = &#123;</div><div class="line">              <span class="attr">title</span>: key,</div><div class="line">              <span class="attr">items</span>: []</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          map[key].items.push(<span class="keyword">new</span> Singer(&#123;</div><div class="line">            <span class="attr">name</span>: item.Fsinger_name,</div><div class="line">            <span class="attr">id</span>: item.Fsinger_mid</div><div class="line">          &#125;))</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">// 为了得到有序列表，我们需要处理 map</span></div><div class="line">        <span class="keyword">let</span> ret = []</div><div class="line">        <span class="keyword">let</span> hot = []</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> map) &#123;</div><div class="line">          <span class="keyword">let</span> val = map[key]</div><div class="line">          <span class="keyword">if</span> (val.title.match(<span class="regexp">/[a-zA-Z]/</span>)) &#123;</div><div class="line">            ret.push(val)</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.title === HOT_NAME) &#123;</div><div class="line">            hot.push(val)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        ret.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">return</span> a.title.charCodeAt(<span class="number">0</span>) - b.title.charCodeAt(<span class="number">0</span>)</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">return</span> hot.concat(ret)</div><div class="line">      &#125;</div></pre></td></tr></table></figure><h3 id="歌手列表-—-滚动列表组件开发"><a href="#歌手列表-—-滚动列表组件开发" class="headerlink" title="歌手列表 — 滚动列表组件开发"></a>歌手列表 — 滚动列表组件开发</h3><p>列表组件也可以在其他地方使用，所以把它作为基础组件增加它的通用性。</p><p><strong>listview.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;scroll class=&quot;listview&quot; :data=&quot;data&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li class=&quot;list-group&quot; v-for=&quot;group in data&quot;&gt;</div><div class="line">        &lt;h2 class=&quot;list-group-title&quot;&gt;&#123;&#123;group.title&#125;&#125;&lt;/h2&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li class=&quot;list-group-item&quot; v-for=&quot;item in group.items&quot;&gt;</div><div class="line">            &lt;img class=&quot;avatar&quot; :src=&quot;item.avatar&quot;&gt;</div><div class="line">            &lt;span class=&quot;name&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/scroll&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import Scroll from &apos;base/scroll/scroll&apos;</div><div class="line"></div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      data: &#123;</div><div class="line">        type: Array,</div><div class="line">        default: []</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      Scroll</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>引入singer.vue组件并渲染到页面上，同时实现列表滚动。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v18.png" alt="v18"></p><p> 还有两个部分：右侧快速入口、滚动的时候会有固定的字母（title）显示列表上方</p><h3 id="右侧快速入口"><a href="#右侧快速入口" class="headerlink" title="右侧快速入口"></a>右侧快速入口</h3><p>右侧快速入口实际上就是以字母开头的title。首先构造一个可以被遍历的数组数据。</p><h4 id="获取右侧快速入口的列表"><a href="#获取右侧快速入口的列表" class="headerlink" title="获取右侧快速入口的列表"></a>获取右侧快速入口的列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;scroll class=&quot;listview&quot; :data=&quot;data&quot;&gt;</div><div class="line">    &lt;ul&gt;...&lt;/ul&gt;</div><div class="line"> &lt;div class=&quot;list-shortcut&quot;&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li class=&quot;item&quot; v-for=&quot;item in shortcutList&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/scroll&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">  ...</div><div class="line">  </div><div class="line">  computed: &#123;</div><div class="line">      shortcutList() &#123;</div><div class="line">        return this.data.map((group) =&gt; &#123;</div><div class="line">          return group.title.substr(0, 1)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="实现左右侧的交互-右侧栏滚动事件"><a href="#实现左右侧的交互-右侧栏滚动事件" class="headerlink" title="实现左右侧的交互(右侧栏滚动事件)"></a>实现左右侧的交互(右侧栏滚动事件)</h4><h5 id="touchstart点击事件"><a href="#touchstart点击事件" class="headerlink" title="@touchstart点击事件"></a><code>@touchstart</code>点击事件</h5><p>显示右侧入口栏仅仅是个dom，并没有其他交互行为。新建<code>@touchstart</code>点击事件，点击这个事件后滚动到相应的元素，那就要先知道滚到第几个元素才能知道左侧第几个组(group)，所以点的时候要获取到这个元素的索引，获取索引<code>:data-index=&quot;index&quot;</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">onShortcutTouchStart(e) &#123;</div><div class="line">  <span class="keyword">let</span> anchorIndex = getData(e.target, <span class="string">'index'</span>)</div><div class="line">  <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[anchorIndex], <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="touchMove事件"><a href="#touchMove事件" class="headerlink" title="@touchMove事件"></a><code>@touchMove</code>事件</h5><p>实现点击鼠标拖动右侧栏左侧歌手也跟着滚动到相应位置，监听<code>@touchMove</code>事件。要知道从touchstart到touchMove滚动的位置，计算当前位置和一开始滚动位置的差来算出滚动到第几个元素。在touchstart的时候记录当前的y值y1（<code>firstTouch.pageY</code>），然后在touchMove的时候又获取touch到的y值y2。</p><p>要有一个属性保存firstTouch的pageY位置，为了方便在两个函数之间相互获取这个数据，在created定义个touch对象（我们并不需要观测touch的变化，所以这里在created里定义）。</p><p>&gt;</p><blockquote><p><code>@touchmove.stop.prevent</code>的stop是为阻止事件向上冒泡。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">onShortcutTouchStart(e) &#123;</div><div class="line">  <span class="keyword">let</span> anchorIndex = getData(e.target, <span class="string">'index'</span>)</div><div class="line">  <span class="keyword">let</span> firstTouch = e.touches[<span class="number">0</span>]</div><div class="line">  <span class="comment">// 当前pageY值</span></div><div class="line">  <span class="keyword">this</span>.touch.y1 = firstTouch.pageY</div><div class="line">  <span class="comment">// 当前索引</span></div><div class="line">  <span class="keyword">this</span>.touch.anchorIndex = anchorIndex</div><div class="line">  <span class="keyword">this</span>._scrollTo(anchorIndex)</div><div class="line">&#125;,</div><div class="line">onShortcutTouchMove(e) &#123;</div><div class="line">  <span class="keyword">let</span> firstTouch = e.touches[<span class="number">0</span>]</div><div class="line">  <span class="keyword">this</span>.touch.y2 = firstTouch.pageY</div><div class="line">  <span class="comment">// y轴的偏移（偏移了几个锚点）</span></div><div class="line">  <span class="keyword">let</span> delta = (<span class="keyword">this</span>.touch.y2 - <span class="keyword">this</span>.touch.y1) / ANCHOR_HEIGHT | <span class="number">0</span></div><div class="line">  <span class="comment">// 获取touchmove时候滚动到的位置</span></div><div class="line">  <span class="keyword">let</span> anchorIndex = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.touch.anchorIndex) + delta</div><div class="line">  <span class="keyword">this</span>._scrollTo(anchorIndex)</div><div class="line">&#125;,</div><div class="line"> _scrollTo (index) &#123;</div><div class="line">   <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h4 id="左右联动"><a href="#左右联动" class="headerlink" title="左右联动"></a>左右联动</h4><p>根据左侧滚动右侧也滚动到相应的位置，同时滚动的位置字母显示高亮。比如滚动到C位置的时候C为高亮显示。</p><p>想要左右联动的话，首先必须知道当前滚动的时候右侧知道滚动的位置，要有一个变量记录滚动的位置也就是y轴的位置，根据实时滚动的位置计算我的位置落在哪个区间，所以要实时监听y轴的位置。这里要对scroll组件做一些拓展。</p><p><strong>scroll.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监听滚动事件</span></div><div class="line">listenScroll: &#123;</div><div class="line">  <span class="attr">type</span>: <span class="built_in">Boolean</span>,</div><div class="line">  <span class="attr">default</span>: <span class="literal">false</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>这里不需要关心它的滚动位置，所以default设置为false，如果是true的话，在初始化scroll的时候要加个逻辑，监听scroll的滚动事件从而触发scroll事件，这样就可以拿到它的位置，pos是个对象，包含x轴和y轴的属性。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v19.png" alt="v19"></p><p>在listview组件里实现滚动事件</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v20.png" alt="v20"></p><p>定义两个观测数据：</p><ul><li><p>scrollY：记录实时滚动的位置</p></li><li><p>currentIndex：当前显示的位置（currentIndex对应哪个谁谁就高亮）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">scrollY</span>: <span class="number">-1</span>,</div><div class="line">    <span class="attr">currentIndex</span>: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>要知道scroll落在哪个位置，首先这个列表的每个group都有高度，先计算每个group的高度。当data发生变化的时候要延迟计算它的高度，这里还要watch data的变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  _calculateHeight() &#123;</div><div class="line">        <span class="keyword">this</span>.listHeight = []</div><div class="line">        <span class="keyword">const</span> list = <span class="keyword">this</span>.$refs.listGroup</div><div class="line">        <span class="keyword">let</span> height = <span class="number">0</span></div><div class="line">        <span class="keyword">this</span>.listHeight.push(height)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">          <span class="keyword">let</span> item = list[i]</div><div class="line">          <span class="comment">// item是个dom，用clientHeight获取它的高度</span></div><div class="line">          height += item.clientHeight</div><div class="line">          <span class="keyword">this</span>.listHeight.push(height)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;,</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="attr">watch</span>: &#123;</div><div class="line">  data() &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>._calculateHeight()</div><div class="line">    &#125;, <span class="number">20</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有了listHeight，就方便观察scrollY变化时，scrollY和listHeight做对比就知道它落在第几个区间，从而就得到currentIndex。<br>观测scrollY</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  scrollY(newY) &#123;</div><div class="line">        <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listHeight.length; i++) &#123;</div><div class="line">          <span class="keyword">let</span> height1 = listHeight[i]</div><div class="line">          <span class="keyword">let</span> height2 = listHeight[i + <span class="number">1</span>]</div><div class="line">          <span class="keyword">if</span> (!height2 || (-newY &gt; height1 &amp;&amp; -newY &lt; height2)) &#123;</div><div class="line">            <span class="keyword">this</span>.currentIndex = i</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.currentIndex)</div><div class="line">            <span class="keyword">return</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.currentIndex = <span class="number">0</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>滚动时出现问题，发现监听不到在swipe的情况下的scroll事件，想要监听这种实时滚动的话就不截流这种方式，需要改变probeType的值，默认是1改成3。</p><blockquote><p>probeType: <code>1</code> 滚动的时候会派发scroll事件，会截流。<code>2</code>滚动的时候实时派发scroll事件，不会截流。 <code>3</code>除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件</p></blockquote><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v21.png" alt="v21"></p><p> 有了currentIndex，需要右侧栏有个active的效果，效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v22.png" alt="v22"></p><p> 当滚动到最底部的时候newY的值是大于0的，值就为负数它就永远不会落到这个区间。我们可以拆分为三种情况：歌手列表滚动到最顶部时、中间时和最底部时，最顶部时newY是大于0的，最底部时newY可能大于height2，也就是说newY值可以大于最后一个元素的上限。这样就可以在什么情况下应该怎么计算currentIndex，保证实时滚动currentIndex能计算出应该落到的位置。</p><p>对watch scrollY做些相应的改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scrollY(newY) &#123;</div><div class="line">       <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight</div><div class="line">       <span class="comment">// 当滚动到顶部，newY&gt;0</span></div><div class="line">       <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">this</span>.currentIndex = <span class="number">0</span></div><div class="line">         <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 在中间部分滚动</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listHeight.length - <span class="number">1</span>; i++) &#123;</div><div class="line">         <span class="keyword">let</span> height1 = listHeight[i]</div><div class="line">         <span class="keyword">let</span> height2 = listHeight[i + <span class="number">1</span>]</div><div class="line">         <span class="keyword">if</span> (-newY &gt; height1 &amp;&amp; -newY &lt; height2 ) &#123;</div><div class="line">           <span class="keyword">this</span>.currentIndex = i</div><div class="line">           <span class="keyword">return</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 当滚动到底部，且-newY大于最后一个元素的上限</span></div><div class="line">       <span class="keyword">this</span>.currentIndex = <span class="number">0</span></div><div class="line">     &#125;</div></pre></td></tr></table></figure><p>当点击右侧快速入口时可以切换左侧的位置，但是高亮并没有随之改动，是因为高亮并不是根据点击的位置，而是根据scrollY计算而来的，scrollY的变化又是根据scroll事件实时更新的，调用<code>_scrollTo(index)</code>方法让它滚动到相应的位置，但是这个滚动并没有触发滚动事件，所以监听不到scrollY的变化，需要手动去改变scrollY的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_scrollTo(index) &#123;</div><div class="line">  <span class="keyword">this</span>.scrollY = -<span class="keyword">this</span>.listHeight[index]</div><div class="line">  <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>解决右侧栏边界问题</p><p>为了页面好看右侧栏的上下两头分别多出一些边缘，但是这两个边缘点击是无意义的，不会触发任何滚动事件，做些逻辑处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_scrollTo (index) &#123;</div><div class="line">      <span class="comment">// 解决右侧栏边界问题</span></div><div class="line">      <span class="keyword">if</span> (!index &amp;&amp; index !== <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">    </div><div class="line">      <span class="keyword">this</span>.scrollY = -<span class="keyword">this</span>.listHeight[index]</div><div class="line">      <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>解决右侧栏滑动到最顶部直接跳到底部的问题</p><p><code>console.log(index)</code>发现滑动到最顶部是负值，最底部是无限大的值，是因为<code>touchmove</code>一直在执行，它的y值一直在变大，同样<code>anchorIndex</code>的值也变超。对于滑动顶部或底部做些边界条件处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">_scrollTo (index) &#123;</div><div class="line">       <span class="comment">// 解决右侧栏边界问题</span></div><div class="line">       <span class="keyword">if</span> (!index &amp;&amp; index !== <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">     </div><div class="line">       <span class="comment">// 解决右侧栏滑动到最顶部直接跳到底部的问题</span></div><div class="line">       <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">         index = <span class="number">0</span></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; <span class="keyword">this</span>.listHeight.length - <span class="number">2</span>) &#123;</div><div class="line">         index = <span class="keyword">this</span>.listHeight.length - <span class="number">2</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">this</span>.scrollY = -<span class="keyword">this</span>.listHeight[index]</div><div class="line">       <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line">     &#125;,</div></pre></td></tr></table></figure><h3 id="滚动固定标题实现-fixed-title"><a href="#滚动固定标题实现-fixed-title" class="headerlink" title="滚动固定标题实现(fixed-title)"></a>滚动固定标题实现(fixed-title)</h3><p>fixed-title：当我们滚动到某个区块，列表顶部会显示对应的名称，其实和右侧显示高亮有异曲同工之妙，不同的是dom实现不一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;list-fixed&quot; v-show=&quot;fixedTitle&quot;&gt;</div><div class="line">&lt;h1 class=&quot;fixed-title&quot;&gt;&#123;&#123;fixedTitle&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">     fixedTitle () &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.scrollY &gt; <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="string">''</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.currentIndex] ? <span class="keyword">this</span>.data[<span class="keyword">this</span>.currentIndex].title : <span class="string">''</span></div><div class="line">     &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure><p>当滚动时左侧列表顶部需要有一个fixed-title，当两个title重合的时候要有一个title往上顶的效果，在data里定义一个diff。diff表示滚动到的区块的上限和当前滚动位置的滚动差。</p><p>观测scrollY做些改变：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v23.png" alt="v23"></p><p>观测diff的变化来设置fixed-tit1e的偏移。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  diff(newVal) &#123;</div><div class="line">        <span class="keyword">let</span> fixedTop = (newVal &gt; <span class="number">0</span> &amp;&amp; newVal &lt; TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fixedTop === fixedTop) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.fixedTop = fixedTop</div><div class="line">        <span class="keyword">this</span>.$refs.fixed.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;fixedTop&#125;</span>px,0)`</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>歌手列表是异步获取的，这里也要使用loading效果，listview里引入loading组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;loading-container&quot; v-show=&quot;!data.length&quot;&gt;</div><div class="line">    &lt;loading&gt;&lt;/loading&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>左右联动思路：想要达到左右联动，首先需要实时知道滚动位置，根据滚动位置计算出当前位置是落到哪个group的区间，相应的算出右边哪个索引应该高亮，结合vue的watch观测数据变化。</p><h3 id="具体源代码"><a href="#具体源代码" class="headerlink" title="具体源代码"></a>具体源代码</h3><p>参考：<a href="https://github.com/kakajing/vue-music" target="_blank" rel="external">https://github.com/kakajing/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌手页面开发&quot;&gt;&lt;a href=&quot;#歌手页面开发&quot; class=&quot;headerlink&quot; title=&quot;歌手页面开发&quot;&gt;&lt;/a&gt;歌手页面开发&lt;/h2&gt;&lt;h3 id=&quot;歌手数据接口抓取&quot;&gt;&lt;a href=&quot;#歌手数据接口抓取&quot; class=&quot;headerlink&quot; title=&quot;歌手数据接口抓取&quot;&gt;&lt;/a&gt;歌手数据接口抓取&lt;/h3&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
