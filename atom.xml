<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余鸢</title>
  
  <subtitle>每天学习一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kakajing.github.io/"/>
  <updated>2018-01-16T13:18:58.657Z</updated>
  <id>http://kakajing.github.io/</id>
  
  <author>
    <name>余鸢</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后台管理开发（二）：axios使用及用户页面</title>
    <link href="http://kakajing.github.io/2018/10/10/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Aaxios%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%94%A8%E6%88%B7%E9%A1%B5%E9%9D%A2/"/>
    <id>http://kakajing.github.io/2018/10/10/后台管理开发（二）：axios使用及用户页面/</id>
    <published>2018-10-10T15:34:05.000Z</published>
    <updated>2018-01-16T13:18:58.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户页面"><a href="#用户页面" class="headerlink" title="用户页面"></a>用户页面</h2><p>用户页面基础代码展示，<strong>user.vue</strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;user-wrap&quot;&gt;</div><div class="line">    &lt;breadcr :meName=&quot;meName&quot;&gt;&lt;/breadcr&gt;</div><div class="line">    </div><div class="line">  &lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot;&gt;</div><div class="line">      &lt;el-form-item label=&quot;姓名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.name$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item label=&quot;用户名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.username$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;small&quot; @click=&quot;search&quot;&gt;搜索&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;el-icon-plus&quot; @click=&quot;showAndUser&quot;&gt;添加用户&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">    &lt;/el-form&gt;</div><div class="line">    </div><div class="line">    &lt;el-table :data=&quot;users&quot; highlight-current-row @current-change=&quot;currentChange&quot; height=&quot;500&quot; border</div><div class="line">              style=&quot;width: 100%&quot;&gt;</div><div class="line">      &lt;el-table-column sortable prop=&quot;name&quot; label=&quot;姓名&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column sortable prop=&quot;username&quot; label=&quot;用户名&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;是否启用&quot; :formatter=&quot;formatterColumn&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop=&quot;action&quot; label=&quot;操作&quot; align=&quot;center&quot;&gt;</div><div class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</div><div class="line">          &lt;el-button size=&quot;mini&quot; @click=&quot;showEditUser(scope.$index,scope.row)&quot; plain&gt;编辑&lt;/el-button&gt;</div><div class="line">          &lt;el-button size=&quot;mini&quot; icon=&quot;el-icon-edit&quot; type=&quot;info&quot; plain @click=&quot;showAuthorized&quot;&gt;用户赋权&lt;/el-button&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">      &lt;/el-table-column&gt;</div><div class="line">    &lt;/el-table&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><p>接下来依次分析<strong>user.vue</strong>的代码。</p><h3 id="路径展示区"><a href="#路径展示区" class="headerlink" title="路径展示区"></a>路径展示区</h3><p>在用户页面里首先需要展示当前页面的路径，可以快速返回之前的页面。</p><h4 id="编写基础组件breadcr-vue"><a href="#编写基础组件breadcr-vue" class="headerlink" title="编写基础组件breadcr.vue"></a>编写基础组件breadcr.vue</h4><p>这里用到element-ui的Breadcrumb 面包屑。考虑到在其他页面也要用到次此组件，所以我把Breadcrumb组件抽取出来做基础组件，方便其他页面使用。</p><p>组件路径在<code>/base/breadcr/breadcr.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;breadcr-wrap&quot;&gt;</div><div class="line">    &lt;el-breadcrumb separator-class=&quot;el-icon-arrow-right&quot;&gt;</div><div class="line">      &lt;el-breadcrumb-item :to=&quot;&#123; path: &apos;/&apos; &#125;&quot;&gt;首页&lt;/el-breadcrumb-item&gt;</div><div class="line">      &lt;el-breadcrumb-item :to=&quot;&#123; path: &apos;/&apos; &#125;&quot;&gt;系统设置&lt;/el-breadcrumb-item&gt;</div><div class="line">      &lt;el-breadcrumb-item&gt;&#123;&#123;meName&#125;&#125;&lt;/el-breadcrumb-item&gt;</div><div class="line">    &lt;/el-breadcrumb&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>在Vue里父组件向子组件中传送数据是通过props实现的。所以我在props里定义属性<code>meName</code>，默认为空，表示菜单名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">      <span class="attr">meName</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">default</span>: <span class="string">''</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>在user.vue组件里注册breadcr组件，并使用它。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class="user-wrap"&gt;</div><div class="line">    &lt;breadcr&gt;&lt;/breadcr&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">export default&#123;</div><div class="line">  components: &#123;</div><div class="line">      Breadcr</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以用 <code>v-bind</code> 来动态地将 props 绑定到父组件的数据。每当父组件的数据变化时，该变化也会传导给子组件。<code>v-bind</code>的缩写语法是<code>:</code></p><p>在data里声明<code>meName</code>并赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;breadcr :meName=<span class="string">"meName"</span>&gt;&lt;/breadcr&gt;</div><div class="line"></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line"><span class="attr">meName</span>: <span class="string">'用户管理'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>页面展示如下(红框部分)：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h5.png" alt="5"></p><h3 id="搜索区"><a href="#搜索区" class="headerlink" title="搜索区"></a>搜索区</h3><p>搜索区使用element-ui的Form表单实现，这里使用行内表单，可以把几个表单放置在一行内，以此来实现我想要的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot;&gt;</div><div class="line">      &lt;el-form-item label=&quot;姓名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.name$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item label=&quot;用户名&quot;&gt;</div><div class="line">        &lt;el-input size=&quot;small&quot; v-model=&quot;searchForm.username$LIKE&quot;&gt;&lt;/el-input&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;small&quot;&gt;搜索&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">      &lt;el-form-item&gt;</div><div class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;el-icon-plus&quot;&gt;添加用户&lt;/el-button&gt;</div><div class="line">      &lt;/el-form-item&gt;</div><div class="line">&lt;/el-form&gt;</div></pre></td></tr></table></figure><p><code>:inline</code>设置为<code>true</code>可以让表单域变为行内的表单域，<code>:model</code>表示绑定要输入的搜索数据，所以要在data里搜索数据对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 搜索数据</span></div><div class="line">    searchForm: &#123;</div><div class="line">      <span class="attr">name$LIKE</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">username$LIKE</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>页面效果如下（红框部分）：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h6.png" alt="6"></p><h3 id="用户表格区"><a href="#用户表格区" class="headerlink" title="用户表格区"></a>用户表格区</h3><p>使用element-ui的Table表格展示用户数据。<code>data</code>表示要显示的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;el-table :data=<span class="string">""</span> highlight-current-row @current-change=<span class="string">"currentChange"</span> height=<span class="string">"500"</span> border</div><div class="line">              style=<span class="string">"width: 100%"</span>&gt;</div><div class="line">      &lt;el-table-column sortable prop="name" label="姓名" align="center"&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column sortable prop="username" label="用户名" align="center"&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop="status" label="是否启用" :formatter="formatterColumn" align="center"&gt;&lt;/el-table-column&gt;</div><div class="line">      &lt;el-table-column prop="action" label="操作" align="center"&gt;</div><div class="line">        &lt;template slot-scope="scope"&gt;</div><div class="line">          &lt;el-button size="mini" @click="showEditUser(scope.$index,scope.row)" plain&gt;编辑&lt;/el-button&gt;</div><div class="line">          &lt;el-button size="mini" icon="el-icon-edit" type="info" plain @click="showAuthorized"&gt;用户赋权&lt;/el-button&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">      &lt;/el-table-column&gt;</div><div class="line">&lt;/el-table&gt;</div></pre></td></tr></table></figure><p><code>highlight-current-row</code>表示高亮当前行，同时当表格的当前行发生变化的时候会触发<code>@current-change</code>事件,在data里定义<code>currentRow</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">currentRow</span>: <span class="literal">null</span>,</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  currentChange (val) &#123;</div><div class="line">   <span class="keyword">this</span>.currentRow = val</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="跨域请求数据"><a href="#跨域请求数据" class="headerlink" title="跨域请求数据"></a>跨域请求数据</h2><h3 id="使用axios跨域请求数据"><a href="#使用axios跨域请求数据" class="headerlink" title="使用axios跨域请求数据"></a>使用axios跨域请求数据</h3><p>不同域名之间的访问，需要跨域才能正确请求。我们的项目是前后端分离，存在跨域问题。Vue-cli 创建的项目，可以直接利用 Node.js 代理服务器，实现跨域请求，我使用axios解决跨域。</p><h4 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h4><p>vue2.0官方推荐axios进行ajax请求。axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 <a href="http://baike.baidu.com/link?url=iUceAfgyfJOacUtjPgT4ifaSOxDULAc_MzcLEOTySflAn5iLlHfMGsZMtthBm5sK4y6skrSvJ1HOO2qKtV1ej_" target="_blank" rel="external">CSRF/XSRF</a></li></ul><p>废话不多说，直接开始使用</p><h4 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure><h4 id="封装axios方法"><a href="#封装axios方法" class="headerlink" title="封装axios方法"></a>封装axios方法</h4><p>一般情况下，我们会用到的方法有：GET，POST，PUT，PATCH，DELETE，封装方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vue()</div><div class="line"></div><div class="line">axios.defaults.withCredentials = <span class="literal">true</span></div><div class="line">axios.defaults.baseURL = <span class="string">'/api'</span></div><div class="line">axios.create(&#123;</div><div class="line">  <span class="attr">headers</span>: &#123;<span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 添加一个响应拦截器</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (response.data &amp;&amp; response.data.errcode) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(response.data.errcode) === <span class="number">40001</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'未登录'</span>)</div><div class="line">      <span class="comment">// 未登录</span></div><div class="line">      v.$emit(<span class="string">'go'</span>, <span class="string">'/'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> response</div><div class="line">&#125;, error =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> POST = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.post(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.get(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(res.data))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> PUT = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.put(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DELETE = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.delete(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> PATCH = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> axios.patch(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><p>在config/index.js文件中修改dev中的proxyTable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">      <span class="string">'/api'</span>: &#123;</div><div class="line">        <span class="attr">target</span>: <span class="string">'http://localhost:8080'</span>,</div><div class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">pathRewrite</span>: &#123;</div><div class="line">          <span class="string">'^/api'</span>: <span class="string">'/'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 ‘/api’ 为匹配项，target 为被请求的地址，因为在 ajax 的 url 中加了前缀 ‘/api’，而原本的接口是没有这个前缀的，所以需要<strong>通过 pathRewrite 来重写地址，将前缀 ‘/api’ 转为 ‘/‘</strong>，如果本身的接口地址就有 ‘/api’ 这种通用前缀，就可以把 pathRewrite 删掉。</p><h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><p>这里我把用户相关的操作代码放在api文件下，使用时方便查找一目了然。</p><p><strong>api/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> API <span class="keyword">from</span> <span class="string">'./index'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/user'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">pageIndex</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">sortField</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">sortOrder</span>: <span class="string">''</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> API.GET(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">JSON</span>.parse(res))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在引入封装好的axios文件，执行GET请求，给出url和所需参数，url是接口地址。这里<code>url=&#39;/user&#39;</code>而不是<code>url=&#39;/api/user&#39;</code>，是因为我在index.js文件里设置<code>axios.defaults.baseURL = &#39;/api&#39;</code>，使用 axios可以全局配置一个 <code>baseURL</code>，所以无需再加上<code>/api</code>。</p><p><strong>user.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getUser &#125; <span class="keyword">from</span> <span class="string">'api/user'</span></div><div class="line"><span class="keyword">import</span> &#123; statusCode &#125; <span class="keyword">from</span> <span class="string">'common/js/config'</span></div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">      _getUerList () &#123;</div><div class="line">        getUser().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.status === statusCode) &#123;</div><div class="line">         <span class="comment">//   console.log(res.result.data)</span></div><div class="line">            <span class="keyword">this</span>.users = res.result.data</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>引入api/user.js文件，调用<code>getUser()</code>方法，判断response的状态码，如果正确，控制台输出用户列表，截图如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h7.png" alt="7"></p><p> 想要在页面展示数据，首先在data中定义<code>users</code>对象，默认为<code>[]</code>，同时设置<code>:data=&quot;users&quot;</code>，在table表格内填充数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;el-table :data=<span class="string">"users"</span> highlight-current-row @current-change=<span class="string">"currentChange"</span> height=<span class="string">"500"</span> border style=<span class="string">"width: 100%"</span>&gt;</div><div class="line"></div><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">users</span>: []</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>截图如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h8.png" alt="8"></p><p> 用户数据成功展示，完美~！ </p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>前面已经创建搜索数据对象，接下来对搜索按钮进行操作，点击搜索按钮触发search事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-form-item&gt;</div><div class="line">   &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;small&quot; @click=&quot;search&quot;&gt;搜索&lt;/el-button&gt;</div><div class="line">&lt;/el-form-item&gt;</div></pre></td></tr></table></figure><p>在api/user.js里创建<code>searchUser()</code>，调用GET方法</p><p><strong>api/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">searchUser</span> (<span class="params">queryParams, queryParamsIndex</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/user'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, queryParams, queryParamsIndex)</div><div class="line">  <span class="keyword">return</span> API.GET(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">JSON</span>.parse(res))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样user.vue引入<code>searchUser()</code>方法。这里需要注意下，因为后台给出的数据与所得出的数据不同，需要先对数据处理得出我们想要的数据结构。数据处理方法可能会在其他组件中用到，所以我把它放在common包下，代码如下：</p><p>common/js/utils.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">encodeQueryParam</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> queryParam = &#123;&#125;</div><div class="line">  <span class="keyword">let</span> index = <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> temp = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">in</span> data) &#123;</div><div class="line">    <span class="keyword">if</span> (data[f] === <span class="string">''</span>) <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> (f.indexOf(<span class="string">'$LIKE'</span>) !== <span class="number">-1</span> &amp;&amp; data[f].indexOf(<span class="string">'%'</span>) === <span class="number">-1</span>) temp = <span class="string">'%'</span> + data[f] + <span class="string">'%'</span></div><div class="line">    <span class="keyword">if</span> (f.indexOf(<span class="string">'$START'</span>) !== <span class="number">-1</span>) temp = <span class="string">'%'</span> + data[f]</div><div class="line">    <span class="keyword">if</span> (f.indexOf(<span class="string">'$END'</span>) !== <span class="number">-1</span>) temp = data[f] + <span class="string">'%'</span></div><div class="line">    queryParam[<span class="string">'terms['</span> + (index) + <span class="string">'].column'</span>] = f</div><div class="line">    queryParam[<span class="string">'terms['</span> + (index) + <span class="string">'].value'</span>] = temp</div><div class="line">    temp = <span class="string">''</span></div><div class="line">    index++</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> queryParam</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>user.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; encodeQueryParam &#125; <span class="keyword">from</span> <span class="string">'common/js/utils'</span>  </div><div class="line"></div><div class="line"> search () &#123;</div><div class="line">     <span class="keyword">this</span>.total = <span class="number">0</span></div><div class="line">     <span class="keyword">this</span>.pageIndex = <span class="number">1</span></div><div class="line">     <span class="keyword">this</span>.searchUser()</div><div class="line">   &#125;,</div><div class="line">searchUser () &#123;</div><div class="line">       <span class="keyword">let</span> that = <span class="keyword">this</span></div><div class="line">       <span class="keyword">let</span> queryParams = &#123;</div><div class="line">         <span class="attr">name</span>: encodeQueryParam(that.searchForm)</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">let</span> queryParamsPage = &#123;</div><div class="line">         <span class="attr">pageIndex</span>: that.pageIndex,</div><div class="line">         <span class="attr">pageSize</span>: that.pageSize,</div><div class="line">         <span class="attr">sortField</span>: <span class="string">''</span>,</div><div class="line">         <span class="attr">sortOrder</span>: <span class="string">''</span></div><div class="line">       &#125;</div><div class="line">       searchUser(queryParams.name, queryParamsPage).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">         <span class="keyword">if</span> (res.status === statusCode) &#123;</div><div class="line">           that.total = res.total</div><div class="line">           <span class="keyword">this</span>.users = res.result.data</div><div class="line">           <span class="comment">// this.users = that.data</span></div><div class="line">         &#125;</div><div class="line">       &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">         <span class="built_in">console</span>.log(error)</div><div class="line">         that.$message.error(&#123;</div><div class="line">           <span class="attr">message</span>: <span class="string">'请求出现异常'</span>,</div><div class="line">           <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">         &#125;)</div><div class="line">       &#125;)</div><div class="line">     &#125;,</div></pre></td></tr></table></figure><p>截图效果如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h9.png" alt="9"></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>对添加用户按钮进行操作，点击添加用户按钮触发<code>showAndUser</code>事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-form-item&gt;</div><div class="line">  &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;el-icon-plus&quot; @click=&quot;showAndUser&quot;&gt;添加用户&lt;/el-button&gt;</div><div class="line">&lt;/el-form-item&gt;</div></pre></td></tr></table></figure><p>添加用户页面我使用element-ui里的Dialog 对话框来实现，点击按钮弹出添加用户页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!--添加用户页面--&gt;</div><div class="line">&lt;el-dialog title=&quot;添加用户&quot; :visible.sync=&quot;dialogFormVisible&quot; center&gt;</div><div class="line">     &lt;el-form :model=&quot;addForm&quot; ref=&quot;addForm&quot;&gt;</div><div class="line">       &lt;el-form-item label=&quot;姓名：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input v-model=&quot;addForm.name&quot; auto-complete=&quot;off&quot; style=&quot;width: 240px&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">       &lt;el-form-item label=&quot;用户名：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input v-model=&quot;addForm.username&quot; auto-complete=&quot;off&quot; style=&quot;width: 240px&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">       &lt;el-form-item label=&quot;密码：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input v-model=&quot;addForm.password&quot; auto-complete=&quot;off&quot; style=&quot;width: 240px&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">       &lt;el-form-item label=&quot;备注：&quot; :label-width=&quot;formLabelWidth&quot;&gt;</div><div class="line">         &lt;el-input type=&quot;textarea&quot; v-model=&quot;addForm.describe&quot;&gt;&lt;/el-input&gt;</div><div class="line">       &lt;/el-form-item&gt;</div><div class="line">     &lt;/el-form&gt;</div><div class="line">     &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</div><div class="line">       &lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;保存&lt;/el-button&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line">   &lt;/el-dialog&gt;</div></pre></td></tr></table></figure><p><code>:visible.sync=&quot;dialogFormVisible&quot;</code>表示是否显示 Dialog，同时在data里定义<code>dialogFormVisible</code>，默认为<code>false</code>，表示是否显示添加页面。定义<code>addForm</code>对象表示添加数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">  <span class="comment">// 添加相关数据</span></div><div class="line">    dialogFormVisible: <span class="literal">false</span>,  <span class="comment">// 添加页面是否显示</span></div><div class="line">    addForm: &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">password</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">describe</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">addFormRules</span>: &#123;</div><div class="line">      <span class="attr">name</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入姓名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</div><div class="line">      <span class="attr">username</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</div><div class="line">      <span class="attr">password</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</div><div class="line">      <span class="attr">describe</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'备注'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用POST请求</p><p><strong>api/user.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addUser</span> (<span class="params">userParams</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> API.POST(<span class="string">'/user'</span>, userParams)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>user.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">showAndUser () &#123;</div><div class="line">  <span class="keyword">this</span>.dialogFormVisible = <span class="literal">true</span></div><div class="line">  <span class="keyword">this</span>.addForm = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">password</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">describe</span>: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">saveUser () &#123;</div><div class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span></div><div class="line">  <span class="keyword">this</span>.$refs.addForm.validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (valid) &#123;</div><div class="line">      <span class="keyword">this</span>.$confirm(<span class="string">'确定保存吗？'</span>, <span class="string">'提示'</span>, &#123;&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> userParams = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.addForm)</div><div class="line">        addUser(userParams).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.status === statusCode) &#123;</div><div class="line">            that.$message.success(&#123;</div><div class="line">              <span class="attr">message</span>: <span class="string">'添加用户成功'</span>,</div><div class="line">              <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">            &#125;)</div><div class="line">            that.$refs[<span class="string">'addForm'</span>].resetFields()</div><div class="line">            that.dialogFormVisible = <span class="literal">false</span></div><div class="line">            that.search()</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            that.$message.error(&#123;</div><div class="line">              <span class="attr">message</span>: <span class="string">'添加用户失败'</span>,</div><div class="line">              <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">            &#125;)</div><div class="line">          &#125;</div><div class="line">        &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(error)</div><div class="line">          that.$message.error(&#123;</div><div class="line">            <span class="attr">showClose</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">message</span>: <span class="string">'请求出现异常'</span>,</div><div class="line">            <span class="attr">duration</span>: <span class="number">2000</span></div><div class="line">          &#125;)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>页面展示：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h10.png" alt="10"></p><p>具体代码看：<a href="https://github.com/hs-web/hsweb-ui-vue" target="_blank" rel="external">https://github.com/hs-web/hsweb-ui-vue</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用户页面&quot;&gt;&lt;a href=&quot;#用户页面&quot; class=&quot;headerlink&quot; title=&quot;用户页面&quot;&gt;&lt;/a&gt;用户页面&lt;/h2&gt;&lt;p&gt;用户页面基础代码展示，&lt;strong&gt;user.vue&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>后台管理开发（一）：开发技术框架相关及home页面详解</title>
    <link href="http://kakajing.github.io/2018/10/08/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E5%8F%8Ahome%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/"/>
    <id>http://kakajing.github.io/2018/10/08/后台管理开发（一）：开发技术框架相关及home页面详解/</id>
    <published>2018-10-08T07:26:10.000Z</published>
    <updated>2018-01-16T13:06:58.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发相关的技术栈"><a href="#开发相关的技术栈" class="headerlink" title="开发相关的技术栈"></a>开发相关的技术栈</h2><ul><li>vuejs2.0：一套构建用户界面的渐进式框架，易用、灵活、高效</li><li>element-ui：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库</li><li>vue-router：官方的路由组件，配合vue.js创建单页应用（SPA）非常简单</li><li>axios: 基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</li><li>scass</li></ul><a id="more"></a><h2 id="构建项目框架"><a href="#构建项目框架" class="headerlink" title="构建项目框架"></a>构建项目框架</h2><p>使用vue-cli脚手架搭建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建一个基于 webpack 模板的新项目hs</div><div class="line">$ vue init webpack hs</div><div class="line"># 进入项目目录</div><div class="line">$ cd hs</div><div class="line"># 安装依赖</div><div class="line">$ npm install</div><div class="line"># 运行项目</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure><p>项目运行后看到以下界面，恭喜你，项目环境搭建成功！</p><p> <img src="http://omux103p0.bkt.clouddn.com/h1.png" alt="1"></p><h3 id="项目结构及新建的基础页面"><a href="#项目结构及新建的基础页面" class="headerlink" title="项目结构及新建的基础页面"></a>项目结构及新建的基础页面</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">├── build  #webpack编译相关文件目录，一般不用动 </div><div class="line">├── config  #配置目录</div><div class="line">│   ├────dev.env.js  #开发环境变量</div><div class="line">│   ├────index.js    #主配置文件</div><div class="line">│   └────prod.env.js #生产环境变量</div><div class="line">├── dist  #生产环境下build后的文件存放目录（发布目录）</div><div class="line">├── server  #服务端代码目录，提供给前端接口</div><div class="line">├── src #前端项目源码目录</div><div class="line">│   ├───—api  #封装的接口文件目录</div><div class="line">│   ├───—assets  #资源目录</div><div class="line">│   ├───—common  #公用文件目录</div><div class="line">│   ├───—components  #组件及页面文件目录</div><div class="line">│   ├───—router  #路由目录</div><div class="line">│   ├───—App.vue #项目入口文件</div><div class="line">│   ├───—bus.js  #公共通信组件</div><div class="line">│   └────main.js  #项目的核心文件</div><div class="line">├── static  #开发模式下的静态资源目录</div><div class="line">├── index.html #首页入口文件，你可以添加一些 meta 信息或同统计代码啥的</div><div class="line">├── package.json #项目配置文件</div><div class="line">└── README.md #项目的说明文档，markdown 格式</div></pre></td></tr></table></figure><h4 id="创建基础页面"><a href="#创建基础页面" class="headerlink" title="创建基础页面"></a>创建基础页面</h4><p>首先需要先简单创建几个基本页面方便接下来展示。</p><p>home.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    首页</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>其他页面就省略了，创建占位。目录截图如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/h4.png" alt="4"></p><h4 id="目录明细："><a href="#目录明细：" class="headerlink" title="目录明细："></a>目录明细：</h4><p>src/components/</p><ul><li>logine ——————– 登录页</li><li>home ——————–首页</li><li>menu ——————– 菜单管理页</li><li>permission ——————– 权限管理页</li><li>role ——————– 角色管理页</li><li>uesr ——————– 用户管理页</li><li>organiz ———————— 机构管理页</li><li>inte-setting ———————— 综合设置页</li></ul><h2 id="配置及安装依赖"><a href="#配置及安装依赖" class="headerlink" title="配置及安装依赖"></a>配置及安装依赖</h2><p>在package.json中配置所需的依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">  <span class="string">"babel-runtime"</span>:<span class="string">"^6.26.0"</span>,</div><div class="line">  <span class="string">"vue"</span>: <span class="string">"^2.5.2"</span>,</div><div class="line">  <span class="string">"vue-router"</span>: <span class="string">"^3.0.1"</span>,</div><div class="line">  <span class="string">"element-ui"</span>: <span class="string">"^2.0.0-beta.1"</span>,</div><div class="line">  <span class="string">"scss"</span>: <span class="string">"^0.2.4"</span>,</div><div class="line">  <span class="string">"axios"</span>: <span class="string">"^0.17.0"</span></div><div class="line">&#125;，</div><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"babel-polyfill"</span>: <span class="string">"^6.26.0"</span>,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里简单说明下<code>babel-polyfill</code>，它是对ES6的API做转义。有兴趣的同学可以查阅其他资料。</p><p><strong>安装依赖</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install</div></pre></td></tr></table></figure><h3 id="引入element-ui"><a href="#引入element-ui" class="headerlink" title="引入element-ui"></a>引入element-ui</h3><p>在app.vue引入element-ui，然后就可以在其他任何页面中使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-ui'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span></div><div class="line">Vue.use(Element)</div></pre></td></tr></table></figure><h3 id="设置路径别名"><a href="#设置路径别名" class="headerlink" title="设置路径别名"></a>设置路径别名</h3><p>设置路径别名，以减少开发过程中路径的复杂性，比如<code>../../</code>这类路径。</p><p>修改webpack.base.conf.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</div><div class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</div><div class="line">      <span class="string">'common'</span>: resolve(<span class="string">'src/common'</span>),</div><div class="line">      <span class="string">'components'</span>: resolve(<span class="string">'src/components'</span>),</div><div class="line">      <span class="string">'api'</span>: resolve(<span class="string">'src/api'</span>),</div><div class="line">      <span class="string">'base'</span>: resolve(<span class="string">'src/base'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h2 id="配置router"><a href="#配置router" class="headerlink" title="配置router"></a>配置router</h2><p>在router/index.js配置routers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'登录'</span>,</div><div class="line">      <span class="attr">component</span>: Login</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/home'</span>,</div><div class="line">      <span class="attr">component</span>: Home,</div><div class="line">      <span class="attr">name</span>: <span class="string">'系统设置'</span>,</div><div class="line">      <span class="attr">iconCls</span>: <span class="string">'el-icon-setting'</span>,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/menu'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'菜单管理'</span>,</div><div class="line">          <span class="attr">component</span>: Menu</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/permission'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'权限管理'</span>,</div><div class="line">          <span class="attr">component</span>: Permission</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/role'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'角色管理'</span>,</div><div class="line">          <span class="attr">component</span>: Role</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/user'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'用户管理'</span>,</div><div class="line">          <span class="attr">component</span>: User</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/home'</span>,</div><div class="line">      <span class="attr">component</span>: Home,</div><div class="line">      <span class="attr">name</span>: <span class="string">'组织架构'</span>,</div><div class="line">      <span class="attr">iconCls</span>: <span class="string">'el-icon-menu'</span>,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/organiz'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'机构管理'</span>,</div><div class="line">          <span class="attr">component</span>: Organiz</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">'/setting'</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'综合设置'</span>,</div><div class="line">          <span class="attr">component</span>: InSetting</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="编写home-vue组件"><a href="#编写home-vue组件" class="headerlink" title="编写home.vue组件"></a>编写home.vue组件</h2><p>使用element-ui2.0的Container布局容器，方便快速搭建页面的基本结构。</p><p>先上<strong>components/home.vue</strong>的代码及效果图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;el-container class=&quot;container&quot;&gt;</div><div class="line">    &lt;el-header class=&quot;header&quot;&gt;</div><div class="line">      &lt;el-row&gt;</div><div class="line">        &lt;el-col :span=&quot;24&quot; class=&quot;h-col&quot;&gt;</div><div class="line">          &lt;el-col :span=&quot;10&quot; class=&quot;logo&quot; :class=&quot;collapsed?&apos;logo-collapse-width&apos;:&apos;logo-width&apos;&quot;&gt;</div><div class="line">            &#123;&#123;collapsed ? &apos;&apos; : title&#125;&#125;</div><div class="line">          &lt;/el-col&gt;</div><div class="line">          &lt;el-col :span=&quot;10&quot;&gt;</div><div class="line">            &lt;div class=&quot;tools&quot; @click.prevent=&quot;collapse&quot;&gt;</div><div class="line">              &lt;i class=&quot;el-icon-arrow-right&quot;&gt;&lt;/i&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">          &lt;/el-col&gt;</div><div class="line"></div><div class="line">          &lt;el-col :span=&quot;4&quot; class=&quot;userinfo&quot;&gt;</div><div class="line">            &lt;el-dropdown trigger=&quot;hover&quot;&gt;</div><div class="line">              &lt;span class=&quot;el-dropdown-link userinfo-inner&quot;&gt;&#123;&#123;userName&#125;&#125;&lt;i class=&quot;el-icon-setting&quot;&gt;&lt;/i&gt;&lt;/span&gt;</div><div class="line">              &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</div><div class="line">                &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</div><div class="line">                &lt;el-dropdown-item&gt;设置&lt;/el-dropdown-item&gt;</div><div class="line">                &lt;el-dropdown-item @click.native=&quot;logout&quot;&gt;退出登录&lt;/el-dropdown-item&gt;</div><div class="line">              &lt;/el-dropdown-menu&gt;</div><div class="line">            &lt;/el-dropdown&gt;</div><div class="line">          &lt;/el-col&gt;</div><div class="line">        &lt;/el-col&gt;</div><div class="line">      &lt;/el-row&gt;</div><div class="line">    &lt;/el-header&gt;</div><div class="line"></div><div class="line">    &lt;el-container&gt;</div><div class="line">      &lt;el-aside class=&quot;aside&quot; :class=&quot;&#123;showSidebar:!collapsed&#125;&quot;&gt;</div><div class="line">        &lt;el-menu default-active=&quot;0&quot; class=&quot;el-menu&quot; ref=&quot;menuCollapsed&quot; router :collapse=&quot;collapsed&quot;&gt;</div><div class="line">          &lt;template v-for=&quot;(item,index) in $router.options.routes&quot; v-if=&quot;item.name !== &apos;登录&apos;&quot;&gt;</div><div class="line">            &lt;el-submenu :index=&quot;index+&apos;&apos;&quot; v-if=&quot;!item.leaf&quot;&gt;</div><div class="line">              &lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;&lt;/template&gt;</div><div class="line">              &lt;el-menu-item v-for=&quot;child in item.children&quot;</div><div class="line">                            :index=&quot;child.path&quot;</div><div class="line">                            :key=&quot;child.path&quot;</div><div class="line">                            v-if=&quot;!child.menuShow&quot;</div><div class="line">                            :class=&quot;$route.path==child.path?&apos;is-active&apos;:&apos;&apos;&quot;</div><div class="line">              &gt;&#123;&#123;child.name&#125;&#125;</div><div class="line">              &lt;/el-menu-item&gt;</div><div class="line">            &lt;/el-submenu&gt;</div><div class="line">            &lt;el-menu-item v-else-if=&quot;item.leaf&amp;&amp;item.children&amp;&amp;item.children.length&quot;</div><div class="line">                          :index=&quot;item.children[0].path&quot;</div><div class="line">                          :class=&quot;$route.path==item.children[0].path?&apos;is-avtive&apos;:&apos;&apos;&quot;&gt;</div><div class="line">              &lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.children[0].name&#125;&#125;&lt;/span&gt;</div><div class="line">            &lt;/el-menu-item&gt;</div><div class="line">          &lt;/template&gt;</div><div class="line">        &lt;/el-menu&gt;</div><div class="line">      &lt;/el-aside&gt;</div><div class="line"></div><div class="line">      &lt;el-main&gt;</div><div class="line">        &lt;transition&gt;</div><div class="line">          &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">        &lt;/transition&gt;</div><div class="line">      &lt;/el-main&gt;</div><div class="line">    &lt;/el-container&gt;</div><div class="line">  &lt;/el-container&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>运行项目展示页面如下：</p><p><img src="http://omux103p0.bkt.clouddn.com/h3.png" alt="3"></p><h3 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h3><p>接下来依次分析<strong>home.vue</strong>的代码。</p><h4 id="动态配置菜单"><a href="#动态配置菜单" class="headerlink" title="动态配置菜单"></a>动态配置菜单</h4><p>使用菜单组件<code>&lt;el-menu&gt;</code>，<code>:default-active=&quot;0&quot;</code>设置当前激活菜单的<code>index</code>，设置为<code>router</code>模式会在激活导航时以 <code>index</code> 作为 <code>path</code> 进行路由跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-menu :<span class="keyword">default</span>-active=<span class="string">"0"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-menu"</span> ref=<span class="string">"menuCollapsed"</span> router :collapse=<span class="string">"collapsed"</span>&gt;</div><div class="line">...</div><div class="line">&lt;<span class="regexp">/e-menu&gt;</span></div></pre></td></tr></table></figure><p>接着使用<code>$router.options.routes</code>来遍历生成侧边导航栏，<code>v-if</code>将登录的路径隐藏。在菜单中通过<code>submenu</code>组件可以生成二级菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template v-for=&quot;(item,index) in $router.options.routes&quot; v-if=&quot;item.name !== &apos;登录&apos;&quot;&gt;</div><div class="line">&lt;el-submenu :index=&quot;index+&apos;&apos;&quot; v-if=&quot;!item.leaf&quot;&gt;</div><div class="line">              &lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/el-submenu&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>分组名可以通过<code>title</code>属性直接设定进行<code>solt</code>分发菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;template slot=&quot;title&quot;&gt;&lt;i :class=&quot;item.iconCls&quot;&gt;&lt;/i&gt;&lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;&lt;/template&gt;</div></pre></td></tr></table></figure><p>用<code>item.name</code>和<code>item.children.name</code>来配置菜单栏和子菜单栏的名称。<code>$route.path</code>表示当前路由对象的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;el-menu-item v-for=&quot;child in item.children&quot;</div><div class="line">                            :index=&quot;child.path&quot;</div><div class="line">                            :key=&quot;child.path&quot;</div><div class="line">                            v-if=&quot;!child.menuShow&quot;</div><div class="line">                            :class=&quot;$route.path==child.path?&apos;is-active&apos;:&apos;&apos;&quot;</div><div class="line">              &gt;&#123;&#123;child.name&#125;&#125;&lt;/el-menu-item&gt;</div></pre></td></tr></table></figure><p>最后，如上图路由菜单展示，完美~！</p><h4 id="导航菜单折叠功能"><a href="#导航菜单折叠功能" class="headerlink" title="导航菜单折叠功能"></a>导航菜单折叠功能</h4><p>首先在data中创建是否折叠<code>collapsed</code>属性，默认值为<code>false</code>。写个<code>collapse()</code>方法以此来控制菜单是否折叠。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> data () &#123;</div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">   <span class="attr">collapsed</span>: <span class="literal">false</span></div><div class="line">   &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  collapse () &#123;</div><div class="line">    <span class="keyword">this</span>.collapsed = !<span class="keyword">this</span>.collapsed</div><div class="line"> &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分别在header和aside组件上设置<code>collapsed</code>来控制菜单折叠</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;el-col :span=&quot;10&quot; class=&quot;logo&quot; :class=&quot;collapsed?&apos;logo-collapse-width&apos;:&apos;logo-width&apos;&quot;&gt;</div><div class="line">   &#123;&#123;collapsed ? &apos;&apos; : title&#125;&#125;</div><div class="line">&lt;/el-col&gt;</div><div class="line"></div><div class="line">&lt;el-aside class=&quot;aside&quot; :class=&quot;&#123;showSidebar:!collapsed&#125;&quot;&gt;</div><div class="line">...</div><div class="line">&lt;/el-aside&gt;</div></pre></td></tr></table></figure><p>具体代码看：<a href="https://github.com/hs-web/hsweb-ui-vue" target="_blank" rel="external">https://github.com/hs-web/hsweb-ui-vue</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发相关的技术栈&quot;&gt;&lt;a href=&quot;#开发相关的技术栈&quot; class=&quot;headerlink&quot; title=&quot;开发相关的技术栈&quot;&gt;&lt;/a&gt;开发相关的技术栈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vuejs2.0：一套构建用户界面的渐进式框架，易用、灵活、高效&lt;/li&gt;
&lt;li&gt;element-ui：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库&lt;/li&gt;
&lt;li&gt;vue-router：官方的路由组件，配合vue.js创建单页应用（SPA）非常简单&lt;/li&gt;
&lt;li&gt;axios: 基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用&lt;/li&gt;
&lt;li&gt;scass&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（六）：播放器的实现（一）</title>
    <link href="http://kakajing.github.io/2017/10/28/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://kakajing.github.io/2017/10/28/Vue音乐播放器开发（六）：播放器的实现（一）/</id>
    <published>2017-10-28T07:24:36.000Z</published>
    <updated>2017-11-23T13:11:12.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="播放器内置组件开发"><a href="#播放器内置组件开发" class="headerlink" title="播放器内置组件开发"></a>播放器内置组件开发</h2><p>播放器可以通过歌手详情列表、歌单详情列表、排行榜列表以及搜索结果打开，换言之，多个组件都可以操作这个播放器。</p><a id="more"></a><h3 id="播放器Vuex数据设计"><a href="#播放器Vuex数据设计" class="headerlink" title="播放器Vuex数据设计"></a>播放器Vuex数据设计</h3><p>打开播放器时点击缩小播放器仍然可以在后台播放运行，也就是说全局性的控制播放器数据，所以要通过vuex管理 。首先思考播放器需要哪些相关数据。</p><p>列出播放器相关的数据：</p><p><code>playing</code>：播放状态</p><p><code>fullScreen</code>：展开或收起</p><p><code>playlist</code>：播放列表</p><p><code>sequenceList</code>：顺序列表</p><p><code>mode</code>：播放模式</p><p><code>currentIndex</code>：当前播放索引</p><p><strong>state.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;playMode&#125; <span class="keyword">from</span> <span class="string">'common/js/config'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">singer</span>: &#123;&#125;,</div><div class="line">  <span class="attr">playing</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">fullScreen</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">playlist</span>: [],</div><div class="line">  <span class="attr">sequenceList</span>: [],</div><div class="line">  <span class="attr">mode</span>: playMode.sequence,</div><div class="line">  <span class="attr">currentIndex</span>: <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</div></pre></td></tr></table></figure><p>这几个数据的其他配置如mutations、getters在此省略，具体参考代码。</p><h3 id="播放器组件开发"><a href="#播放器组件开发" class="headerlink" title="播放器组件开发"></a>播放器组件开发</h3><p>播放器<strong>player.vue</strong> 基础样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;player&quot;&gt;</div><div class="line">    &lt;div class=&quot;normal-player&quot;&gt;播放器&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mini-player&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>播放器是全局组件，放在<code>App.vue</code>下面，通过<code>Vuex</code>传递数据，触发<code>action</code>提交<code>mutation</code>，从而使播放器开始工作。</p><p><strong>App.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;m-header&gt;&lt;/m-header&gt;</div><div class="line">    &lt;tab&gt;&lt;/tab&gt;</div><div class="line">    &lt;keep-alive&gt;</div><div class="line">      &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/keep-alive&gt;</div><div class="line">    &lt;player&gt;&lt;/player&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><p>用vuex相关数据控制播放器的显示和隐藏，传入<code>fullScreen</code>控制显示或隐藏，<code>playlist</code>控制播放器渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;player&quot; v-show=&quot;playlist.length&gt;0&quot;&gt;</div><div class="line">    &lt;div class=&quot;normal-player&quot; v-show=&quot;fullScreen&quot;&gt;播放器&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mini-player&quot; v-show=&quot;fullScreen&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import &#123;mapGetters&#125; from &apos;vuex&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    computed: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        &apos;fullScreen&apos;,</div><div class="line">        &apos;playlist&apos;</div><div class="line">      ])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="控制播放器的展示"><a href="#控制播放器的展示" class="headerlink" title="控制播放器的展示"></a>控制播放器的展示</h4><p>点击歌曲列表时展开播放器，也就是点击歌曲列表song-list组件，给song-list组件添加事件<code>selectItem(item, index)</code></p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v40.png" alt="v40"></p><p> 而song-list又被music-list组件使用，在music-list组件触发select事件<code>@select=&quot;selectItem&quot;</code>。</p><p><strong>music-list.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"song-list-wrapper"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">song-list</span> @<span class="attr">select</span>=<span class="string">"selectItem"</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><code>selectItem</code>要做三件事：</p><p>1、点击歌曲时要播放整个歌曲列表，设置<code>playlist</code>和<code>sequenceList</code></p><p>2、根据点击的歌曲索引，设置<code>currentIndex</code>，点击时实际上歌曲要播放了，设置播放状态<code>playing</code></p><p>3、默认展开全屏播放器，设置<code>fullScreen</code></p><p>设置这些数据实际就是提交<code>mutations</code>。在一个动作中多次改变<code>mutation</code>那么会封装一个<code>action</code>。在<code>actions.js</code>里定义<code>selectPlay</code>。</p><p><strong>action.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectPlay = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit, state&#125;, &#123;list, index&#125;</span>) </span>&#123;</div><div class="line">  commit(types.SET_SEQUENCE_LIST, list)</div><div class="line">  commit(types.SET_PLAYLIST, list)</div><div class="line">  commit(types.SET_CURRENT_INDEX, index)</div><div class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</div><div class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>selectPlay对一系列mutation做封装，提交mutation。</p><p>在music-list组件里调用actions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    selectItem (item, index) &#123;</div><div class="line">        <span class="keyword">this</span>.selectPlay(&#123;</div><div class="line">          <span class="attr">list</span>: <span class="keyword">this</span>.songs,</div><div class="line">          index</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">      ...mapActions([</div><div class="line">        <span class="string">'selectPlay'</span></div><div class="line">      ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>action</code>逻辑执行<code>mutation</code>就会改变，<code>mutation</code>改变就会映射到<code>mapGetters</code>，也就会得到<code>fullScreen</code>和<code>playlist</code>的改变。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v46.png" alt="v46"></p><p>通过定义的vuex以及一些事件点击操作去修改的vuex数据，这些操作行为成功实现了player组件的显示。</p><p>传入<code>currentSong</code>填充歌曲基本数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;player&quot; v-show=&quot;playlist.length&gt;0&quot;&gt;</div><div class="line">    &lt;div class=&quot;normal-player&quot; v-show=&quot;fullScreen&quot;&gt;</div><div class="line">      &lt;div class=&quot;background&quot;&gt;</div><div class="line">        &lt;img width=&quot;100%&quot; height=&quot;100%&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      ...</div><div class="line">        &lt;h1 class=&quot;title&quot; v-html=&quot;currentSong.name&quot;&gt;&lt;/h1&gt;</div><div class="line">        &lt;h2 class=&quot;subtitle&quot; v-html=&quot;currentSong.singer&quot;&gt;&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;middle&quot;&gt;</div><div class="line">        &lt;div class=&quot;middle-l&quot;&gt;</div><div class="line">          &lt;div class=&quot;cd-wrapper&quot;&gt;</div><div class="line">            &lt;div class=&quot;cd&quot;&gt;</div><div class="line">              &lt;img class=&quot;image&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;bottom&quot;&gt;...&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot;&gt;</div><div class="line">      &lt;div class=&quot;icon&quot;&gt;</div><div class="line">        &lt;img width=&quot;40&quot; height=&quot;40&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;text&quot;&gt;</div><div class="line">        &lt;h2 class=&quot;name&quot; v-html=&quot;currentSong.name&quot;&gt;&lt;/h2&gt;</div><div class="line">        &lt;p class=&quot;desc&quot; v-html=&quot;currentSong.singer&quot;&gt;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      ...</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import &#123;mapGetters&#125; from &apos;vuex&apos;</div><div class="line">  </div><div class="line">  export default &#123;</div><div class="line">    computed: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        &apos;fullScreen&apos;,</div><div class="line">        &apos;playlist&apos;,</div><div class="line">        &apos;currentSong&apos;</div><div class="line">      ])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>效果展示：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v41.png" alt="v41"></p><h4 id="mini播放器的展示"><a href="#mini播放器的展示" class="headerlink" title="mini播放器的展示"></a>mini播放器的展示</h4><p>miniPlayer是需要把<code>fullScreen</code>设置为<code>false</code>，因此点击返回按钮时把<code>fullScreen</code>设置为<code>false</code>，添加个<code>click</code>事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;normal-player&quot; v-show=&quot;fullScreen&quot;&gt;</div><div class="line">...</div><div class="line">&lt;div class=&quot;top&quot;&gt;</div><div class="line">        &lt;div class=&quot;back&quot; @click=&quot;back&quot;&gt;</div><div class="line">          &lt;i class=&quot;icon-back&quot;&gt;&lt;/i&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;h1 class=&quot;title&quot; v-html=&quot;currentSong.name&quot;&gt;&lt;/h1&gt;</div><div class="line">        &lt;h2 class=&quot;subtitle&quot; v-html=&quot;currentSong.singer&quot;&gt;&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  methods: &#123;</div><div class="line">      back () &#123;</div><div class="line">        this.setFullScreen(false)</div><div class="line">      &#125;,</div><div class="line">      ...mapMutations(&#123;</div><div class="line">        setFullScreen: &apos;SET_FULL_SCREEN&apos;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过mutation改变fullScreen。</p><p>效果展示：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v42.png" alt="v42"></p><p> 点击mini播放器打开全屏，同理在mini播放器添加个click事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot; @click=&quot;open&quot;&gt;</div><div class="line">      ...</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">open () &#123;</div><div class="line">   this.setFullScreen(true)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="播放器展开收起动画"><a href="#播放器展开收起动画" class="headerlink" title="播放器展开收起动画"></a>播放器展开收起动画</h4><h5 id="最大化和最小化切换"><a href="#最大化和最小化切换" class="headerlink" title="最大化和最小化切换"></a>最大化和最小化切换</h5><p>播放器最大化和最小化切换时没有交互动画显得比较生硬，为了体验更好使用<code>&lt;transition&gt;&lt;/transition&gt;</code>自定义标签设置交互动画。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v43.png" alt="v43"></p><p>使用<code>&lt;transition&gt;&lt;/transition&gt;</code>包裹要实现的区块。然后根据<code>name</code>编写css样式</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v44.png" alt="v44"></p><h5 id="点击放大或缩小时的交互动画"><a href="#点击放大或缩小时的交互动画" class="headerlink" title="点击放大或缩小时的交互动画"></a>点击放大或缩小时的交互动画</h5><p>当展开收起播放器时，mini播放器的图片放大或缩小有渐变的效果，利用vuejs提供JavaScript钩子，在钩子里创建css3的animation。给name为normal的添加<code>@enter</code>、<code>@afterEnter</code>、<code>@leave</code>、<code>@afterLeave</code>这几个事件。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v45.png" alt="v45"></p><p> enter方法有两个参数，第一个参数el是要做动画的dom，第二个参数done是回调函数，done执行时就会跳到下一个钩子<code>afterEnter</code>，<code>leave</code>和<code>enter</code>一样有两个参数，done执行时跳到下个钩子<code>afterLeave</code>。</p><p>使用css3写动画首先要知道几个位置：从运动的起始点和终点的区域、横坐标和纵坐标以及scale的大小。但这些是动态获取的不能预先知道，所以通过js的方式创建css3动画。这里使用<a href="https://github.com/HenrikJoreteg/create-keyframe-animation" target="_blank" rel="external">create-keyframe-animation</a>第三方库实现通过js编程方式创建css3动画。</p><p>在这之前先封装个函数来获取初始位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取初始位置</span></div><div class="line">_getPosAndScale() &#123;</div><div class="line">        <span class="keyword">const</span> targetWidth = <span class="number">40</span></div><div class="line">        <span class="keyword">const</span> paddingLeft = <span class="number">40</span></div><div class="line">        <span class="keyword">const</span> paddingBottom = <span class="number">30</span></div><div class="line">        <span class="keyword">const</span> paddingTop = <span class="number">80</span></div><div class="line">        <span class="comment">// cd-wrapper的宽度</span></div><div class="line">        <span class="keyword">const</span> width = <span class="built_in">window</span>.innerWidth * <span class="number">0.8</span></div><div class="line">        <span class="comment">// 初始缩放比例</span></div><div class="line">        <span class="keyword">const</span> scale = targetWidth / width</div><div class="line">        <span class="keyword">const</span> x = -(<span class="built_in">window</span>.innerWidth / <span class="number">2</span> - paddingLeft)</div><div class="line">        <span class="keyword">const</span> y = <span class="built_in">window</span>.innerHeight - paddingTop - width / <span class="number">2</span> - paddingBottom</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          x,</div><div class="line">          y,</div><div class="line">          scale</div><div class="line">        &#125;</div><div class="line">      &#125;,</div></pre></td></tr></table></figure><p>点击目标创建动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">enter(el, done) &#123;</div><div class="line">        <span class="keyword">const</span> &#123;x, y, scale&#125; = <span class="keyword">this</span>._getPosAndScale()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> animation = &#123;</div><div class="line">          <span class="number">0</span>: &#123;</div><div class="line">            <span class="attr">transform</span>: <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0) scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">          &#125;,</div><div class="line">          <span class="number">60</span>: &#123;</div><div class="line">            <span class="attr">transform</span>: <span class="string">`translate3d(0,0,0) scale(1.1)`</span></div><div class="line">          &#125;,</div><div class="line">          <span class="number">100</span>: &#123;</div><div class="line">            <span class="attr">transform</span>: <span class="string">`translate3d(0,0,0) scale(1)`</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        animations.registerAnimation(&#123;</div><div class="line">          <span class="attr">name</span>: <span class="string">'move'</span>,</div><div class="line">          animation,</div><div class="line">          <span class="attr">presets</span>: &#123;</div><div class="line">            <span class="attr">duration</span>: <span class="number">400</span>,</div><div class="line">            <span class="attr">easing</span>: <span class="string">'linear'</span></div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">        animations.runAnimation(<span class="keyword">this</span>.$refs.cdWrapper, <span class="string">'move'</span>, done)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>动画执行完后调用done函数，done函数执行后跳到afterEnter，afterEnter做的事情就是结束动画，animation设置为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">afterEnter () &#123;</div><div class="line">   animations.unregisterAnimation(<span class="string">'move'</span>)</div><div class="line">   <span class="keyword">this</span>.$refs.cdWrapper.style.animation = <span class="string">''</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>leave动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">leave(el, done) &#123;</div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.transition = <span class="string">'all 0.4s'</span></div><div class="line">  <span class="keyword">const</span> &#123;x, y, scale&#125; = <span class="keyword">this</span>._getPosAndScale()</div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0) scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.addEventListener(<span class="string">'transitionend'</span>, done)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>leave动画执行完后调用done，done执行完后跳到afterLeave，afterLeave将动画设置为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">afterLeave() &#123;</div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.transition = <span class="string">''</span></div><div class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style[transform] = <span class="string">''</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="播放器歌曲播放功能实现"><a href="#播放器歌曲播放功能实现" class="headerlink" title="播放器歌曲播放功能实现"></a>播放器歌曲播放功能实现</h4><p>播放功能实际上是使用HTML5的<code>audio</code>标签实现的，<code>src</code>属性指向的是播放音乐地址。</p><p>在<strong>player.vue</strong>里添加<code>audio</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;audio ref=&quot;audio&quot; :src=&quot;currentSong.url&quot;&gt;&lt;/audio&gt;</div></pre></td></tr></table></figure><p>仅仅通过指定播放地址是不能播放，还需要调用<code>audio</code>的<code>play</code>方法，在<code>currentSong</code>发生改变时调用<code>play</code>方法，这样要watch <code>currentSong</code>的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      currentSong () &#123;</div><div class="line">        <span class="keyword">this</span>.$refs.audio.play()</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动效果会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught (<span class="keyword">in</span> promise) DOMException: The play() request was interrupted by a <span class="keyword">new</span> load request.</div></pre></td></tr></table></figure><p>这是dom异常，在调用<code>play</code>方法时同时去请求src，但dom还没被读取就调用<code>play</code>，所以报错了。在这加个延迟<code>$nextTick()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      currentSong () &#123;</div><div class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.audio.play()</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>报错消失，歌曲正常播放。</p><h4 id="音乐暂停功能实现"><a href="#音乐暂停功能实现" class="headerlink" title="音乐暂停功能实现"></a>音乐暂停功能实现</h4><p>vuex里有定义一个状态叫<code>playing</code>，是控制当前播放歌曲是播放还是暂停状态。点击歌曲列表时会提交一个action，在action里提交<code>SET_PLAYING_STATE</code>的mutation设置为<code>true</code>，所以当点击歌曲列表时<code>playing</code>状态为<code>true</code>。通过mapGetters里的<code>playing</code>获取当前状态，然后通过mutation改变<code>playing</code>的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        <span class="string">'fullScreen'</span>,</div><div class="line">        <span class="string">'playlist'</span>,</div><div class="line">        <span class="string">'currentSong'</span>,</div><div class="line">        <span class="string">'playing'</span></div><div class="line">      ])</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  ...mapMutations(&#123;</div><div class="line">        <span class="attr">setFullScreen</span>: <span class="string">'SET_FULL_SCREEN'</span>,</div><div class="line">        <span class="attr">setPlayingState</span>: <span class="string">'SET_PLAYING_STATE'</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用<code>setPlayingState</code>方法改变<code>playing</code>状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class="bottom"&gt;</div><div class="line">  &lt;div class="icon i-center"&gt;</div><div class="line">     &lt;i @click="togglePlaying" class="icon-play"&gt;&lt;/i&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">     </div><div class="line">togglePlaying () &#123;</div><div class="line">   this.setPlayingState(!this.playing)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>仅仅设置playing不能让播放器停止，真正控制播放的还是播放器，所以watch playing状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">playing (newPlaying) &#123;</div><div class="line">  <span class="keyword">const</span> audio = <span class="keyword">this</span>.$refs.audio</div><div class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    newPlaying ? audio.play() : audio.pause()</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="动态改变播放按钮样式"><a href="#动态改变播放按钮样式" class="headerlink" title="动态改变播放按钮样式"></a>动态改变播放按钮样式</h4><p>当点击歌曲播放时显示播放按钮，点击暂停时显示暂停按钮。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class="bottom"&gt;</div><div class="line">&lt;div class="icon i-center"&gt;</div><div class="line">    &lt;i @click="togglePlaying" :class="playIcon"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">        </div><div class="line">computed: &#123;</div><div class="line">      playIcon () &#123;</div><div class="line">        return this.playing ? 'icon-pause' : 'icon-play'</div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同理，mini播放器也是</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class="mini-player" v-show="!fullScreen" @click="open"&gt;</div><div class="line">&lt;div class="control"&gt;</div><div class="line">        &lt;i @click="togglePlaying" :class="miniIcon"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> </div><div class="line"> computed: &#123;</div><div class="line">   miniIcon () &#123;</div><div class="line">     return this.playing ? 'icon-pause-mini' : 'icon-play-mini'</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击mini播放器播放按钮发现播放器又弹了出来，是因为子元素点击事件会冒泡到父元素上，父元素也有个点击事件去打开播放器，为了防止事件向上冒泡修改为<code>@click.stop=&#39;togglePlaying&#39;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot; @click=&quot;open&quot;&gt;</div><div class="line">&lt;div class=&quot;control&quot;&gt;</div><div class="line">        &lt;i @click=&quot;togglePlaying&quot; :class=&quot;miniIcon&quot;&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="cd图片旋转"><a href="#cd图片旋转" class="headerlink" title="cd图片旋转"></a>cd图片旋转</h4><p>歌曲播放时歌曲图片跟着旋转，暂停时图片不动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;cd-wrapper&quot; ref=&quot;cdWrapper&quot;&gt;</div><div class="line">  &lt;div class=&quot;cd&quot; :class=&quot;cdCls&quot;&gt;</div><div class="line">  &lt;img class=&quot;image&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">computed: &#123; </div><div class="line">  cdCls () &#123;</div><div class="line">  return this.playing ? &apos;play&apos; : &apos;play pause&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同理，mini播放器也是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mini-player&quot; v-show=&quot;!fullScreen&quot; @click=&quot;open&quot;&gt;</div><div class="line">  &lt;div class=&quot;icon&quot;&gt;</div><div class="line">  &lt;img :class=&quot;cdCls&quot; width=&quot;40&quot; height=&quot;40&quot; :src=&quot;currentSong.image&quot;&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="歌曲前进后退功能实现"><a href="#歌曲前进后退功能实现" class="headerlink" title="歌曲前进后退功能实现"></a>歌曲前进后退功能实现</h4><p>前进后退功能其实就是改变当前播放歌曲的索引。</p><p>vuex有个状态是<code>currentIndex</code>，表示当前播放歌曲的索引，当点击歌曲列表时触发action，action有个对<code>SET_CURRENT_INDEX</code>的mutation的提交，修改<code>currentIndex</code>播放到第几位，这也代表了当前播放的歌曲。通过mapGetters里的<code>currentIndex</code>获取当前播放歌曲，然后通过mutation改变<code>currentIndex</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...mapGetters([</div><div class="line">  <span class="string">'fullScreen'</span>,</div><div class="line">  <span class="string">'playlist'</span>,</div><div class="line">  <span class="string">'currentSong'</span>,</div><div class="line">  <span class="string">'playing'</span>,</div><div class="line">  <span class="string">'currentIndex'</span></div><div class="line">])</div></pre></td></tr></table></figure><p>添加<code>@prev</code>和<code>@next</code>方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div class="icon i-left"&gt;</div><div class="line">&lt;i @click="prev" class="icon-prev"&gt;&lt;/i&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="icon i-center"&gt;</div><div class="line">&lt;i @click="togglePlaying" :class="playIcon"&gt;&lt;/i&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="icon i-right"&gt;</div><div class="line">&lt;i @click="next" class="icon-next"&gt;&lt;/i&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">  prev () &#123;</div><div class="line">    let index = this.currentIndex + 1</div><div class="line">    if (index === this.playlist.length) &#123;</div><div class="line">      index = 0</div><div class="line">    &#125;</div><div class="line">    this.setCurrentIndex(index)</div><div class="line">  &#125;,</div><div class="line">  next () &#123;</div><div class="line">    let index = this.currentIndex - 1</div><div class="line">    if (index === -1) &#123;</div><div class="line">      index = this.playlist.length - 1</div><div class="line">    &#125;</div><div class="line">    this.setCurrentIndex(index)</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击暂停切换下首歌，下首歌播放了但icon没发生变化，是因为点击next时歌曲切换了但是<code>playing</code>状态没修改，这里修改下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">prev () &#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex + <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> (index === <span class="keyword">this</span>.playlist.length) &#123;</div><div class="line">    index = <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">    <span class="keyword">this</span>.togglePlaying()</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">next () &#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</div><div class="line">    index = <span class="keyword">this</span>.playlist.length - <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">    <span class="keyword">this</span>.togglePlaying()</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>快速切换歌曲时会报<code>Uncaught (in promise) DOMException: The play() request was interrupted by a new load request.</code>之前遇到的错误。</p><p><code>audio</code>有<code>@canplay</code>和<code>@error</code>两个事件：</p><p>1、<code>@canplay</code>：当歌曲加载播放会触发事件，</p><p>2、<code>@error</code>：当歌曲地址发生错误时会触发error事件</p><p>在<code>audio</code>标签监听<code>@canplay=&quot;read&quot;</code>和<code>@error=&quot;error&quot;</code>事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;audio ref=&quot;audio&quot; :src=&quot;currentSong.url&quot; @canplay=&quot;read&quot; @error=&quot;error&quot;&gt;&lt;/audio&gt;</div></pre></td></tr></table></figure><p>只有当歌曲read时才能点击下首歌，反之不能点击下首歌。用一个标识位控制，在data里定义<code>songReady</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">songReady</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">&#125;,</div><div class="line">  </div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">        prev () &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.songReady) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (index === <span class="keyword">this</span>.playlist.length) &#123;</div><div class="line">          index = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">          <span class="keyword">this</span>.togglePlaying()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.songReady = <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      next () &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.songReady) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</div><div class="line">          index = <span class="keyword">this</span>.playlist.length - <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.setCurrentIndex(index)</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</div><div class="line">          <span class="keyword">this</span>.togglePlaying()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.songReady = <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      read () &#123;</div><div class="line">        <span class="keyword">this</span>.songReady = <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当用户切换下首歌遇到网络错误或者下首歌url错误，songReady永远不能执行，之后的点击事件都不能用，当下首歌加载失败触发error函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">read () &#123;</div><div class="line">       <span class="keyword">this</span>.songReady = <span class="literal">true</span></div><div class="line">     &#125;,</div><div class="line">     error () &#123;</div><div class="line">       <span class="keyword">this</span>.songReady = <span class="literal">true</span></div><div class="line">     &#125;,</div></pre></td></tr></table></figure><p>从样式上做些处理,当我们不能点击时给这个按钮绑定<code>disableClas</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div class="bottom"&gt;</div><div class="line">  &lt;div class="operators"&gt;</div><div class="line">   ...</div><div class="line">    &lt;div class="icon i-left" :class="disableCls"&gt;</div><div class="line">    &lt;i @click="prev" class="icon-prev"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class="icon i-center" :class="disableCls"&gt;</div><div class="line">    &lt;i @click="togglePlaying" :class="playIcon"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class="icon i-right" :class="disableCls"&gt;</div><div class="line">    &lt;i @click="next" class="icon-next"&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">   ...</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">  disableCls () &#123;</div><div class="line">    return this.songReady ? '' : 'disable'</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="具体源代码"><a href="#具体源代码" class="headerlink" title="具体源代码"></a>具体源代码</h3><p>参考：<a href="https://github.com/kakajing/vue-music" target="_blank" rel="external">https://github.com/kakajing/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;播放器内置组件开发&quot;&gt;&lt;a href=&quot;#播放器内置组件开发&quot; class=&quot;headerlink&quot; title=&quot;播放器内置组件开发&quot;&gt;&lt;/a&gt;播放器内置组件开发&lt;/h2&gt;&lt;p&gt;播放器可以通过歌手详情列表、歌单详情列表、排行榜列表以及搜索结果打开，换言之，多个组件都可以操作这个播放器。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（五）：歌手详情页开发以及Vuex的使用二</title>
    <link href="http://kakajing.github.io/2017/10/19/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%A4%E4%BA%92%E6%95%88%E6%9E%9C%E4%BA%8C/"/>
    <id>http://kakajing.github.io/2017/10/19/Vue音乐播放器开发（五）：歌手详情页开发之交互效果二/</id>
    <published>2017-10-19T13:41:20.000Z</published>
    <updated>2017-10-26T12:51:11.518Z</updated>
    
    <content type="html"><![CDATA[<p>接 <a href="https://kakajing.github.io/2017/10/15/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8AVuex%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/">Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一</a></p><h2 id="交互效果"><a href="#交互效果" class="headerlink" title="交互效果"></a>交互效果</h2><h3 id="图片跟随滑动变小"><a href="#图片跟随滑动变小" class="headerlink" title="图片跟随滑动变小"></a>图片跟随滑动变小</h3><p>当歌曲列表往上滑动时，图片跟随滑动变小以展示更多歌曲数据，当往下拉时，图片跟着放大。</p><a id="more"></a><p>当向上滚动列表时有个底也要跟着向上滚，那就需要一个层，这个层在文字的下面，随着滚动有向上推的过程。在scroll组件之前添加这个<code>class</code>为<code>bg-layer</code>的<code>div</code>层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"bg-layer"</span> ref=<span class="string">"layer"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"> &lt;scroll <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> :data=<span class="string">"songs"</span> ref=<span class="string">"list"</span>&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list-wrapper"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></div></pre></td></tr></table></figure><p>让<code>bg-layer</code>有个向上回动的效果，当滚动时需要操作<code>bg-layer</code>层的<code>transform</code>外向的偏移，让它随着滚动，所以要监听滚动的距离。给scroll组件添加个<code>probeType</code>，在created时添加<code>probeType</code>和<code>listenScroll</code>属性，这样就可以实时监听scroll位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;scroll :probe-type=<span class="string">"probeType"</span> :listen-scroll=<span class="string">"listenScroll"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> :data=<span class="string">"songs"</span> ref=<span class="string">"list"</span>&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list-wrapper"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></div><div class="line"></div><div class="line">created () &#123;</div><div class="line">  <span class="keyword">this</span>.probeType = <span class="number">3</span></div><div class="line">  <span class="keyword">this</span>.listenScroll = <span class="literal">true</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>监听个scroll事件，首先要维护一个纵向滚动的值，在data里定义scrollY变量默认为0。</p><p><img src="http://oxkc6g4t4.bkt.clouddn.com/v37.png" alt="v37"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">scrollY</span>: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">    &#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  scroll (pos) &#123;</div><div class="line">    <span class="keyword">this</span>.scrollY = pos.y</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>给scrollY赋值就可以实时拿到scrollY的值。接着要做的是在滚动时拿到scrollY的值来设置bg-layer的偏移量。</p><p>设置bg-layer的滚动，watch scrollY。获取layer的<code>transform</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  scrollY (newY) &#123;</div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;newY&#125;</span>px,0)`</span></div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;newY&#125;</span>px,0)`</span></div><div class="line">  &#125;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure><p>发现个问题，滚动时图片还是会露出来，是因为bg-layer层的高度是100%。如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v38.png" alt="v38"></p><p>这里就要做个限制。bg-layer随着scroll滚动时并不是无限滚动的过程，只需要滚动到一个位置就行了。所以要设置它的最大的滚动距离。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line">  <span class="keyword">this</span>.imageHeight = <span class="keyword">this</span>.$refs.bgImage.clientHeight</div><div class="line">  <span class="comment">// 最小translateY值</span></div><div class="line">  <span class="keyword">this</span>.minTranslateY = -<span class="keyword">this</span>.imageHeight</div><div class="line">  <span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.imageHeight&#125;</span>px`</span></div><div class="line">    &#125;,</div><div class="line"><span class="attr">watch</span>: &#123;</div><div class="line">  scrollY (newY) &#123;</div><div class="line">    <span class="comment">// 最大滚动距离</span></div><div class="line">    <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">    <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>记录背景图的高度和最小translateY值，计算出最大滚动距离。</p><p>为了不让bg-layer滚动到顶部，只需要修改minTranslateY，这里定义个常量<code>RESERVED_HEIGHT</code>高度为40的偏移量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> RESERVED_HEIGHT = <span class="number">40</span></div><div class="line"></div><div class="line">mounted () &#123;</div><div class="line">  <span class="keyword">this</span>.imageHeight = <span class="keyword">this</span>.$refs.bgImage.clientHeight</div><div class="line">  <span class="keyword">this</span>.minTranslateY = -<span class="keyword">this</span>.imageHeight + RESERVED_HEIGHT</div><div class="line">  <span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.imageHeight&#125;</span>px`</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/V39.png" alt="V39"></p><p>红线圈出的部分就是<code>RESERVED_HEIGHT</code>的高度。</p><p>由图可以看出，当滚动到顶部时文字会遮住图片，实际效果是希望滚动到定不是图片会遮住文字。</p><p>bg-layer层的position为relative布局的，设置z-index为10就会发现图片会遮住文字，但又会发现这时图片的高度是不对的，图片完全遮住文字就没有刚才的效果了，这里需要修改z-index和图片的高度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      scrollY (newY) &#123;</div><div class="line">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">        <span class="keyword">let</span> zIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="comment">// 当滚动到顶部时</span></div><div class="line">        <span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</div><div class="line">      &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>这样跟随滚动的效果就实现，同时达到了滚动到顶部<code>overflow</code>是<code>hidden</code>的状态</p><h3 id="图片跟随滚动放大效果"><a href="#图片跟随滚动放大效果" class="headerlink" title="图片跟随滚动放大效果"></a>图片跟随滚动放大效果</h3><p>当鼠标下拉时，图片跟着有放大的效果，修改transform的scale，定义scale默认为1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      scrollY (newY) &#123;</div><div class="line">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">        <span class="keyword">let</span> zIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> scale = <span class="number">1</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="comment">// 计算scale的比例</span></div><div class="line">        <span class="keyword">const</span> percent = <span class="built_in">Math</span>.abs(newY / <span class="keyword">this</span>.imageHeight)</div><div class="line">        <span class="comment">// 往下拉时计算scale的值</span></div><div class="line">        <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</div><div class="line">          scale = <span class="number">1</span> + percent</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 当滚动到顶部时</span></div><div class="line">        <span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'transform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'webkitTransform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">      &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>鼠标往下拉时，图片也跟着往下有一点距离，它是无缝的，计算scale的值为<code>scale = 1 + percent</code>。背景图片的高度(this.imageHeight)乘以scale就等于增加newY的高度，所以图片的高度和newY的滚动是相契合的。</p><h3 id="图片跟随滚动高速模糊"><a href="#图片跟随滚动高速模糊" class="headerlink" title="图片跟随滚动高速模糊"></a>图片跟随滚动高速模糊</h3><p>当鼠标下拉时，希望图片有高速模糊的效果并且模糊效果随着图片向上滑时模糊度更大。定义变量blur，当newY&gt;0时设置blur的比例值，然后设置bg-image的filter的样式属性<code>backdrop-filter</code>（backdrio-filter是css高速模糊的属性）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">      scrollY (newY) &#123;</div><div class="line">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTranslateY, newY)</div><div class="line">        <span class="keyword">let</span> zIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> scale = <span class="number">1</span></div><div class="line">        <span class="keyword">let</span> blur = <span class="number">0</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'transform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.layer.style[<span class="string">'webkitTransform'</span>] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></div><div class="line">        <span class="keyword">const</span> percent = <span class="built_in">Math</span>.abs(newY / <span class="keyword">this</span>.imageHeight)</div><div class="line">        <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</div><div class="line">          scale = <span class="number">1</span> + percent</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 设置blur的值</span></div><div class="line">          blur = <span class="built_in">Math</span>.min(<span class="number">20</span> * percent, <span class="number">20</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置filter的模糊度</span></div><div class="line">        <span class="keyword">this</span>.$refs.filter.style[<span class="string">'backdrop-filter'</span>] = <span class="string">`blur(<span class="subst">$&#123;blur&#125;</span>px)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.filter.style[<span class="string">'webkitBackdrop-filter'</span>] = <span class="string">`blur(<span class="subst">$&#123;blur&#125;</span>px)`</span></div><div class="line">        <span class="comment">// 当滚动到顶部时</span></div><div class="line">        <span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">          zIndex = <span class="number">10</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'transform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">        <span class="keyword">this</span>.$refs.bgImage.style[<span class="string">'webkitTransform'</span>] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><h2 id="实现返回键事件-click-quot-back-quot"><a href="#实现返回键事件-click-quot-back-quot" class="headerlink" title="实现返回键事件@click=&quot;back&quot;"></a>实现返回键事件<code>@click=&quot;back&quot;</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;music-list&quot;&gt;</div><div class="line">    &lt;div class=&quot;back&quot; @click=&quot;back&quot;&gt;</div><div class="line">      &lt;i class=&quot;icon-back&quot;&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    ....</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="实现背景图片里的按钮"><a href="#实现背景图片里的按钮" class="headerlink" title="实现背景图片里的按钮"></a>实现背景图片里的按钮</h2><p>随机播放全部按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;bg-image&quot; :style=&quot;bgStyle&quot; ref=&quot;bgImage&quot;&gt;</div><div class="line">      &lt;div class=&quot;play-wrapper&quot;&gt;</div><div class="line">        &lt;div class=&quot;play&quot;&gt;</div><div class="line">          &lt;i class=&quot;icon-play&quot;&gt;&lt;/i&gt;</div><div class="line">          &lt;span class=&quot;text&quot;&gt;随机播放全部&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;filter&quot; ref=&quot;filter&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>当数据加载完成时再显示按钮渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;play&quot; v-show=&quot;songs.length&gt;0&quot;&gt;</div></pre></td></tr></table></figure><p>当滚动到顶部时让随机播放全部按钮消失。</p><p>watch scrollY方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当滚动到顶部时</span></div><div class="line"><span class="keyword">if</span> (newY &lt; <span class="keyword">this</span>.minTranslateY) &#123;</div><div class="line">  zIndex = <span class="number">10</span></div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></div><div class="line">  <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">'none'</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></div><div class="line">  <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></div><div class="line">  <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="加载中效果"><a href="#加载中效果" class="headerlink" title="加载中效果"></a>加载中效果</h2><p>最后在scroll组件里注册loading组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;loading-container&quot; v-show=&quot;!songs.length&quot;&gt;</div><div class="line">    &lt;loading&gt;&lt;/loading&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接 &lt;a href=&quot;https://kakajing.github.io/2017/10/15/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8AVuex%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/&quot;&gt;Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;交互效果&quot;&gt;&lt;a href=&quot;#交互效果&quot; class=&quot;headerlink&quot; title=&quot;交互效果&quot;&gt;&lt;/a&gt;交互效果&lt;/h2&gt;&lt;h3 id=&quot;图片跟随滑动变小&quot;&gt;&lt;a href=&quot;#图片跟随滑动变小&quot; class=&quot;headerlink&quot; title=&quot;图片跟随滑动变小&quot;&gt;&lt;/a&gt;图片跟随滑动变小&lt;/h3&gt;&lt;p&gt;当歌曲列表往上滑动时，图片跟随滑动变小以展示更多歌曲数据，当往下拉时，图片跟着放大。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一</title>
    <link href="http://kakajing.github.io/2017/10/15/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8AVuex%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/"/>
    <id>http://kakajing.github.io/2017/10/15/Vue音乐播放器开发（四）：歌手详情页开发以及Vuex的使用一/</id>
    <published>2017-10-15T08:33:24.000Z</published>
    <updated>2017-10-25T09:41:32.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="歌手详情页开发"><a href="#歌手详情页开发" class="headerlink" title="歌手详情页开发"></a>歌手详情页开发</h1><p><strong>singer-detail.vue</strong>子组件开发及配置<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;singer-detail&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style scoped lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt;</div><div class="line">  .slide-enter-active, .slide-leave-active</div><div class="line">    transition: all 0.3s</div><div class="line"></div><div class="line">  .slide-enter, .slide-leave-to</div><div class="line">    transform: translate3d(100%, 0, 0)</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>需要在一级路由中嵌套二级路由，修改<strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">path</span>: <span class="string">'/singer'</span>,</div><div class="line">     <span class="attr">component</span>: Singer,</div><div class="line">     <span class="attr">children</span>: [</div><div class="line">       &#123;</div><div class="line">         <span class="attr">path</span>: <span class="string">':id'</span>,</div><div class="line">         <span class="attr">component</span>: SingerDetail</div><div class="line">       &#125;</div><div class="line">     ]</div><div class="line">   &#125;,</div></pre></td></tr></table></figure><p>使用<code>&lt;router-view&gt;&lt;/router-view&gt;</code>在singer.vue组件里挂载这个子路由<br><img src="http://oxkc6g4t4.bkt.clouddn.com/v24.png" alt="v24"></p><p>当点击列表元素时页面跳转至子路由，由于这个列表是基于listview实现的，所以在listview组件里添加<code>selectItem(item)</code>点击事件。listview是个基础组件，它的点击事件不会有任何逻辑相关的，做的事情仅仅是把这个事件触发出去，告诉外部我被点击了以及点击我的元素是什么，只有点击这个事件的人才会决定要做什么事。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v25.png" alt="v25"></p><blockquote><p> <code>$emit</code>：子组件改变父组件的值，通过on将父组件的事件绑定到子组件，在子组件中通过emit来触发<code>​$on</code>绑定的父组件事件</p></blockquote><p>实际情况下，有很多按钮在执行跳转之前，还会执行一系列方法，这时可使用<code>this.$router.push(location)</code> 来修改 url，完成跳转。接着在singer组件里监听这个事件，item在这其实是singer的实例</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v26.png" alt="v26"></p><p> 使用<code>&lt;transition&gt;&lt;/transition&gt;</code>给子路由singer-detail组件加个动画看上去更美观</p><p><strong>singer-detail.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;transition name=&quot;slide&quot;&gt;</div><div class="line">    &lt;music-list :songs=&quot;songs&quot; :title=&quot;title&quot; :bg-image=&quot;bgImage&quot;&gt;&lt;/music-list&gt;</div><div class="line">  &lt;/transition&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="初识vuex"><a href="#初识vuex" class="headerlink" title="初识vuex"></a>初识vuex</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>当你打算开发大型单页应用（SPA），会出现多个视图组件依赖同一个状态，来自不同视图的行为需要变更同一个状态。遇到以上情况时候，你就应该考虑使用Vuex了，它能把组件的共享状态抽取出来，当做一个全局单例模式进行管理。这样不管你在何处改变状态，都会通知使用该状态的组件做出相应修改。</p><p>简单来说，vuex 就是使用一个 store 对象来包含所有的应用层级状态，也就是数据的来源。当然如果应用比较庞大，我们可以将 store 模块化，也就是每个模块都有自己的 store。</p><h4 id="store-有四个属性"><a href="#store-有四个属性" class="headerlink" title="store 有四个属性"></a>store 有四个属性</h4><p>store 有四个属性：state， getters, mutations, actions</p><ul><li><p>state：简单说就是变量，也就是所谓的状态。</p></li><li><p>getters：存放一些公共函数供组件调用。</p></li><li><p>mutations：我们要改变 state 的一些方法，有点像是事件注册。</p><blockquote><p>一条重要的原则就是要记住 mutation 必须是同步函数。</p></blockquote></li><li><p>actions：管理触发条件。mutation 像事件注册，需要相应的触发条件。而 Action 就那个管理触发条件的。</p><blockquote><p>Action 类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。 </p></blockquote></li></ul><p>当 mutation 事件类型比较多的时候，我们可以使用常量替代 mutation 事件类型。同时把这些常量放在单独的文件（mutation-types.js）中可以让我们的代码合作者对整个 app 包含的 mutation 一目了然。</p><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>Vuex提供一些辅助函数帮助我们使用这些属性：</p><ul><li><p>mapState：当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。</p></li><li><p>mapGetters：仅仅是将 store 中的 getter 映射到局部计算属性。</p></li><li>mapMutations：将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</li><li>mapActions：将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）。</li></ul><h4 id="引入Vuex"><a href="#引入Vuex" class="headerlink" title="引入Vuex"></a>引入Vuex</h4><p>1、安装 vuex</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vuex --save</div></pre></td></tr></table></figure><p>2、新建一个store文件夹（这个不是必须的），并在文件夹下新建index.js文件，文件中引入vue和vuex。目录结构如下：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v28.png" alt="v28"></p><p><strong>index.js</strong>入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></div><div class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></div><div class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></div><div class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  actions,</div><div class="line">  getters,</div><div class="line">  state,</div><div class="line">  mutations,</div><div class="line">  <span class="attr">strict</span>: debug,</div><div class="line">  <span class="attr">plugins</span>: debug ? [createLogger()] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>3、在main.js 中引入新建的vuex文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  store,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="歌手数据的配置"><a href="#歌手数据的配置" class="headerlink" title="歌手数据的配置"></a>歌手数据的配置</h2><p>回归项目，在state定义singer变量，继而做一系列数据处理。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v27.png" alt="v27"></p><p> 当singer组件跳转时改变singer数据，通过mapMutations做对象映射，把mutation映射成方法名，把<code>setSinger</code>当做vue数据。</p><p><strong>singer.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">  selectSinger (singer) &#123;</div><div class="line">        <span class="keyword">this</span>.$router.push(&#123;</div><div class="line">          <span class="attr">path</span>: <span class="string">`/singer/<span class="subst">$&#123;singer.id&#125;</span>`</span></div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">this</span>.setSinger(singer)</div><div class="line">      &#125;,</div><div class="line">  ...mapMutations(&#123;</div><div class="line">        <span class="attr">setSinger</span>: <span class="string">'SET_SINGER'</span></div><div class="line">      &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在singer-detail组件获取singer数据，通过mapGetters扩展到computed计算属性里，做完这层映射就可以在vue实例中挂载一个singer的属性，然后就可以拿到singer。</p><p><strong>singer-detail.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">  ...mapGetters([</div><div class="line">    <span class="string">'singer'</span></div><div class="line">  ])</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p><code>console.log(this.singer)</code>观察一下组件跳转的数据传递</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v29.png" alt="v29"></p><p>由此，通过vuex解决路由之间数据参数传递的问题。</p><h2 id="歌手详情数据抓取"><a href="#歌手详情数据抓取" class="headerlink" title="歌手详情数据抓取"></a>歌手详情数据抓取</h2><p>根据传入的singer抓取到歌手详情</p><p><strong>singer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingerDetail</span> (<span class="params">singerId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_track_cp.fcg'</span></div><div class="line"></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    <span class="attr">hostUin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">needNewCode</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">platform</span>: <span class="string">'h5page'</span>,</div><div class="line">    <span class="attr">order</span>: <span class="string">'listen'</span>,</div><div class="line">    <span class="attr">begin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">num</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">songstatus</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">g_tk</span>: <span class="number">5381</span>,</div><div class="line">    <span class="attr">singermid</span>: singerId</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> jsonp(url, data, options)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>singer-detail.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    created () &#123;</div><div class="line">      <span class="keyword">this</span>._getDetail()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      _getDetail () &#123;</div><div class="line">        getSingerDetail(<span class="keyword">this</span>.singer.id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.code === ERR_OK) &#123;</div><div class="line">            <span class="built_in">console</span>.log(res.data.list)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>获取到数据：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v30.png" alt="v30"></p><p> 这里发现个问题，在当前页面刷新获取不到数据，因为刷新是直接进入到子路由，之前并不知道歌手的相关信息是个空对象。在这里加个判断，也就是说如果在子路由刷新了，就让它会退到上级。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v31.png" alt="v31"></p><h4 id="歌手详情数据处理"><a href="#歌手详情数据处理" class="headerlink" title="歌手详情数据处理"></a>歌手详情数据处理</h4><p>除了歌手详情数据之外，还有歌单详情数据以及排行榜数据都包含歌曲数据，既然每个列表都有歌曲数据，那么就对歌曲数据进行抽象。</p><p><strong>common/js/song.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (&#123;id, mid, singer, name, album, duration, image, url&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id</div><div class="line">    <span class="keyword">this</span>.mid = mid</div><div class="line">    <span class="keyword">this</span>.singer = singer</div><div class="line">    <span class="keyword">this</span>.ablum = album</div><div class="line">    <span class="keyword">this</span>.duration = duration</div><div class="line">    <span class="keyword">this</span>.image = image</div><div class="line">    <span class="keyword">this</span>.url = url</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在每首歌曲都是musicdata里的数据，需要把这些数据提取成我们需要的部分构造成我们所需要的数据对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createSong</span> (<span class="params">musicData</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Song(&#123;</div><div class="line">    <span class="attr">id</span>: musicData.songid,</div><div class="line">    <span class="attr">mid</span>: musicData.songmid,</div><div class="line">    <span class="attr">singer</span>: filerSinger(musicData.singer),</div><div class="line">    <span class="attr">name</span>: musicData.songname,</div><div class="line">    <span class="attr">album</span>: musicData.albumname,</div><div class="line">    <span class="attr">duration</span>: musicData.interval,</div><div class="line">    <span class="attr">image</span>: <span class="string">`https://y.gtimg.cn/music/photo_new/T002R150x150M000<span class="subst">$&#123;musicData.albummid&#125;</span>.jpg?max_age=2592000`</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">`http://ws.stream.qqmusic.qq.com/<span class="subst">$&#123;musicData.songid&#125;</span>.m4a?fromtag=46`</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>singer是个数组，但我们需要的是字符串，数据可以直接运用在dom上，不需要额外再做处理。对singer进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filerSinger</span> (<span class="params">singer</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> ret = []</div><div class="line">  <span class="keyword">if</span> (!singer) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">  singer.forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</div><div class="line">    ret.push(s.name)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> ret.join(<span class="string">'/'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对歌手详情数据做最后的处理</p><p>   <img src="http://oxkc6g4t4.bkt.clouddn.com/v32.png" alt="v32"></p><h4 id="music-list组件开发"><a href="#music-list组件开发" class="headerlink" title="music-list组件开发"></a>music-list组件开发</h4><p>歌手详情页面、歌单详情页面、排行榜详情页面都是类似的，所以可以把这些类似的页面抽象成一个通用的业务组件<code>music-list.vue</code>。它们不同的是数据差异，这些差异可以通过props数据传入。</p><p><strong>music-list.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;music-list&quot;&gt;</div><div class="line">    &lt;div class=&quot;back&quot;&gt;</div><div class="line">      &lt;i class=&quot;icon-back&quot;&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;</div><div class="line">    &lt;div class=&quot;bg-image&quot;&gt;</div><div class="line">      &lt;div class=&quot;filter&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      bgImage: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;&apos;</div><div class="line">      &#125;,</div><div class="line">      songs: &#123;</div><div class="line">        type: Array,</div><div class="line">        default: []</div><div class="line">      &#125;,</div><div class="line">      title: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>music-list组件注册到singer-detail组件里，同时需要在music-list组件传入songs、title、bgImage三个参数，其中title和bgImage通过计算属性得到。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v33.png" alt="v33"></p><h4 id="传入title和bgImage的数据"><a href="#传入title和bgImage的数据" class="headerlink" title="传入title和bgImage的数据"></a>传入title和bgImage的数据</h4><p>效果图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v34.png" alt="v34"></p><h4 id="使用scroll组件做歌曲滚动列表"><a href="#使用scroll组件做歌曲滚动列表" class="headerlink" title="使用scroll组件做歌曲滚动列表"></a>使用scroll组件做歌曲滚动列表</h4><p>和music-list组件同理，把歌曲页面抽象成一个通用的基础组件<code>song-list.vue</code>。</p><p>song-list组件需要接收个songs数据，然后遍历songs。</p><p><strong>song-list.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;song-list&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;song in songs&quot; class=&quot;item&quot;&gt;</div><div class="line">        &lt;div class=&quot;content&quot;&gt;</div><div class="line">          &lt;h2 class=&quot;name&quot;&gt;&#123;&#123;song.name&#125;&#125;&lt;/h2&gt;</div><div class="line">          &lt;p class=&quot;desc&quot;&gt;&#123;&#123;getDesc(song)&#125;&#125;&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      songs: &#123;</div><div class="line">        type: Array,</div><div class="line">        default: []</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      getDesc (song) &#123;</div><div class="line">        return `$&#123;song.singer&#125; 。 $&#123;song.album&#125;`</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="展示歌曲数据"><a href="#展示歌曲数据" class="headerlink" title="展示歌曲数据"></a>展示歌曲数据</h4><p>在<code>music-list</code>组件里运用<code>song-list</code>，首先使用scroll组件包裹歌曲列表，为了控制它的样式包裹一个<code>class</code>为<code>song-list-wrapper</code>的<code>div</code>，注册<code>song-list</code>组件，传入<code>songs</code>数据，为了正确计算它的高度，在scroll组件传入songs作为它的数据。效果如下：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v35.png" alt="v35"></p><p> 滚动列表发现scroll的top值不对，根据不同浏览器大小背景图所占高度不一样，我们可以通过计算得到它。在mounted钩子里拿到scroll控制它的top值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line"><span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.$refs.bgImage.clientHeight&#125;</span>`</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>scroll组件的top就等于bgImage的高度。</p><p>通过css设置背景图的宽高比为70%占位，这样就得到了bgImage的高度。在图片加载之前就已经知道它的高度了，同样就可以设置scroll组件的top值。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v36.png" alt="v36"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;歌手详情页开发&quot;&gt;&lt;a href=&quot;#歌手详情页开发&quot; class=&quot;headerlink&quot; title=&quot;歌手详情页开发&quot;&gt;&lt;/a&gt;歌手详情页开发&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;singer-detail.vue&lt;/strong&gt;子组件开发及配置&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（三）：滚动列表开发和应用</title>
    <link href="http://kakajing.github.io/2017/10/12/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%BB%9A%E5%8A%A8%E5%88%97%E8%A1%A8%E5%BC%80%E5%8F%91%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>http://kakajing.github.io/2017/10/12/Vue音乐播放器开发（三）：滚动列表开发和应用/</id>
    <published>2017-10-12T12:17:04.000Z</published>
    <updated>2017-10-25T09:39:27.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌手页面开发"><a href="#歌手页面开发" class="headerlink" title="歌手页面开发"></a>歌手页面开发</h2><h3 id="歌手数据接口抓取"><a href="#歌手数据接口抓取" class="headerlink" title="歌手数据接口抓取"></a>歌手数据接口抓取</h3><a id="more"></a><p><strong>singer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'common/js/jsonp'</span></div><div class="line"><span class="keyword">import</span> &#123;commonParams, options&#125; <span class="keyword">from</span> <span class="string">'./config'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingerList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/v8.fcg'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    <span class="attr">channel</span>: <span class="string">'singer'</span>,</div><div class="line">    <span class="attr">page</span>: <span class="string">'list'</span>,</div><div class="line">    <span class="attr">key</span>: <span class="string">'all_all_all'</span>,</div><div class="line">    <span class="attr">pagesize</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">pagenum</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">hostUin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">platform</span>: <span class="string">'yqq'</span>,</div><div class="line">    <span class="attr">needNewCode</span>: <span class="number">0</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> jsonp(url, data, options)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>singer.vue</strong>获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</div><div class="line">  <span class="keyword">import</span> &#123;getSingerList&#125; <span class="keyword">from</span> <span class="string">'api/singer'</span></div><div class="line">  <span class="keyword">import</span> &#123;ERR_OK&#125; <span class="keyword">from</span> <span class="string">'api/config'</span></div><div class="line"></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    created() &#123;</div><div class="line">      <span class="keyword">this</span>._getSingerList()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      _getSingerList() &#123;</div><div class="line">        getSingerList().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (res.code === ERR_OK) &#123;</div><div class="line">            <span class="keyword">this</span>.singers = <span class="keyword">this</span>._normalizeSinger(res.data.list)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h3><p>获取到的数据发现并不是我想要的数据结构，那怎么处理请求获取到的数据？</p><p>思路：把歌手数据分做为两层数组，外层是ABCD为区分歌手的数组，另一层则是以字母为首相关的歌手(比如以A为首字母的歌手)的二级数组。<code>Findex</code>标识为ABCD，它是随机的，也没有热门的歌手数据。这里我把<code>Findex</code>做聚合，把相同的归类起来，其次把前10条数据作为热门数据提取出来，这样可以得到我想要的数据结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">_normalizeSinger(list) &#123;</div><div class="line">        <span class="keyword">let</span> map = &#123;</div><div class="line">          <span class="attr">hot</span>: &#123;</div><div class="line">            <span class="attr">title</span>: HOT_NAME,</div><div class="line">            <span class="attr">items</span>: []</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (index &lt; HOT_SINGER_LEN) &#123;</div><div class="line">            map.hot.items.push(<span class="keyword">new</span> Singer(&#123;</div><div class="line">              <span class="attr">name</span>: item.Fsinger_name,</div><div class="line">              <span class="attr">id</span>: item.Fsinger_mid</div><div class="line">            &#125;))</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">const</span> key = item.Findex</div><div class="line">          <span class="keyword">if</span> (!map[key]) &#123;</div><div class="line">            map[key] = &#123;</div><div class="line">              <span class="attr">title</span>: key,</div><div class="line">              <span class="attr">items</span>: []</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          map[key].items.push(<span class="keyword">new</span> Singer(&#123;</div><div class="line">            <span class="attr">name</span>: item.Fsinger_name,</div><div class="line">            <span class="attr">id</span>: item.Fsinger_mid</div><div class="line">          &#125;))</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">// 为了得到有序列表，我们需要处理 map</span></div><div class="line">        <span class="keyword">let</span> ret = []</div><div class="line">        <span class="keyword">let</span> hot = []</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> map) &#123;</div><div class="line">          <span class="keyword">let</span> val = map[key]</div><div class="line">          <span class="keyword">if</span> (val.title.match(<span class="regexp">/[a-zA-Z]/</span>)) &#123;</div><div class="line">            ret.push(val)</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.title === HOT_NAME) &#123;</div><div class="line">            hot.push(val)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        ret.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">return</span> a.title.charCodeAt(<span class="number">0</span>) - b.title.charCodeAt(<span class="number">0</span>)</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">return</span> hot.concat(ret)</div><div class="line">      &#125;</div></pre></td></tr></table></figure><h3 id="歌手列表-—-滚动列表组件开发"><a href="#歌手列表-—-滚动列表组件开发" class="headerlink" title="歌手列表 — 滚动列表组件开发"></a>歌手列表 — 滚动列表组件开发</h3><p>列表组件也可以在其他地方使用，所以把它作为基础组件增加它的通用性。</p><p><strong>listview.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;scroll class=&quot;listview&quot; :data=&quot;data&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li class=&quot;list-group&quot; v-for=&quot;group in data&quot;&gt;</div><div class="line">        &lt;h2 class=&quot;list-group-title&quot;&gt;&#123;&#123;group.title&#125;&#125;&lt;/h2&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li class=&quot;list-group-item&quot; v-for=&quot;item in group.items&quot;&gt;</div><div class="line">            &lt;img class=&quot;avatar&quot; :src=&quot;item.avatar&quot;&gt;</div><div class="line">            &lt;span class=&quot;name&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/scroll&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import Scroll from &apos;base/scroll/scroll&apos;</div><div class="line"></div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      data: &#123;</div><div class="line">        type: Array,</div><div class="line">        default: []</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      Scroll</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>引入singer.vue组件并渲染到页面上，同时实现列表滚动。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v18.png" alt="v18"></p><p> 还有两个部分：右侧快速入口、滚动的时候会有固定的字母（title）显示列表上方</p><h3 id="右侧快速入口"><a href="#右侧快速入口" class="headerlink" title="右侧快速入口"></a>右侧快速入口</h3><p>右侧快速入口实际上就是以字母开头的title。首先构造一个可以被遍历的数组数据。</p><h4 id="获取右侧快速入口的列表"><a href="#获取右侧快速入口的列表" class="headerlink" title="获取右侧快速入口的列表"></a>获取右侧快速入口的列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;scroll class=&quot;listview&quot; :data=&quot;data&quot;&gt;</div><div class="line">    &lt;ul&gt;...&lt;/ul&gt;</div><div class="line"> &lt;div class=&quot;list-shortcut&quot;&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li class=&quot;item&quot; v-for=&quot;item in shortcutList&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/scroll&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">  ...</div><div class="line">  </div><div class="line">  computed: &#123;</div><div class="line">      shortcutList() &#123;</div><div class="line">        return this.data.map((group) =&gt; &#123;</div><div class="line">          return group.title.substr(0, 1)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="实现左右侧的交互-右侧栏滚动事件"><a href="#实现左右侧的交互-右侧栏滚动事件" class="headerlink" title="实现左右侧的交互(右侧栏滚动事件)"></a>实现左右侧的交互(右侧栏滚动事件)</h4><h5 id="touchstart点击事件"><a href="#touchstart点击事件" class="headerlink" title="@touchstart点击事件"></a><code>@touchstart</code>点击事件</h5><p>显示右侧入口栏仅仅是个dom，并没有其他交互行为。新建<code>@touchstart</code>点击事件，点击这个事件后滚动到相应的元素，那就要先知道滚到第几个元素才能知道左侧第几个组(group)，所以点的时候要获取到这个元素的索引，获取索引<code>:data-index=&quot;index&quot;</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">onShortcutTouchStart(e) &#123;</div><div class="line">  <span class="keyword">let</span> anchorIndex = getData(e.target, <span class="string">'index'</span>)</div><div class="line">  <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[anchorIndex], <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="touchMove事件"><a href="#touchMove事件" class="headerlink" title="@touchMove事件"></a><code>@touchMove</code>事件</h5><p>实现点击鼠标拖动右侧栏左侧歌手也跟着滚动到相应位置，监听<code>@touchMove</code>事件。要知道从touchstart到touchMove滚动的位置，计算当前位置和一开始滚动位置的差来算出滚动到第几个元素。在touchstart的时候记录当前的y值y1（<code>firstTouch.pageY</code>），然后在touchMove的时候又获取touch到的y值y2。</p><p>要有一个属性保存firstTouch的pageY位置，为了方便在两个函数之间相互获取这个数据，在created定义个touch对象（我们并不需要观测touch的变化，所以这里在created里定义）。</p><p>&gt;</p><blockquote><p><code>@touchmove.stop.prevent</code>的stop是为阻止事件向上冒泡。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">onShortcutTouchStart(e) &#123;</div><div class="line">  <span class="keyword">let</span> anchorIndex = getData(e.target, <span class="string">'index'</span>)</div><div class="line">  <span class="keyword">let</span> firstTouch = e.touches[<span class="number">0</span>]</div><div class="line">  <span class="comment">// 当前pageY值</span></div><div class="line">  <span class="keyword">this</span>.touch.y1 = firstTouch.pageY</div><div class="line">  <span class="comment">// 当前索引</span></div><div class="line">  <span class="keyword">this</span>.touch.anchorIndex = anchorIndex</div><div class="line">  <span class="keyword">this</span>._scrollTo(anchorIndex)</div><div class="line">&#125;,</div><div class="line">onShortcutTouchMove(e) &#123;</div><div class="line">  <span class="keyword">let</span> firstTouch = e.touches[<span class="number">0</span>]</div><div class="line">  <span class="keyword">this</span>.touch.y2 = firstTouch.pageY</div><div class="line">  <span class="comment">// y轴的偏移（偏移了几个锚点）</span></div><div class="line">  <span class="keyword">let</span> delta = (<span class="keyword">this</span>.touch.y2 - <span class="keyword">this</span>.touch.y1) / ANCHOR_HEIGHT | <span class="number">0</span></div><div class="line">  <span class="comment">// 获取touchmove时候滚动到的位置</span></div><div class="line">  <span class="keyword">let</span> anchorIndex = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.touch.anchorIndex) + delta</div><div class="line">  <span class="keyword">this</span>._scrollTo(anchorIndex)</div><div class="line">&#125;,</div><div class="line"> _scrollTo (index) &#123;</div><div class="line">   <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h4 id="左右联动"><a href="#左右联动" class="headerlink" title="左右联动"></a>左右联动</h4><p>根据左侧滚动右侧也滚动到相应的位置，同时滚动的位置字母显示高亮。比如滚动到C位置的时候C为高亮显示。</p><p>想要左右联动的话，首先必须知道当前滚动的时候右侧知道滚动的位置，要有一个变量记录滚动的位置也就是y轴的位置，根据实时滚动的位置计算我的位置落在哪个区间，所以要实时监听y轴的位置。这里要对scroll组件做一些拓展。</p><p><strong>scroll.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监听滚动事件</span></div><div class="line">listenScroll: &#123;</div><div class="line">  <span class="attr">type</span>: <span class="built_in">Boolean</span>,</div><div class="line">  <span class="attr">default</span>: <span class="literal">false</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>这里不需要关心它的滚动位置，所以default设置为false，如果是true的话，在初始化scroll的时候要加个逻辑，监听scroll的滚动事件从而触发scroll事件，这样就可以拿到它的位置，pos是个对象，包含x轴和y轴的属性。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v19.png" alt="v19"></p><p>在listview组件里实现滚动事件</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v20.png" alt="v20"></p><p>定义两个观测数据：</p><ul><li><p>scrollY：记录实时滚动的位置</p></li><li><p>currentIndex：当前显示的位置（currentIndex对应哪个谁谁就高亮）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">scrollY</span>: <span class="number">-1</span>,</div><div class="line">    <span class="attr">currentIndex</span>: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>要知道scroll落在哪个位置，首先这个列表的每个group都有高度，先计算每个group的高度。当data发生变化的时候要延迟计算它的高度，这里还要watch data的变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  _calculateHeight() &#123;</div><div class="line">        <span class="keyword">this</span>.listHeight = []</div><div class="line">        <span class="keyword">const</span> list = <span class="keyword">this</span>.$refs.listGroup</div><div class="line">        <span class="keyword">let</span> height = <span class="number">0</span></div><div class="line">        <span class="keyword">this</span>.listHeight.push(height)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">          <span class="keyword">let</span> item = list[i]</div><div class="line">          <span class="comment">// item是个dom，用clientHeight获取它的高度</span></div><div class="line">          height += item.clientHeight</div><div class="line">          <span class="keyword">this</span>.listHeight.push(height)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;,</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="attr">watch</span>: &#123;</div><div class="line">  data() &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>._calculateHeight()</div><div class="line">    &#125;, <span class="number">20</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有了listHeight，就方便观察scrollY变化时，scrollY和listHeight做对比就知道它落在第几个区间，从而就得到currentIndex。<br>观测scrollY</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  scrollY(newY) &#123;</div><div class="line">        <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listHeight.length; i++) &#123;</div><div class="line">          <span class="keyword">let</span> height1 = listHeight[i]</div><div class="line">          <span class="keyword">let</span> height2 = listHeight[i + <span class="number">1</span>]</div><div class="line">          <span class="keyword">if</span> (!height2 || (-newY &gt; height1 &amp;&amp; -newY &lt; height2)) &#123;</div><div class="line">            <span class="keyword">this</span>.currentIndex = i</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.currentIndex)</div><div class="line">            <span class="keyword">return</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.currentIndex = <span class="number">0</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>滚动时出现问题，发现监听不到在swipe的情况下的scroll事件，想要监听这种实时滚动的话就不截流这种方式，需要改变probeType的值，默认是1改成3。</p><blockquote><p>probeType: <code>1</code> 滚动的时候会派发scroll事件，会截流。<code>2</code>滚动的时候实时派发scroll事件，不会截流。 <code>3</code>除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件</p></blockquote><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v21.png" alt="v21"></p><p> 有了currentIndex，需要右侧栏有个active的效果，效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v22.png" alt="v22"></p><p> 当滚动到最底部的时候newY的值是大于0的，值就为负数它就永远不会落到这个区间。我们可以拆分为三种情况：歌手列表滚动到最顶部时、中间时和最底部时，最顶部时newY是大于0的，最底部时newY可能大于height2，也就是说newY值可以大于最后一个元素的上限。这样就可以在什么情况下应该怎么计算currentIndex，保证实时滚动currentIndex能计算出应该落到的位置。</p><p>对watch scrollY做些相应的改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scrollY(newY) &#123;</div><div class="line">       <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight</div><div class="line">       <span class="comment">// 当滚动到顶部，newY&gt;0</span></div><div class="line">       <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">this</span>.currentIndex = <span class="number">0</span></div><div class="line">         <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 在中间部分滚动</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listHeight.length - <span class="number">1</span>; i++) &#123;</div><div class="line">         <span class="keyword">let</span> height1 = listHeight[i]</div><div class="line">         <span class="keyword">let</span> height2 = listHeight[i + <span class="number">1</span>]</div><div class="line">         <span class="keyword">if</span> (-newY &gt; height1 &amp;&amp; -newY &lt; height2 ) &#123;</div><div class="line">           <span class="keyword">this</span>.currentIndex = i</div><div class="line">           <span class="keyword">return</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 当滚动到底部，且-newY大于最后一个元素的上限</span></div><div class="line">       <span class="keyword">this</span>.currentIndex = <span class="number">0</span></div><div class="line">     &#125;</div></pre></td></tr></table></figure><p>当点击右侧快速入口时可以切换左侧的位置，但是高亮并没有随之改动，是因为高亮并不是根据点击的位置，而是根据scrollY计算而来的，scrollY的变化又是根据scroll事件实时更新的，调用<code>_scrollTo(index)</code>方法让它滚动到相应的位置，但是这个滚动并没有触发滚动事件，所以监听不到scrollY的变化，需要手动去改变scrollY的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_scrollTo(index) &#123;</div><div class="line">  <span class="keyword">this</span>.scrollY = -<span class="keyword">this</span>.listHeight[index]</div><div class="line">  <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>解决右侧栏边界问题</p><p>为了页面好看右侧栏的上下两头分别多出一些边缘，但是这两个边缘点击是无意义的，不会触发任何滚动事件，做些逻辑处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_scrollTo (index) &#123;</div><div class="line">      <span class="comment">// 解决右侧栏边界问题</span></div><div class="line">      <span class="keyword">if</span> (!index &amp;&amp; index !== <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">    </div><div class="line">      <span class="keyword">this</span>.scrollY = -<span class="keyword">this</span>.listHeight[index]</div><div class="line">      <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>解决右侧栏滑动到最顶部直接跳到底部的问题</p><p><code>console.log(index)</code>发现滑动到最顶部是负值，最底部是无限大的值，是因为<code>touchmove</code>一直在执行，它的y值一直在变大，同样<code>anchorIndex</code>的值也变超。对于滑动顶部或底部做些边界条件处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">_scrollTo (index) &#123;</div><div class="line">       <span class="comment">// 解决右侧栏边界问题</span></div><div class="line">       <span class="keyword">if</span> (!index &amp;&amp; index !== <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">     </div><div class="line">       <span class="comment">// 解决右侧栏滑动到最顶部直接跳到底部的问题</span></div><div class="line">       <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">         index = <span class="number">0</span></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; <span class="keyword">this</span>.listHeight.length - <span class="number">2</span>) &#123;</div><div class="line">         index = <span class="keyword">this</span>.listHeight.length - <span class="number">2</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">this</span>.scrollY = -<span class="keyword">this</span>.listHeight[index]</div><div class="line">       <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</div><div class="line">     &#125;,</div></pre></td></tr></table></figure><h3 id="滚动固定标题实现-fixed-title"><a href="#滚动固定标题实现-fixed-title" class="headerlink" title="滚动固定标题实现(fixed-title)"></a>滚动固定标题实现(fixed-title)</h3><p>fixed-title：当我们滚动到某个区块，列表顶部会显示对应的名称，其实和右侧显示高亮有异曲同工之妙，不同的是dom实现不一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;list-fixed&quot; v-show=&quot;fixedTitle&quot;&gt;</div><div class="line">&lt;h1 class=&quot;fixed-title&quot;&gt;&#123;&#123;fixedTitle&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">     fixedTitle () &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.scrollY &gt; <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="string">''</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.currentIndex] ? <span class="keyword">this</span>.data[<span class="keyword">this</span>.currentIndex].title : <span class="string">''</span></div><div class="line">     &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure><p>当滚动时左侧列表顶部需要有一个fixed-title，当两个title重合的时候要有一个title往上顶的效果，在data里定义一个diff。diff表示滚动到的区块的上限和当前滚动位置的滚动差。</p><p>观测scrollY做些改变：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v23.png" alt="v23"></p><p>观测diff的变化来设置fixed-tit1e的偏移。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  diff(newVal) &#123;</div><div class="line">        <span class="keyword">let</span> fixedTop = (newVal &gt; <span class="number">0</span> &amp;&amp; newVal &lt; TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fixedTop === fixedTop) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.fixedTop = fixedTop</div><div class="line">        <span class="keyword">this</span>.$refs.fixed.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;fixedTop&#125;</span>px,0)`</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>歌手列表是异步获取的，这里也要使用loading效果，listview里引入loading组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;loading-container&quot; v-show=&quot;!data.length&quot;&gt;</div><div class="line">    &lt;loading&gt;&lt;/loading&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>左右联动思路：想要达到左右联动，首先需要实时知道滚动位置，根据滚动位置计算出当前位置是落到哪个group的区间，相应的算出右边哪个索引应该高亮，结合vue的watch观测数据变化。</p><h3 id="具体源代码"><a href="#具体源代码" class="headerlink" title="具体源代码"></a>具体源代码</h3><p>参考：<a href="https://github.com/kakajing/vue-music" target="_blank" rel="external">https://github.com/kakajing/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌手页面开发&quot;&gt;&lt;a href=&quot;#歌手页面开发&quot; class=&quot;headerlink&quot; title=&quot;歌手页面开发&quot;&gt;&lt;/a&gt;歌手页面开发&lt;/h2&gt;&lt;h3 id=&quot;歌手数据接口抓取&quot;&gt;&lt;a href=&quot;#歌手数据接口抓取&quot; class=&quot;headerlink&quot; title=&quot;歌手数据接口抓取&quot;&gt;&lt;/a&gt;歌手数据接口抓取&lt;/h3&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（二）：轮播图和滚动的实现</title>
    <link href="http://kakajing.github.io/2017/10/09/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%92%8C%E6%BB%9A%E5%8A%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://kakajing.github.io/2017/10/09/Vue音乐播放器开发（二）：轮播图和滚动的实现/</id>
    <published>2017-10-09T13:05:42.000Z</published>
    <updated>2017-10-25T09:39:44.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐页面开发"><a href="#推荐页面开发" class="headerlink" title="推荐页面开发"></a>推荐页面开发</h2><p>推荐页面分为两个页面：首页和歌单详情页面</p><a id="more"></a><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>首页分为：轮播图、歌单列表</p><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><p>参考QQ音乐抓取轮播图数据，以jsonp的形式返回数据。首先，对jsonp进行封装。</p><p>了解jsonp：<a href="https://github.com/webmodules/jsonp" target="_blank" rel="external">https://github.com/webmodules/jsonp</a></p><p><strong>jsonp.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> originJsonp <span class="keyword">from</span> <span class="string">'jsonp'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span> (<span class="params">url, data, option</span>) </span>&#123;</div><div class="line">  url += (url.indexOf(<span class="string">'?'</span>) &lt; <span class="number">0</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>) + param(data)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    originJsonp(url, option, (err, data) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (!err) &#123;</div><div class="line">        resolve(data)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> url = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</div><div class="line">    <span class="keyword">let</span> value = data[k] !== <span class="literal">undefined</span> ? data[k] : <span class="string">''</span></div><div class="line">    url += <span class="string">'&amp;'</span> + k + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> url ? url.substring(<span class="number">1</span>) : <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="编写轮播图组件"><a href="#编写轮播图组件" class="headerlink" title="编写轮播图组件"></a>编写轮播图组件</h5><p><strong>slider.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;slider&quot;&gt;</div><div class="line">    &lt;div class=&quot;slider-group&quot;&gt;</div><div class="line">      &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;dots&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h5 id="抓取轮播图数据"><a href="#抓取轮播图数据" class="headerlink" title="抓取轮播图数据"></a>抓取轮播图数据</h5><p><strong>recommend.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'common/js/jsonp'</span></div><div class="line"><span class="keyword">import</span> &#123;commonParams, options&#125; <span class="keyword">from</span> <span class="string">'./config'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRecommend</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    <span class="attr">platform</span>: <span class="string">'h5'</span>,</div><div class="line">    <span class="attr">uin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">needNewCode</span>: <span class="number">1</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> jsonp(url, data, options)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>recommend.vue</code>组件里实现获取到轮播图数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;recommend&quot;&gt;</div><div class="line">    &lt;div class=&quot;recommend-content&quot;&gt;</div><div class="line">      &lt;div class=&quot;slider-wrapper&quot;&gt;</div><div class="line">        &lt;slider&gt;</div><div class="line">          &lt;div v-for=&quot;item in recommends&quot;&gt;</div><div class="line">            &lt;a :href=&quot;item.linkUrl&quot;&gt;</div><div class="line">              &lt;img :src=&quot;item.picUrl&quot;&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/slider&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;recommend-list&quot;&gt;</div><div class="line">        &lt;h1 class=&quot;list-title&quot;&gt;热门歌单推荐&lt;/h1&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import Slider from &apos;base/slider/slider&apos;</div><div class="line">  import &#123;getRecommend&#125; from &apos;api/recommend&apos;</div><div class="line">  import &#123;ERR_OK&#125; from &apos;api/config&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        recommends: []</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    created () &#123;</div><div class="line">      this._getRecommend()</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      _getRecommend () &#123;</div><div class="line">        getRecommend().then((res) =&gt; &#123;</div><div class="line">          if (res.code === ERR_OK) &#123;</div><div class="line">            this.recommends = res.data.slider</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      Slider</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v7.png" alt="v7"></p><p>如上图很不符合我们的要求，我在这里使用第三方插件better-scroll来实现轮播图滚动功能。</p><h5 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a>better-scroll</h5><p><strong>better-scroll 是什么</strong></p><p>better-scroll 是一款重点解决移动端（未来可能会考虑 PC 端）各种滚动场景需求的插件。它是基于原生 JS 实现的，不依赖任何框架。</p><p><strong>better-scroll滚动原理</strong>：浏览器的滚动条大家都会遇到，当页面内容的高度超过视口高度的时候，会出现纵向滚动条；当页面内容的宽度超过视口宽度的时候，会出现横向滚动条。也就是当我们的视口展示不下内容的时候，会通过滚动条的方式让用户滚动屏幕看到剩余的内容。</p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install better-scrll</div></pre></td></tr></table></figure><p>了解better-scroll具体参考：<a href="http://npm.taobao.org/package/better-scroll" target="_blank" rel="external">http://npm.taobao.org/package/better-scroll</a></p><p>设置slider的属性</p><p><strong>slider.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">props: &#123;</div><div class="line">      <span class="attr">loop</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">Boolean</span>,</div><div class="line">        <span class="attr">default</span>: <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">autoPlay</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">Boolean</span>,</div><div class="line">        <span class="attr">default</span>: <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">interval</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">        <span class="attr">default</span>: <span class="number">4000</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有时候会出现初始化后不能滚动或者报错，是因为在初始化时没有渲染或者宽度或高度计算出错，为了保证渲染正确使用mounted钩子做一些初始化操作<code>_setSliderWidth()</code>、<code>_initSlider()</code>方法</p><blockquote><p>mounted：<code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</p></blockquote><p><strong>slider.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">moundted () &#123;</div><div class="line">      <span class="keyword">this</span>._setSliderWidth()</div><div class="line">      <span class="keyword">this</span>._initSlider()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      _setSliderWidth () &#123;</div><div class="line">        <span class="keyword">this</span>.children = <span class="keyword">this</span>.$refs.sliderGroup.children</div><div class="line"></div><div class="line">        <span class="keyword">let</span> width = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> sliderWidth = <span class="keyword">this</span>.$refs.slider.clientWidth</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.children.length; i++) &#123;</div><div class="line">          <span class="keyword">let</span> child = <span class="keyword">this</span>.children[i]</div><div class="line">          <span class="comment">// 给每个元素添加slider-item名称</span></div><div class="line">          addClass(child, <span class="string">'slider-item'</span>)</div><div class="line"></div><div class="line">          child.style.width = sliderWidth + <span class="string">'px'</span></div><div class="line">          width += sliderWidth</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.loop) &#123;</div><div class="line">          width += <span class="number">2</span> * sliderWidth</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.$refs.sliderGroup.style.width = width + <span class="string">'px'</span></div><div class="line">      &#125;,</div><div class="line">      _initSlider () &#123;</div><div class="line">        <span class="keyword">this</span>.slider = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.slider, &#123;</div><div class="line">          <span class="attr">scrollX</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">scrollY</span>: <span class="literal">false</span>,</div><div class="line">          <span class="attr">momentum</span>: <span class="literal">false</span>,</div><div class="line">          <span class="attr">snap</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">snapLoop</span>: <span class="keyword">this</span>.loop,</div><div class="line">          <span class="attr">snapThreshold</span>: <span class="number">0.3</span>,</div><div class="line">          <span class="attr">snapSpeed</span>: <span class="number">400</span>,</div><div class="line">          <span class="attr">click</span>: <span class="literal">true</span></div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这儿没有渲染成功，可以思考个问题：我们在mounted 的时候<code>&lt;slot&gt;&lt;/slot&gt;</code>里有没有东西？</p><p>在渲染<code>recommends</code>的时候，初始化<code>_getRecommend()</code>，<code>getRecommend()</code>是个异步过程，它可能会有几秒的延迟，所以当<code>recommends</code>还没有获取到的时候也就是<code>&lt;slot&gt;&lt;/slot&gt;</code>里没有东西，mounted钩子已经执行了，为了确保<code>&lt;slot&gt;&lt;/slot&gt;</code>里有东西再执行mounted，对<code>recommends</code>进行判断。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v8.png" alt="v8"></p><h5 id="dots滚动实现"><a href="#dots滚动实现" class="headerlink" title="dots滚动实现"></a>dots滚动实现</h5><p>mounted初始化dots，在data里定义dots实现页面渲染。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v9.png" alt="v9"></p><p>定义<code>currentPageIndex</code>，把滚动到当前页的<code>dot</code>与<code>currentPageIndex</code>绑定起来<code>:class=&quot;{active: currentPageIndex === index}&quot;</code>，better-scroll在滚动的时候实现一个事件，所以在初始化slider的时候绑定一个<code>scrollEnd</code>事件，来实现<code>dot</code>和<code>currentPageIndex</code>的绑定</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;div class="dots"&gt;</div><div class="line">      &lt;span class="dot" :class="&#123;active: currentPageIndex === index&#125;" v-for="(item, index) in dots"&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">_initSlider () &#123;</div><div class="line">        this.slider = new BScroll(this.$refs.slider, &#123;</div><div class="line">          scrollX: true,</div><div class="line">          scrollY: false,</div><div class="line">          momentum: false,</div><div class="line">          snap: true,</div><div class="line">          snapLoop: this.loop,</div><div class="line">          snapThreshold: 0.3,</div><div class="line">          snapSpeed: 400</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        this.slider.on('scrollEnd', () =&gt; &#123;</div><div class="line">          let pageIndex = this.slider.getCurrentPage().pageX</div><div class="line">          if (this.loop) &#123;</div><div class="line">            pageIndex -= 1</div><div class="line">          &#125;</div><div class="line">          this.currentPageIndex = pageIndex</div><div class="line">        &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="实现循环播放"><a href="#实现循环播放" class="headerlink" title="实现循环播放"></a>实现循环播放</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_play () &#123;</div><div class="line">        <span class="keyword">let</span> pageIndex = <span class="keyword">this</span>.currentPageIndex + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.loop) &#123;</div><div class="line">          pageIndex += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.slider.goToPage(pageIndex, <span class="number">0</span>, <span class="number">400</span>)</div><div class="line">        &#125;, <span class="keyword">this</span>.interval)</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>同时初始化slider的时候要判断是否是自动播放，做些逻辑处理</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v11.png" alt="v11"></p><p> 最终效果图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v12.png" alt="v12"></p><p>我们改变窗口大小时会发生图片错乱的错误，所以我们在mounted的时候去监听一个窗口改变的事件适应窗口宽度大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>._setSliderWidth()</div><div class="line">        <span class="keyword">this</span>._initDots()</div><div class="line">        <span class="keyword">this</span>._initSlider()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.autoPlay) &#123;</div><div class="line">          <span class="keyword">this</span>._play()</div><div class="line">        &#125;</div><div class="line">      &#125;, <span class="number">20</span>)</div><div class="line"></div><div class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.slider) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>._setSliderWidth(<span class="literal">true</span>)</div><div class="line">        <span class="keyword">this</span>.slider.refresh()</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><p>还有个需要注意的一点，我们在切换页面的时候会重新发数据请求，所有元素也会重新渲染，大大增加了性能消耗。我们这里需要缓存整个站点的所有页面,而页面一般一进去都要触发请求的。vue2.0提供了一个<code>keep-alive</code>组件用来缓存组件,避免多次加载相应的组件,减少性能消耗。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v13.png" alt="v13"></p><p>当我们的组件有类似于计时器这种资源的时候，我们在销毁这些资源的时候一定要做清理工作，有利于内存释放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">destroyed () &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timer)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="歌单详情页面"><a href="#歌单详情页面" class="headerlink" title="歌单详情页面"></a>歌单详情页面</h4><h5 id="获取歌单数据"><a href="#获取歌单数据" class="headerlink" title="获取歌单数据"></a>获取歌单数据</h5><h5 id="后端接口代理"><a href="#后端接口代理" class="headerlink" title="后端接口代理"></a>后端接口代理</h5><p>有时候我们使用jsonp获取资源被拒绝，有host和Referer限制，前端不能直接去修改host，就需要通过后端代理的方式解决问题</p><p>后端代理时用到axios，详情见<a href="https://github.com/axios/axios" target="_blank" rel="external">https://github.com/axios/axios</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install axios</div></pre></td></tr></table></figure><p><strong>dev-server.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> apiRoutes = express.Router()</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/getDiscList'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></div><div class="line">  axios.get(url, &#123;</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">      <span class="attr">referer</span>: <span class="string">'https://y.qq.com/'</span>,</div><div class="line">      <span class="attr">host</span>: <span class="string">'c.y.qq.com'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">params</span>: req.query</div><div class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">    res.json(response.data)</div><div class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">app.use(<span class="string">'/api'</span>, apiRoutes)</div></pre></td></tr></table></figure><p><strong>recommends.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDiscList</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="string">'/api/getDiscList'</span></div><div class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    <span class="attr">platform</span>: <span class="string">'yqq'</span>,</div><div class="line">    <span class="attr">needNewCode</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">categoryId</span>: <span class="number">10000000</span>,</div><div class="line">    <span class="attr">sortId</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">sin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">ein</span>: <span class="number">29</span>,</div><div class="line">    <span class="attr">hostUin</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">rnd</span>: <span class="built_in">Math</span>.random(),</div><div class="line">    <span class="attr">format</span>: <span class="string">'json'</span></div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> axios.get(url, &#123;</div><div class="line">    <span class="attr">params</span>: data</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="获取歌单列表及页面展示"><a href="#获取歌单列表及页面展示" class="headerlink" title="获取歌单列表及页面展示"></a>获取歌单列表及页面展示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"> &lt;template&gt;</div><div class="line">  &lt;div class=&quot;recommend&quot;&gt;</div><div class="line">    &lt;div class=&quot;recommend-content&quot;...&gt;</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;div v-if=&quot;recommends.length&quot; class=&quot;slider-wrapper&quot;...&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      </div><div class="line">      &lt;div class=&quot;recommend-list&quot;&gt;</div><div class="line">        &lt;h1 class=&quot;list-title&quot;&gt;热门歌单推荐&lt;/h1&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li class=&quot;item&quot; v-for=&quot;item in discList&quot;&gt;</div><div class="line">            &lt;div class=&quot;icon&quot;&gt;</div><div class="line">              &lt;img width=&quot;60&quot; height=&quot;60&quot; :src=&quot;item.imgurl&quot;&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div class=&quot;text&quot;&gt;</div><div class="line">              &lt;h2 class=&quot;name&quot; v-html=&quot;item.creator.name&quot;&gt;&lt;/h2&gt;</div><div class="line">              &lt;p class=&quot;desc&quot; v-html=&quot;item.dissname&quot;&gt;&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line"> _getDiscList () &#123;</div><div class="line">        getDiscList().then((res) =&gt; &#123;</div><div class="line">          if (res.code === ERR_OK) &#123;</div><div class="line">            this.discList = res.data.list</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>效果如下：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v14.png" alt="v14"></p><h5 id="封装scroll滚动组件"><a href="#封装scroll滚动组件" class="headerlink" title="封装scroll滚动组件"></a>封装scroll滚动组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div ref=&quot;wrapper&quot;&gt;</div><div class="line">    &lt;slot&gt;&lt;/slot&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import BScroll from &apos;better-scroll&apos;</div><div class="line">  ....</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>引入到recommend.vue使用组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">components: &#123;</div><div class="line">     Slider,</div><div class="line">     Scroll</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>在scroll组件里传<code>:data=&quot;discList&quot;</code>,为什么不是<code>:data=&quot;recommends&quot;</code>或者diacList和recommends一起传给它？我们知道它们都是异步获取的，原因是轮播图数据获取接口要优先于歌单列表数据接口，当歌单列表获取到数据渲染出来再调<code>scroll.refresh()</code>，轮播图数据才被渲染出来，这时候高度已经被撑开，也就是说better-scroll能正确计算出高度。</p><p>当recommends获取时这个高度不一定会有，因为轮播图的高度是由图片的高度撑开的，也就是说当recommends获取到时<code>item.imgurl</code>会去请求图片,这是异步过程，我们事先不知道高度，完全是由图片的高度决定的，这里不能用计算属性，使用<code>@load</code>触发一个事件，一旦有一个图片触发<code>load</code>，我们就调用<code>loadImage()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">loadImage () &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.checkloaded) &#123;</div><div class="line">          <span class="keyword">this</span>.checkloaded = <span class="literal">true</span></div><div class="line">          <span class="keyword">this</span>.$refs.scroll.refresh()</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><p>歌单是由很多图片组成的，当我们刷新页面时会发出很多请求，其实刷新只需要展示首屏的图片，而其他图片是当滚动到它们时再加载，使用图片懒加载技术，这里使用vue-lazyload第三方懒加载插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install vue-lazyload</div></pre></td></tr></table></figure><p>使用方法：在<code>main.js</code>引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VueLazyload <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></div><div class="line"></div><div class="line">Vue.use(VueLazyload, &#123;</div><div class="line">  <span class="attr">loading</span>: <span class="built_in">require</span>(<span class="string">'common/image/default.png'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>把<code>:src=&quot;item.imgurl&quot;</code>改成<code>v-lazy=&quot;item.imgurl&quot;</code>，如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v15.png" alt="v15"></p><h4 id="better-scroll和fastclick的冲突"><a href="#better-scroll和fastclick的冲突" class="headerlink" title="better-scroll和fastclick的冲突"></a>better-scroll和fastclick的冲突</h4><p>我们发现点击slider的时候点不动，是因为better-scroll和fastclick是有冲突的。scroll组件初始化时click默认为true，歌单列表是需要被点击的，所以click设置为true。解决这个冲突问题：<br>点击slider是点击一张图片，所以可以给图片添加一个属性<code>class=&quot;needsclick&quot;</code>。fastclick监听到img的点击事件发现class是needsclick的话就不会去拦截，这样就不会阻止这个点击。</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v16.png" alt="v16"></p><h5 id="基础组件loading组件的开发"><a href="#基础组件loading组件的开发" class="headerlink" title="基础组件loading组件的开发"></a>基础组件loading组件的开发</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;loading&quot;&gt;</div><div class="line">    &lt;img src=&quot;./loading.gif&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;</div><div class="line">    &lt;p class=&quot;desc&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default&#123;</div><div class="line">    props: &#123;</div><div class="line">      title: &#123;</div><div class="line">        type: String,</div><div class="line">        default: &apos;加载中...&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>引入<strong>recommend.vue</strong>组件里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"loading-container"</span> v-show=<span class="string">"!discList.length"</span>&gt;</div><div class="line">       <span class="xml"><span class="tag">&lt;<span class="name">loading</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span></div><div class="line"> &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v17.png" alt="v17"></p><h3 id="具体源代码"><a href="#具体源代码" class="headerlink" title="具体源代码"></a>具体源代码</h3><p>参考：<a href="https://github.com/kakajing/vue-music" target="_blank" rel="external">https://github.com/kakajing/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐页面开发&quot;&gt;&lt;a href=&quot;#推荐页面开发&quot; class=&quot;headerlink&quot; title=&quot;推荐页面开发&quot;&gt;&lt;/a&gt;推荐页面开发&lt;/h2&gt;&lt;p&gt;推荐页面分为两个页面：首页和歌单详情页面&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器开发（一）：页面骨架开发和路由的应用</title>
    <link href="http://kakajing.github.io/2017/10/08/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B5%E9%9D%A2%E9%AA%A8%E6%9E%B6%E5%BC%80%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://kakajing.github.io/2017/10/08/Vue音乐播放器开发（一）：页面骨架开发和路由的应用/</id>
    <published>2017-10-08T05:24:10.000Z</published>
    <updated>2017-10-25T09:39:59.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装vue-cli脚手架"><a href="#安装vue-cli脚手架" class="headerlink" title="安装vue-cli脚手架"></a>安装vue-cli脚手架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vue init webpack music</div></pre></td></tr></table></figure><a id="more"></a><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v1.png" alt="v1"></p><p> 在这里，需要注意的是，使用ESLint来标准化代码。如图红框部分。</p><blockquote><p>搭建Vue脚手架，参考<a href="http://www.jianshu.com/p/1626b8643676" target="_blank" rel="external">搭建vue脚手架</a></p></blockquote><p>准备项目目录介绍记忆图标字体、公共样式等资源，如图</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v2.png" alt="v2"></p><h4 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h4><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></div><div class="line">          <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0,</span></div><div class="line">          maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>music<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><p>注意：一定要记得加上<code>&lt;meta name=&quot;viewport&quot; ... &gt;</code>设置，这是更好的适配移动端的代码。</p><h4 id="在package-json添加依赖"><a href="#在package-json添加依赖" class="headerlink" title="在package.json添加依赖"></a>在<code>package.json</code>添加依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">    "babel-runtime": "^6.26.0",</div><div class="line">    "vue": "^2.4.2",</div><div class="line">    "vue-router": "^2.7.0",</div><div class="line">    "fastclick": "^1.0.6"</div><div class="line">  &#125;,</div><div class="line">"devDependencies": &#123;</div><div class="line">  ...</div><div class="line">  "babel-polyfill": "^6.26.0",</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>babel-runtime</code>对ES6的语法做转义。</p><p><code>fastclick</code>解决移动端点击300毫秒延迟的问题。</p><p><code>babel-polyfill</code>对ES6的API做转义。</p><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p><code>npm install</code>安装之后在<code>main.js</code>里引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="comment">// import router from './router'</span></div><div class="line"><span class="keyword">import</span> fastclick <span class="keyword">from</span> <span class="string">'fastclick'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'common/stylus/index.styl'</span></div><div class="line"></div><div class="line">Vue.config.productionTip = <span class="literal">false</span></div><div class="line"></div><div class="line">fastclick.attach(<span class="built_in">document</span>.body)</div><div class="line"></div><div class="line"><span class="comment">/* eslint-disable no-new */</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h5 id="使用css预编译处理器stylus"><a href="#使用css预编译处理器stylus" class="headerlink" title="使用css预编译处理器stylus"></a>使用css预编译处理器<code>stylus</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install style-loader css-loader stylus stylus-loader -D</div></pre></td></tr></table></figure><p>引入组件要注意该组件的路径，这里我在<code>webpack.base.config.js</code>里修改别名，来对接下来要用的组件路径简便化，更直观些。</p><p><strong>webpack.base.config.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</div><div class="line">      <span class="string">'common'</span>: resolve(<span class="string">'src/common'</span>),</div><div class="line">      <span class="string">'components'</span>: resolve(<span class="string">'src/components'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>修改过<code>webpack.base.config.js</code>文件后需重启服务器。</p><h3 id="页面骨架开发"><a href="#页面骨架开发" class="headerlink" title="页面骨架开发"></a>页面骨架开发</h3><h4 id="编写header组件"><a href="#编写header组件" class="headerlink" title="编写header组件"></a>编写header组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Music<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="引入到App-vue挂载到页面"><a href="#引入到App-vue挂载到页面" class="headerlink" title="引入到App.vue挂载到页面"></a>引入到<code>App.vue</code>挂载到页面</h4><p><strong>App.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;m-header&gt;&lt;/m-header&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  import MHeader from &apos;components/m-header/m-header&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    components: &#123;</div><div class="line">      MHeader</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>效果如图：</p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v3.png" alt="v3"></p><h4 id="编写页面入口基础代码"><a href="#编写页面入口基础代码" class="headerlink" title="编写页面入口基础代码"></a>编写页面入口基础代码</h4><p>这里代码省略，直接上图</p><p><img src="http://oxkc6g4t4.bkt.clouddn.com/v4.png" alt="v4"></p><h4 id="导航栏组件开发"><a href="#导航栏组件开发" class="headerlink" title="导航栏组件开发"></a>导航栏组件开发</h4><p><strong>tab.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;tab&quot;&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/recommend&quot;&gt;</div><div class="line">      &lt;span class=&quot;tab-link&quot;&gt;推荐&lt;/span&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/singer&quot;&gt;</div><div class="line">      &lt;span class=&quot;tab-link&quot;&gt;歌手&lt;/span&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/rank&quot;&gt;</div><div class="line">      &lt;span class=&quot;tab-link&quot;&gt;排行&lt;/span&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/search&quot;&gt;</div><div class="line">      &lt;span class=&quot;tab-link&quot;&gt;搜索&lt;/span&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default &#123;&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><p>在index.js里配置基础组件</p><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> Recommend <span class="keyword">from</span> <span class="string">'components/recommend/recommend'</span></div><div class="line"><span class="keyword">import</span> Singer <span class="keyword">from</span> <span class="string">'components/singer/singer'</span></div><div class="line"><span class="keyword">import</span> Rank <span class="keyword">from</span> <span class="string">'components/rank/rank'</span></div><div class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'components/search/search'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">redirect</span>: <span class="string">'/recommend'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/recommend'</span>,</div><div class="line">      <span class="attr">component</span>: Recommend</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/singer'</span>,</div><div class="line">      <span class="attr">component</span>: Singer</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/rank'</span>,</div><div class="line">      <span class="attr">component</span>: Rank</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/search'</span>,</div><div class="line">      <span class="attr">component</span>: Search</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v5.png" alt="v5"></p><p> 效果： </p><p> <img src="http://oxkc6g4t4.bkt.clouddn.com/v6.png" alt="v6"></p><h4 id="具体源代码"><a href="#具体源代码" class="headerlink" title="具体源代码"></a>具体源代码</h4><p>参考：<a href="https://github.com/kakajing/vue-music" target="_blank" rel="external">https://github.com/kakajing/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;h4 id=&quot;安装vue-cli脚手架&quot;&gt;&lt;a href=&quot;#安装vue-cli脚手架&quot; class=&quot;headerlink&quot; title=&quot;安装vue-cli脚手架&quot;&gt;&lt;/a&gt;安装vue-cli脚手架&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ vue init webpack music&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="http://kakajing.github.io/categories/vue/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css小知识总结</title>
    <link href="http://kakajing.github.io/2017/09/20/css%E5%B0%8F%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://kakajing.github.io/2017/09/20/css小知识总结/</id>
    <published>2017-09-20T06:27:42.000Z</published>
    <updated>2017-09-23T12:44:16.766Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单的文字模糊效果"><a href="#简单的文字模糊效果" class="headerlink" title="简单的文字模糊效果"></a>简单的文字模糊效果</h4><p>以下两行简单的CSS3代码可达到将文字模糊化处理的目的，出来的效果有点像使用PS的滤镜。</p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: transparent;</div><div class="line">  <span class="attribute">text-shadow</span>: <span class="number">#111</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E6%A8%A1%E7%B3%8A.png" alt="模糊"></p><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><p>有好多次博主都有这样的需求，垂直居中显示某个DIV，我们知道CSS中天然有水平居中的样式<code>text-align:center</code>。唯独这个垂直居中无解。</p><p>当然你可以将容器设置为<code>display:table</code>，然后将子元素也就是要垂直居中显示的元素设置为<code>display:table-cell</code>，然后加上<code>vertical-align:middle</code>来实现，但此种实现往往会因为display：table而破坏整体布局，那还不如直接用<code>table</code>标签了呢。</p><p>下面这个样式利用了<code>translate</code>来巧妙实现了垂直居中样式，需IE9+。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-vertical</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相比而言，水平居中要简单得多，像上面提到的<code>text-align:center</code>，经常用到的技巧还有<code>margin:0 auto</code>。但对于<code>margin</code>大法也只在子元素宽度小于容器宽度时管用，当子元素宽度大于容器宽度时此法失效。</p><p>如法炮制，利用<code>left</code>和<code>transform</code>同样可实现水平居中，不过意义不大，毕竟<code>text-align</code>和<code>margin</code>差不多满足需求了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-horizontal</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h4 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h4><p>利用重复指定<code>box-shadow</code>来达到多个边框的效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">/* Borders */</div><div class="line">box-shadow: 0 0 0 6px rgba(0,0,0,0.2), 0 0 0 12px rgba(0,0,0,0.2), 0 0 0 18px rgba(0,0,0,0.2), 0 0 0 24px rgba(0,0,0,0.2);</div><div class="line"></div><div class="line">/* Meaningless pretty things */</div><div class="line">background: linear-gradient(45deg, powderBlue, ghostwhite);</div><div class="line">height: 200px;</div><div class="line">line-height: 200px;</div><div class="line">font-family: sans-serif;</div><div class="line">color: MidnightBlue;</div><div class="line">margin: 100px auto;</div><div class="line">text-align: center;</div><div class="line">width: 400px</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;div&gt;Eh careful man, there's a beverage here eh!&lt;/div&gt;</div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/duobian.png" alt="2"></p><h4 id="实时编辑CSS"><a href="#实时编辑CSS" class="headerlink" title="实时编辑CSS"></a>实时编辑CSS</h4><p>通过设置style标签的display:block样式可以让页面的style标签显示出来，并且加上contentEditable属性后可以让样式成为可编辑状态，更改后的样式效果也是实时更新呈现的。此技巧在IE下无效。拥有此技能者，逆天也！</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;style style="display: block" contenteditable&gt;</div><div class="line">        body &#123;color:blue&#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/0.gif" alt="0"></p><h4 id="创建长宽比固定的元素"><a href="#创建长宽比固定的元素" class="headerlink" title="创建长宽比固定的元素"></a>创建长宽比固定的元素</h4><p>通过设置父级窗口的<code>padding-bottom</code>可以达到让容器保持一定的长度比的目的，这在响应式页面设计中比较有用，能够保持元素不变形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%; position: relative; padding-bottom: 20%;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0; top: 0; right: 0; bottom: 0; background-color: yellow;"</span>&gt;</span></div><div class="line">            this content will have a constant aspect ratio that varies based on the width.</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/2.gif" alt="2"></p><h4 id="CSS中也可以做简单运算"><a href="#CSS中也可以做简单运算" class="headerlink" title="CSS中也可以做简单运算"></a>CSS中也可以做简单运算</h4><p>通过CSS中的<code>calc</code>方法可以进行一些简单的运算，从而达到动态指定元素样式的目的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="built_in">calc</span>(100% - 50px) <span class="built_in">calc</span>(100% - 20px);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="cursor的一个效果"><a href="#cursor的一个效果" class="headerlink" title="cursor的一个效果"></a>cursor的一个效果</h4><p>使用<code>cursor: none!important</code>可以光标消失。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">  <span class="attribute">cursor</span>: none<span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简单的文字模糊效果&quot;&gt;&lt;a href=&quot;#简单的文字模糊效果&quot; class=&quot;headerlink&quot; title=&quot;简单的文字模糊效果&quot;&gt;&lt;/a&gt;简单的文字模糊效果&lt;/h4&gt;&lt;p&gt;以下两行简单的CSS3代码可达到将文字模糊化处理的目的，出来的效果有点像使用PS的滤镜。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://kakajing.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>熟练闭包</title>
    <link href="http://kakajing.github.io/2017/09/19/%E7%86%9F%E7%BB%83%E9%97%AD%E5%8C%85/"/>
    <id>http://kakajing.github.io/2017/09/19/熟练闭包/</id>
    <published>2017-09-19T07:34:40.000Z</published>
    <updated>2017-09-23T12:47:25.245Z</updated>
    
    <content type="html"><![CDATA[<p>对于那些使用不支持闭包特性的编程语言的程序员来说，闭包可能是一个陌生的概念。幸运的是，闭包真没什么可害怕的。</p><a id="more"></a><h4 id="理解闭包"><a href="#理解闭包" class="headerlink" title="理解闭包"></a>理解闭包</h4><p>理解闭包只需要学会三个基本的事实。<strong>第一个事实：JavaScript允许你引用在当前函数以外定义的变量。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSandwich</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> maginIngredient = <span class="string">"peanut butter"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">filling</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> magincIngredient + <span class="string">" and "</span> + filling;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make(<span class="string">"jelly"</span>);</div><div class="line">&#125;</div><div class="line">makeSandwich();  <span class="comment">//"peanut butter and jelly"</span></div></pre></td></tr></table></figure><p>请注意内部的<code>make</code>函数是如何引用定义在外部<code>makeSandwich</code>函数内部的<code>maginIngredient</code>变量的。</p><p><strong>第二个事实：即使外部函数已经返回，当前函数仍然可以引用在外部函数所定义的变量。</strong>如果这听起来让人难以置信，请记住，JavaScript的函数是第一类（first-class）对象。这意味着你可以返回一个内部函数，并在稍后调用它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sandwich</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> maginIngredient = <span class="string">"peanut butter"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">filling</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> magincIngredient + <span class="string">" and "</span> + filling;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = sandwich();  </div><div class="line">f(<span class="string">"jelly"</span>);         <span class="comment">//"peanut butter and jelly"</span></div><div class="line">f(<span class="string">"bananas"</span>);      <span class="comment">//"peanut butter and bananas"</span></div><div class="line">f(<span class="string">"marsh"</span>);        <span class="comment">//"peanut butter and marsh"</span></div></pre></td></tr></table></figure><p>这与第一个列子几乎完全相同。不同的是，不是在外部的<code>sandwich</code>函数中立即调用<code>make(&quot;jelly&quot;)</code>，而是返回<code>make</code>函数奔三。因此，f的值为内部的<code>make</code>函数，调用f实际上是调用<code>make</code>函数。但即使<code>sandwich</code>函数已经返回，<code>make</code>函数仍然能记住<code>magincIngredient</code>的值。</p><p>这是如何工作的？答案是：JavaScript的函数值包含了比调用它们时执行所需要的代码还要多的信息。而且，JavaScript函数值还在内部存储它们可能会引用的定义在其封闭作用域的变量。<strong>那些在其所涵盖的作用域内跟踪变量的函数被称为闭包。</strong><code>make</code>函数就是一个闭包，其代码引用了两个外部变量：<code>maginIngredient</code>和<code>filling</code>。每当<code>make</code>函数被调用时，其代码都会引用到这两个变量，因为该闭包存储了这两个变量。</p><p>函数可以引用在其作用域内的任何变量，包括参数和外部函数变量。我们可以利用这点来编写更加通用的<code>sandwich</code>函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sandwich</span>(<span class="params">maginIngredient</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">filling</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> magincIngredient + <span class="string">" and "</span> + filling;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> hamAnd = sandwich(<span class="string">"ham"</span>);</div><div class="line">hamAnd(<span class="string">"cheese"</span>);         <span class="comment">//"ham butter and cheese"</span></div><div class="line">hamAnd(<span class="string">"bananas"</span>);      <span class="comment">//"ham butter and bananas"</span></div><div class="line"><span class="keyword">var</span> turkeyAnd = sandwich(<span class="string">"turkey"</span>);</div><div class="line">turkeyAnd(<span class="string">"Swiss"</span>);        <span class="comment">//"turkey butter and Swiss"</span></div><div class="line">turkeyAnd(<span class="string">"Provolone"</span>)     <span class="comment">//"turkey butter and Provolone"</span></div></pre></td></tr></table></figure><p>该函数创建了hamAnd和turkeyAnd两个完全不同的函数。尽管它们都是由相同的mak函数定义的，但是它们是两个截然不同的对象。第一个函数的magincIngredient值为“ham”，而第二个函数的magincIngredient值为“turkeyAnd”。</p><p>闭包是JavaScript最优雅、最有表现力的特性之一，也是许多惯用法的核心。JavaScript甚至还提供了一种更为方便的构建闭包的字面量语法——函数表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sandwich</span>(<span class="params">maginIngredient</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">filling</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> magincIngredient + <span class="string">" and "</span> + filling;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请注意，该函数表达式是匿名的。由于我们只需要其能产生一个新的函数值，而不打算在局部调用它，因此根本没有必要给该函数命名。函数表达式也可以有名称。</p><p><strong>学习闭包的第三个也是最后一个事实：闭包可以更新外部变量的值。</strong>实际上，闭包存储的是外部变量的引用，而不是它们的值的副本。因此，对于任何具有访问这些外部变量的闭包，都可以进行更新。一个简单的惯用法box对象说明了这一切。它存储了一个可读写的内部值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> val = <span class="literal">undefined</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            val = newVal;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">type</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = box();</div><div class="line">b.type();    <span class="comment">//undefined</span></div><div class="line">b.set(<span class="number">98</span>);</div><div class="line">b.get();     <span class="comment">//98</span></div><div class="line">b.type();   <span class="comment">//"number"</span></div></pre></td></tr></table></figure><p>该例子产生了一个包含三个闭包的对象。这三个闭包是set，get，type属性。它们共同访问val变量。set闭包更新了val的值，随后调用get和type查看更新的结果。</p><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><ul><li>函数可以引用定义在其外部作用域的变量。</li><li>闭包比创建它们的函数有更长的生命周期。</li><li>闭包在内部存储其外部变量的引用，并能读写这些变量。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于那些使用不支持闭包特性的编程语言的程序员来说，闭包可能是一个陌生的概念。幸运的是，闭包真没什么可害怕的。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://kakajing.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://kakajing.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>对BFC的理解</title>
    <link href="http://kakajing.github.io/2017/09/10/%E5%AF%B9BFC%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://kakajing.github.io/2017/09/10/对BFC的理解/</id>
    <published>2017-09-10T13:07:57.000Z</published>
    <updated>2017-09-19T07:36:07.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BFC是什么？"><a href="#BFC是什么？" class="headerlink" title="BFC是什么？"></a>BFC是什么？</h3><p>在解释 BFC 是什么之前，会涉及到CSS布局的一些基本概念，需要先介绍 Box、Formatting Context的概念。</p><a id="more"></a><ul><li>对css有了解的朋友肯定都知道盒式模型这个概念，对一个元素设置css，首先需要知道这个元素是block还是inline类型。而BFC就是用来格式化块级盒子，同样管理inline类型的盒子还有IFC，以及其他的FC。那首先我们就来看看FC的概念。</li><li>Formatting Context：指页面中一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。</li><li>BFC：块级格式化上下文，它是指一个独立的块级渲染区域，只有Block-level Box参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。</li></ul><h4 id="Box-CSS布局的基本单位"><a href="#Box-CSS布局的基本单位" class="headerlink" title="　　Box: CSS布局的基本单位"></a>　　Box: CSS布局的基本单位</h4><p>　　Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p><ul><li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li><li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li><li>run-in box: css3 中才有， 这儿先不讲了。</li></ul><h4 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="　　Formatting context"></a>　　Formatting context</h4><p>　　Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p><p>　　CSS2.1 中只有 <code>BFC</code>和 <code>IFC</code>, <strong>CSS3 </strong>中还增加了 <code>GFC</code>和 <code>FFC。</code></p><h4 id="BFC-定义"><a href="#BFC-定义" class="headerlink" title="　　BFC 定义"></a>　　BFC 定义</h4><p>　　BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>​       块级元素是那种源文档被格式化为可视块了的元素，然后使这个元素变成块级元素的display属性取值如下： ‘block’, ‘list-item’, 和 ‘table’。</p><p>​       块级盒block-level box是这种参与了块级排版上下文的一种盒子，每个块级元素都生成了一个包含后代盒子和生成的内容的主要块级盒，并且这个盒子参与了任何定位的计算。</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE1.png" alt="图1"></p><p>​      块级元素会自动生成一个块级盒block-level box，这是块级盒block-level-box的盒模型构成，它表明的是块级盒自身的结构构成。</p><p>​     margin、border、padding、content分别定义了元素四种边，然后每种类型的边的四条边定义了一个盒子，分别是content box、padding box、border box、margin box，而决定块盒在包含块中与相邻块盒的垂直间距的便是margin-box，这个margin-box是始终存在的，即使它的margin为0，试看下面的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style="width: 400px;height: 400px; background:#ff4400;"&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE2.png" alt="图2"></p><p>此时我没有为这个div设置margin值，但是这个div还是有一个默认为0的margin的，试看下面的浏览器生成的computed style：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE3.png" alt="图3"></p><p>可以看到div默认的margin为0</p><h3 id="哪些元素会生成BFC"><a href="#哪些元素会生成BFC" class="headerlink" title="哪些元素会生成BFC?"></a>哪些元素会生成BFC?</h3><ul><li>根元素</li><li>float属性不为none</li><li>position为absolute或fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow不为visible</li></ul><h3 id="BFC布局规则："><a href="#BFC布局规则：" class="headerlink" title="　　BFC布局规则："></a>　　BFC布局规则：</h3><ol><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算</li></ol><h3 id="BFC在布局中的应用"><a href="#BFC在布局中的应用" class="headerlink" title="BFC在布局中的应用"></a>BFC在布局中的应用</h3><p>那么BFC有何用？</p><ol><li><p>清除浮动</p></li><li><p>防止 margin 重叠</p></li><li>多栏布局的一种方式</li></ol><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><ul><li>使得父元素包含子元素，常见的方式是为父元素设置overflow：hidden或者浮动父元素。根本原因在于创建BFC的元素，子浮动元素也会参与其高度计算，即不会产生高度塌陷问题。</li></ul><p>代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .par &#123;</div><div class="line">        border: 5px solid #fcc;</div><div class="line">        width: 300px;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    .child &#123;</div><div class="line">        border: 5px solid #f66;</div><div class="line">        width:100px;</div><div class="line">        height: 100px;</div><div class="line">        float: left;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div class="par"&gt;</div><div class="line">        &lt;div class="child"&gt;&lt;/div&gt;</div><div class="line">        &lt;div class="child"&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><p>页面：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE7.png" alt="图7"></p><p>根据<code>BFC</code>布局规则第六条：</p><blockquote><p>计算<code>BFC</code>的高度时，浮动元素也参与计算</p></blockquote><p>为达到清除内部浮动，我们可以触发par生成<code>BFC</code>，那么par在计算高度时，par内部的浮动元素child也会参与计算。</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.par</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE8.png" alt="图8"></p><h5 id="防止margin重叠："><a href="#防止margin重叠：" class="headerlink" title="防止margin重叠："></a>防止margin重叠：</h5><ul><li>同一个BFC中俩个相邻的box才会发生重叠与方向无关，不过由于上文提到的第一条限制，我们甚少看到水平方向的margin重叠。这在IE这中是个特例，IE可以设置write-mode。</li><li>要阻止margin重叠，只要将俩个元素别放在一个BFC中即可（可以用上文提到的方式让相邻元素其中一个生成BFC）。阻止俩个相邻元素的重叠看起来没有意义，主要用于嵌套元素。</li></ul><p>代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    p &#123;</div><div class="line">        color: #f55;</div><div class="line">        background: #fcc;</div><div class="line">        width: 200px;</div><div class="line">        line-height: 100px;</div><div class="line">        text-align:center;</div><div class="line">        margin: 100px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;Haha&lt;/p&gt;</div><div class="line">    &lt;p&gt;Hehe&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><p>页面：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE5.png" alt="图5"></p><p>两个p之间的距离为100px，发送了margin重叠。<br>根据BFC布局规则第二条：</p><blockquote><p><code>Box</code>垂直方向的距离由margin决定。属于同一个<code>BFC</code>的两个相邻<code>Box</code>的margin会发生重叠</p></blockquote><p>我们可以在p外面包裹一层容器，并触发该容器生成一个<code>BFC</code>。那么两个P便不属于同一个<code>BFC</code>，就不会发生margin重叠了。<br>代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .wrap &#123;</div><div class="line">        overflow: hidden;</div><div class="line">    &#125;</div><div class="line">    p &#123;</div><div class="line">        color: #f55;</div><div class="line">        background: #fcc;</div><div class="line">        width: 200px;</div><div class="line">        line-height: 100px;</div><div class="line">        text-align:center;</div><div class="line">        margin: 100px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;Haha&lt;/p&gt;</div><div class="line">    &lt;div class="wrap"&gt;</div><div class="line">        &lt;p&gt;Hehe&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><p>效果如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE6.png" alt="图6"></p><h5 id="多栏布局的一种方式"><a href="#多栏布局的一种方式" class="headerlink" title="多栏布局的一种方式"></a>多栏布局的一种方式</h5><ul><li>上文提到的一条规则：与浮动元素相邻的已生成BFC的元素不能与浮动元素互相覆盖。利用该特性可以作为多栏布局的一种实现方式。</li><li>这种布局的特点在于左右俩栏的宽度固定，中间栏可以根据浏览器宽度自适应。 <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE4.png" alt="图4"></li></ul><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE9.png" alt="图9"></p><p>根据BFC布局规则第3条：</p><blockquote><p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p></blockquote><p>根据BFC布局规则第四条：</p><blockquote><p>BFC的区域不会与float box重叠。</p></blockquote><p>我们可以通过通过触发right生成BFC， 来实现自适应两栏布局。</p><p>加上：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line"><span class="attribute">background</span>: blue;</div><div class="line"><span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如下：</p><p> <img src="http://omux103p0.bkt.clouddn.com/%E5%9B%BE10.png" alt="图10"></p><p>这样实现了左栏的宽度固定，右栏可以根据浏览器宽度自适应，依次类比，三栏布局也是很好实现的</p><p>参考链接：</p><p><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="external">http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></p><p><a href="http://web.jobbole.com/84808/" target="_blank" rel="external">http://web.jobbole.com/84808/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;BFC是什么？&quot;&gt;&lt;a href=&quot;#BFC是什么？&quot; class=&quot;headerlink&quot; title=&quot;BFC是什么？&quot;&gt;&lt;/a&gt;BFC是什么？&lt;/h3&gt;&lt;p&gt;在解释 BFC 是什么之前，会涉及到CSS布局的一些基本概念，需要先介绍 Box、Formatting Context的概念。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://kakajing.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://kakajing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Exporting和Consuming模块</title>
    <link href="http://kakajing.github.io/2017/05/21/Exporting%20%E5%92%8CConsuming%E6%A8%A1%E5%9D%97/"/>
    <id>http://kakajing.github.io/2017/05/21/Exporting 和Consuming模块/</id>
    <published>2017-05-21T14:35:02.000Z</published>
    <updated>2017-05-21T14:36:02.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建一个hello-world-js模块"><a href="#创建一个hello-world-js模块" class="headerlink" title="创建一个hello-world.js模块"></a>创建一个hello-world.js模块</h3><a id="more"></a><p><strong>hello-world.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Node提供了`module.exports`接口来将函数和变量公开给其他文件</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + subject);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>hello-mars.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果我们不希望整个导出为单个对象，我们可以将函数和变量导出为`exports`对象的属性</span></div><div class="line"><span class="comment">// 我们省略了“modules”。 从export 当我们这样使用它</span></div><div class="line">exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Mars says Hello '</span> + subject);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>hello-venus.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 另一种使用modules.export的方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Venus says Hello '</span> + subject);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">hello</span>: hello</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>hello-jupiter.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用modules.export的另一种方法是通过定义导出中的函数</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Jupiter says hello '</span> + subject);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">bye</span>: <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Jupiter says goodbye '</span> + subject);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="加载模块与目录名称"><a href="#加载模块与目录名称" class="headerlink" title="加载模块与目录名称"></a>加载模块与目录名称</h4><p>我们有一个名为<code>hello</code>的目录，其中包含以下文件：</p><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hello/index.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hej'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hello/main.js</span></div><div class="line"><span class="comment">// 我们可以通过使用`require()`方法来包括我们定义的其他文件</span></div><div class="line"><span class="keyword">var</span> hw = <span class="built_in">require</span>(<span class="string">'./hello-world.js'</span>),</div><div class="line">    hm = <span class="built_in">require</span>(<span class="string">'./hello-mars.js'</span>),</div><div class="line">    hv = <span class="built_in">require</span>(<span class="string">'./hello-venus.js'</span>),</div><div class="line">    hj = <span class="built_in">require</span>(<span class="string">'./hello-jupiter.js'</span>),</div><div class="line">    hu = <span class="built_in">require</span>(<span class="string">'./index.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 因为我们将功能分配给整个`module.exports`对象，我们可以直接使用它</span></div><div class="line">hw(<span class="string">'World!'</span>); <span class="comment">// outputs "Hello World!"</span></div><div class="line"></div><div class="line"><span class="comment">// 在这种情况下，我们将功能分配给出口的“hello”属性，所以我们也必须在这里使用</span></div><div class="line">hm.hello(<span class="string">'Solar System!'</span>); <span class="comment">// outputs "Mars says Hello Solar System!"</span></div><div class="line"></div><div class="line"><span class="comment">// 一次分配module.exports的结果与hello-world.js中的相同</span></div><div class="line">hv.hello(<span class="string">'Milky Way!'</span>); <span class="comment">// outputs "Venus says Hello Milky Way!"</span></div><div class="line"></div><div class="line">hj.hello(<span class="string">'Universe!'</span>); <span class="comment">//  outputs "Jupiter says hello Universe!"</span></div><div class="line">hj.bye(<span class="string">'Universe!'</span>); <span class="comment">// outputs "Jupiter says goodbye Universe!"</span></div><div class="line"></div><div class="line">hu(); <span class="comment">//output 'hej'</span></div></pre></td></tr></table></figure><h3 id="加载和使用module"><a href="#加载和使用module" class="headerlink" title="加载和使用module"></a>加载和使用module</h3><p>module可以通过<code>require()</code>函数“imported”，否则“required”。 例如，要加载Node.js附带的<code>http</code>模块，可以使用以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure><p>除运行时附带的模块外，您还可以要求从npm安装的模块，如express。 如果您已经通过<code>npm install express</code>在系统上安装了express，可以简单地写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div></pre></td></tr></table></figure><p>您还可以将自己编写的模块作为应用程序的一部分。 在这种情况下，要在与当前文件相同的目录中包含一个名为<code>lib.js</code>的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mylib = <span class="built_in">require</span>(<span class="string">'./lib'</span>);</div></pre></td></tr></table></figure><p>请注意，您可以省略扩展名，并假定<code>.js</code>。 加载模块后，该变量将填充一个包含从所需文件发布的方法和属性的对象。 一个完整的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="comment">// `http`模块具有“STATUS_CODES”属性</span></div><div class="line"><span class="built_in">console</span>.log(http.STATUS_CODES[<span class="number">404</span>]); <span class="comment">// outputs 'Not Found'</span></div><div class="line"></div><div class="line"><span class="comment">// 还包含`createServer()`</span></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">  res.write(<span class="string">'&lt;html&gt;&lt;body&gt;Module Test&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">  res.end();</div><div class="line">&#125;).listen(<span class="number">80</span>);</div></pre></td></tr></table></figure><h3 id="每个模块只注入一次"><a href="#每个模块只注入一次" class="headerlink" title="每个模块只注入一次"></a>每个模块只注入一次</h3><p>NodeJS只在您首次需要时执行该模块。 任何进一步的需求函数都将执行相同的对象。 Node也首先使用require加载模块。 这减少了文件读取的数量，并有助于加快应用程序的速度。</p><p><code>myModule.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">123</span>)</div><div class="line">exports.myFunction=<span class="string">'great'</span></div></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="built_in">require</span>(<span class="string">'./myModule'</span>) <span class="comment">// Output 123</span></div><div class="line"><span class="keyword">var</span> b=<span class="built_in">require</span>(<span class="string">'./myModule'</span>) <span class="comment">// No output</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Output 'great'</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// Output 'great'</span></div><div class="line">a.a=<span class="number">5</span></div><div class="line"><span class="built_in">console</span>.log(b.a) <span class="comment">// Output 5</span></div></pre></td></tr></table></figure><h3 id="文件夹作为模块"><a href="#文件夹作为模块" class="headerlink" title="文件夹作为模块"></a>文件夹作为模块</h3><p>模块可以分割在同一文件夹中的许多.js文件中。 my_module文件夹中的示例：</p><p><strong>function_one.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>function_two.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">exports.f_one = <span class="built_in">require</span>(<span class="string">'./function_one.js'</span>);</div><div class="line">exports.f_two = <span class="built_in">require</span>(<span class="string">'./function_two.js'</span>);</div></pre></td></tr></table></figure><p>通过文件夹名称引用一个类似这样的模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> split_module = <span class="built_in">require</span>(<span class="string">'./my_module'</span>);</div></pre></td></tr></table></figure><p>请注意，如果您通过从require函数参数中省略<code>./</code>或任何指向文件夹的路径的要求，Node将尝试从node_modules文件夹加载模块。</p><p>或者，您可以在同一个文件夹中创建一个包含以下内容的<code>package.json</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"my_module"</span>,</div><div class="line">    <span class="string">"main"</span>: <span class="string">"./your_main_entry_point.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样你就不需要命名主模块文件“index”。</p><h3 id="建立自己的模块"><a href="#建立自己的模块" class="headerlink" title="建立自己的模块"></a>建立自己的模块</h3><p>您还可以引用一个对象来公开导出并持续将方法附加到该对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> auth = <span class="built_in">module</span>.exports = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</div><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"></div><div class="line">auth.email = <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="comment">// Authenticate with an email address</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">auth.facebook = <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="comment">// Authenticate with a Facebook account</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">auth.twitter = <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="comment">// Authenticate with a Twitter account</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">auth.slack = <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="comment">// Authenticate with a Slack account</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">auth.stack_overflow = <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="comment">// Authenticate with a Stack Overflow account</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>要使用其中的任何一个，只要按照通常的方式要求模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> auth = <span class="built_in">require</span>(<span class="string">'./auth'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  auth.facebook(req.body, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</div><div class="line"></div><div class="line">    req.user = user;</div><div class="line">    next();</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="使模块缓存无效"><a href="#使模块缓存无效" class="headerlink" title="使模块缓存无效"></a>使模块缓存无效</h3><p>在开发中，您可能会发现在同一模块上多次使用<code>require()</code>会始终返回相同的模块，即使您对该文件进行了更改。 这是因为模块在第一次加载时被缓存，并且任何后续的模块加载将从缓存加载。</p><p>要解决这个问题，您必须删除缓存中的条目。 例如，如果您加载了一个模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div></pre></td></tr></table></figure><p>然后，您可以删除缓存条目：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rpath = <span class="built_in">require</span>.resolve(<span class="string">'./a.js'</span>);</div><div class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[rpath];</div></pre></td></tr></table></figure><p>然后再次要求模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div></pre></td></tr></table></figure><p>请注意，这不是建议在生产中，因为<code>delete</code>只会删除对加载的模块的引用，而不是加载的数据本身。 该模块不是垃圾回收，因此不正确使用此功能可能会导致内存泄漏。</p><h3 id="从node-modules加载模块"><a href="#从node-modules加载模块" class="headerlink" title="从node_modules加载模块"></a>从node_modules加载模块</h3><p>可以通过<code>require</code> 将d模块放在一个名为<code>node_modules</code>的特殊目录中而不需要使用相关路径。</p><p>例如，要从文件<code>index.js</code>中<code>require</code>一个名为<code>foo</code>的模块，可以使用以下目录结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">index.js</div><div class="line"> \- node_modules</div><div class="line">  \- foo</div><div class="line">   |- foo.js</div><div class="line">   \- package.json</div></pre></td></tr></table></figure><p>模块应该放在一个目录下，以及一个<code>package.json</code>文件。 <code>package.json</code>文件的<code>main</code>字段应该指向您的模块的入口点 - 这是用户导入的文件<code>require(&#39;your-module&#39;)</code>。 如果没有提供，<code>main</code>默认为<code>index.js</code>。 或者，您可以通过将相对路径附加到<code>require</code>调用：<code>require(&#39;your-module/path/to/file&#39;)</code>来引用相对于模块的文件。</p><p>Modules 也能从<code>node_modules</code> <code>require</code> d 。 如果我们有以下目录结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">my-project</div><div class="line">\- node_modules</div><div class="line"> |- foo   <span class="comment">// the foo module</span></div><div class="line">  \- ...</div><div class="line"> \- baz   <span class="comment">// the baz module</span></div><div class="line">  \- node_modules</div><div class="line">   \- bar   <span class="comment">// the bar module</span></div></pre></td></tr></table></figure><p>我们将能够使用<code>require(&#39;foo&#39;)</code>来要求来自<code>bar</code>内任何文件的模块<code>foo</code>。</p><p>请注意，节点将只匹配文件系统层级中最接近文件的模块，从（文件的当前目录/ node_modules）开始。 节点通过这种方式将目录匹配到文件系统根目录。</p><p>您可以从npm注册表或其他npm注册表安装新模块，或者自行创建。</p><p>虽然Node.js中的所有内容通常都是异步执行的，但<code>require()</code>不是其中之一。 由于模块在实践中只需要加载一次，因此它是一个阻塞操作，应该被正确使用。</p><p>模块在第一次加载之后被缓存。 如果您正在开发中编辑模块，则需要在模块缓存中删除其条目才能使用新的更改。 也就是说，即使模块被清除出模块缓存，模块本身也不是垃圾回收的，所以在生产环境中应该小心使用它。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建一个hello-world-js模块&quot;&gt;&lt;a href=&quot;#创建一个hello-world-js模块&quot; class=&quot;headerlink&quot; title=&quot;创建一个hello-world.js模块&quot;&gt;&lt;/a&gt;创建一个hello-world.js模块&lt;/h3&gt;
    
    </summary>
    
      <category term="Node" scheme="http://kakajing.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://kakajing.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>文件系统IO</title>
    <link href="http://kakajing.github.io/2017/05/17/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FIO/"/>
    <id>http://kakajing.github.io/2017/05/17/文件系统IO/</id>
    <published>2017-05-17T11:34:25.000Z</published>
    <updated>2017-05-17T11:34:08.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从文件异步读取"><a href="#从文件异步读取" class="headerlink" title="从文件异步读取"></a>从文件异步读取</h3><a id="more"></a><p>对所有文件操作使用文件系统模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div></pre></td></tr></table></figure><h4 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h4><p>在这个例子中，从目录<code>/ tmp</code>中读取<code>hello.txt</code>。 此操作将在后台完成，并且在完成或失败时发生回调：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fs.readFile(<span class="string">'/tmp/hello.txt'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;, (err, content) =&gt; &#123;</div><div class="line">  <span class="comment">// 如果发生错误，输出并返回</span></div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line"></div><div class="line">  <span class="comment">// 没有发生错误，内容是一个 string</span></div><div class="line">  <span class="built_in">console</span>.log(content);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="Without-Encoding"><a href="#Without-Encoding" class="headerlink" title="Without Encoding"></a>Without Encoding</h4><p>从当前目录中读取二进制文件<code>binary.txt</code>，在后台异步读取。 请注意，我们不设置’encoding’选项 - 这样可以防止Node.js将内容解码为字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fs.readFile(<span class="string">'binary'</span>, (err, binaryContent) =&gt; &#123;</div><div class="line">  <span class="comment">// If an error occurred, output it and return</span></div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line"></div><div class="line">  <span class="comment">// No error occurred, content is a Buffer, output it in</span></div><div class="line">  <span class="comment">// hexadecimal representation.</span></div><div class="line">  <span class="built_in">console</span>.log(content.toString(<span class="string">'hex'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>请记住，在一般情况下，您的脚本可以使用任意当前工作目录运行。 要找到相对于当前脚本的文件，请使用<code>_dirname</code> 或 <code>_filename</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.readFile(path.resolve(__dirname, <span class="string">'someFile'</span>), (err, binaryContent) =&gt; &#123;</div><div class="line">    <span class="comment">//Rest of Function</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用readdir或readdirSync列出目录内容"><a href="#使用readdir或readdirSync列出目录内容" class="headerlink" title="使用readdir或readdirSync列出目录内容"></a>使用readdir或readdirSync列出目录内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Read the contents of the directory /usr/local/bin asynchronously.</span></div><div class="line"><span class="comment">// The callback will be invoked once the operation has either completed</span></div><div class="line"><span class="comment">// or failed.</span></div><div class="line">fs.readdir(<span class="string">'/usr/local/bin'</span>, (err, files) =&gt; &#123;</div><div class="line">  <span class="comment">// On error, show it and return</span></div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line"></div><div class="line">  <span class="comment">// files is an array containing the names of all entries</span></div><div class="line">  <span class="comment">// in the directory, excluding '.' (the directory itself)</span></div><div class="line">  <span class="comment">// and '..' (the parent directory).</span></div><div class="line"></div><div class="line">  <span class="comment">// Display directory entries</span></div><div class="line">  <span class="built_in">console</span>.log(files.join(<span class="string">' '</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>同步变量可用作<code>readdirSync</code>，它阻塞主线程，因此可以同时防止异步代码的执行。 大多数开发人员避免同步IO功能，以提高性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> files;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  files = fs.readdirSync(<span class="string">'/var/tmp'</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">  <span class="comment">// An error occurred</span></div><div class="line">  <span class="built_in">console</span>.error(err);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="使用generator"><a href="#使用generator" class="headerlink" title="使用generator"></a>使用generator</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Iterate through all items obtained via</span></div><div class="line"><span class="comment">// 'yield' statements</span></div><div class="line"><span class="comment">// A callback is passed to the generator function because it is required by</span></div><div class="line"><span class="comment">// the 'readdir' method</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">gen</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> iter = gen(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; iter.throw(err); &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> iter.next(data);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  iter.next();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dirPath = <span class="string">'/usr/local/bin'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Execute the generator function</span></div><div class="line">run(<span class="function"><span class="keyword">function</span>* (<span class="params">resume</span>) </span>&#123;</div><div class="line">  <span class="comment">// Emit the list of files in the directory from the generator</span></div><div class="line">  <span class="keyword">var</span> contents = <span class="keyword">yield</span> fs.readdir(dirPath, resume);</div><div class="line">  <span class="built_in">console</span>.log(contents);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="通过管道流复制文件"><a href="#通过管道流复制文件" class="headerlink" title="通过管道流复制文件"></a>通过管道流复制文件</h3><p>该程序使用可读流和可写流与流类提供的<code>pipe()</code>函数来复制文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// require the file system module</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">    在名为'node.txt'的当前目录中创建可读流文件</div><div class="line">     使用utf8编码</div><div class="line">     读取16-kilobyte块中的数据</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> readable = fs.createReadStream(__dirname + <span class="string">'/node.txt'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span>, <span class="attr">highWaterMark</span>: <span class="number">16</span> * <span class="number">1024</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// create writable stream</span></div><div class="line"><span class="keyword">var</span> writable = fs.createWriteStream(__dirname + <span class="string">'/nodePipe.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 使用pipe将可读写复制</span></div><div class="line">readable.pipe(writable);</div></pre></td></tr></table></figure><p>同步读取文件</p><p>对于任何文件操作，您将需要文件系统模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div></pre></td></tr></table></figure><h4 id="Reading-a-String"><a href="#Reading-a-String" class="headerlink" title="Reading a String"></a>Reading a String</h4><p><code>fs.readFileSync</code>的行为类似于<code>fs.readFile</code>，但是它在同步完成时不会回调，因此阻止主线程。 大多数node.js开发人员喜欢异步变量，这将在程序执行中几乎没有任何延迟。</p><p>如果指定了<code>encoding</code>选项，将返回一个字符串，否则将返回一个<code>Buffer</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Read a string from another file synchronously</span></div><div class="line"><span class="keyword">let</span> content;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  content = fs.readFileSync(<span class="string">'sync.txt'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</div><div class="line">&#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">  <span class="comment">// An error occurred</span></div><div class="line">  <span class="built_in">console</span>.error(err);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="检查文件或目录的权限"><a href="#检查文件或目录的权限" class="headerlink" title="检查文件或目录的权限"></a>检查文件或目录的权限</h3><p><code>fs.access()</code>确定路径是否存在，以及用户对该路径上的文件或目录的权限。 <code>fs.access</code>不返回结果，如果没有返回错误，则路径存在，并且用户具有所需的权限。</p><p>权限模式作为<code>fs</code>对象<code>fs.constants</code>上的属性可用</p><ul><li><code>fs.constants.F_OK</code> - 具有读/写/执行权限（如果没有提供模式，这是默认值）</li><li><code>fs.constants.R_OK</code> - 具有读取权限</li><li><code>fs.constants.W_OK</code> - 具有写权限</li><li><code>fs.constants.X_OK</code> - 具有执行权限（与Windows上的<code>fs.constants.F_OK</code>相同）</li></ul><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="string">'/path/to/check'</span>;</div><div class="line"></div><div class="line"><span class="comment">// checks execute permission</span></div><div class="line">fs.access(path, fs.constants.X_OK, (err) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%s doesn't exist"</span>, path);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'can execute %s'</span>, path);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 检查我们是否有读/写权限</span></div><div class="line"><span class="comment">// 指定多个权限模式时</span></div><div class="line"><span class="comment">// 每个模式由管道分隔：`|`</span></div><div class="line">fs.access(path, fs.constants.R_OK | fs.constants.W_OK, (err) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%s doesn't exist"</span>, path);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'can read/write %s'</span>, path);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p><code>fs.access</code>也有一个同步版本的<code>fs.accessSync</code>。 使用<code>fs.accessSync</code>时，必须将其包含在<code>try/catch</code>块中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检查写权限</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    fs.accessSync(path, fs.constants.W_OK);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'can write %s'</span>, path);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%s doesn't exist"</span>, path);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="检查文件或目录是否存在"><a href="#检查文件或目录是否存在" class="headerlink" title="检查文件或目录是否存在"></a>检查文件或目录是否存在</h3><h4 id="异步-1"><a href="#异步-1" class="headerlink" title="异步"></a>异步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.stat(<span class="string">'path/to/file'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'file or directory exists'</span>);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (err.code === <span class="string">'ENOENT'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'file or directory does not exist'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="同步-1"><a href="#同步-1" class="headerlink" title="同步"></a>同步</h4><p>在这里，我们必须将函数调用包装在<code>try/catch</code>块中来处理错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    fs.statSync(<span class="string">'path/to/file'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'file or directory exists'</span>);</div><div class="line">&#125;<span class="keyword">catch</span> (err) &#123;</div><div class="line">  <span class="keyword">if</span> (err.code === <span class="string">'ENOENT'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'file or directory does not exist'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="确定文本文件的行数"><a href="#确定文本文件的行数" class="headerlink" title="确定文本文件的行数"></a>确定文本文件的行数</h3><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> file = <span class="string">'path.to.file'</span>;</div><div class="line"><span class="keyword">var</span> linesCount = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> rl = readline.createInterface(&#123;</div><div class="line">    <span class="attr">input</span>: fs.createReadStream(file),</div><div class="line">    <span class="attr">output</span>: process.stdout,</div><div class="line">    <span class="attr">terminal</span>: <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line">rl.on(<span class="string">'line'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</div><div class="line">    linesCount++; <span class="comment">// 在每个换行符上，将+1添加到“linesCount”</span></div><div class="line">&#125;);</div><div class="line">rl.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(linesCount); <span class="comment">// 当“close”事件被调用时打印结果</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="逐行读取文件"><a href="#逐行读取文件" class="headerlink" title="逐行读取文件"></a>逐行读取文件</h3><h4 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> file = <span class="string">'path.to.file'</span>;</div><div class="line"><span class="keyword">var</span> rl = readline.createInterface(&#123;</div><div class="line">    <span class="attr">input</span>: fs.createReadStream(file),</div><div class="line">    <span class="attr">output</span>: process.stdout,</div><div class="line">    <span class="attr">terminal</span>: <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">rl.on(<span class="string">'line'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(line) <span class="comment">// 在每个换行符上打印行的内容</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="创建或使用现有目录时避免竞争条件"><a href="#创建或使用现有目录时避免竞争条件" class="headerlink" title="创建或使用现有目录时避免竞争条件"></a>创建或使用现有目录时避免竞争条件</h3><p>由于Node的异步性质，首先要创建或使用目录：</p><ol><li><p>用<code>fs.stat()</code>检查它的存在，然后</p></li><li><p>根据存在检查的结果创建或使用它，</p></li></ol><p>如果在检查时间和创建时间之间创建文件夹，则可能导致竞争条件。 下面的方法将<code>fs.mkdir()</code>和<code>fs.mkdirSync()</code>包含在错误捕获的包装器中，如果代码为EEXIST（已经存在），则异常通过。 如果错误是别的东西，像EPERM（pemission被拒绝），抛出或传递一个像本机功能那样的错误。</p><p><strong><code>fs.mkdir()</code>的异步版本</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkdir</span> (<span class="params">dirPath, callback</span>) </span>&#123;</div><div class="line">  fs.mkdir(dirPath, (err) =&gt; &#123;</div><div class="line">    callback(err &amp;&amp; err.code !== <span class="string">'EEXIST'</span> ? err : <span class="literal">null</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">mkdir(<span class="string">'./existingDir'</span>, (err) =&gt; &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (err)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(err.code);</div><div class="line"></div><div class="line">  <span class="comment">// Do something with `./existingDir` here</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><strong>同步版本<code>fs.mkdirSync()</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkdirSync</span> (<span class="params">dirPath</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    fs.mkdirSync(dirPath);</div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    <span class="keyword">if</span> ( e.code !== <span class="string">'EEXIST'</span> ) <span class="keyword">throw</span> e;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mkdirSync(<span class="string">'./existing-dir'</span>);</div><div class="line"><span class="comment">// Do something with `./existing-dir` now</span></div></pre></td></tr></table></figure><p>更改文本文件的内容</p><p>例。 它将使用简单的RegExp <code>replace(/email/gim, &#39;name&#39;)</code>将文本<code>email</code>替换为文本文件<code>index.txt</code>中的<code>name</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"> </div><div class="line">fs.readFile(<span class="string">'index.txt'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> newValue = data.replace(<span class="regexp">/email/gim</span>, <span class="string">'name'</span>);</div><div class="line"> </div><div class="line">    fs.writeFile(<span class="string">'index.txt'</span>, newValue, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="使用流克隆文件"><a href="#使用流克隆文件" class="headerlink" title="使用流克隆文件"></a>使用流克隆文件</h3><p>该程序说明了如何使用可读写的流使用<code>createReadStream()</code>和由文件系统模块提供的<code>createWriteStream()</code>函数来复制文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Require the file System module</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  Create readable stream to file in current directory (__dirname) named 'node.txt'</div><div class="line">  Use utf8 encoding </div><div class="line">  Read the data in 16-kilobyte chunks</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> readable = fs.createReadStream(__dirname + <span class="string">'/node.txt'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span>, <span class="attr">highWaterMark</span>: <span class="number">16</span> * <span class="number">1024</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// create writable stream</span></div><div class="line"><span class="keyword">var</span> writable = fs.createWriteStream(__dirname + <span class="string">'/nodeCopy.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Write each chunk of data to the writable stream</span></div><div class="line">readable.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">    writable.write(chunk);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="使用unlink或unlinkSync删除文件"><a href="#使用unlink或unlinkSync删除文件" class="headerlink" title="使用unlink或unlinkSync删除文件"></a>使用unlink或unlinkSync删除文件</h3><p>异步删除文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.unlink(<span class="string">'/path/to/file.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'file deleted'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>您也可以同步删除*：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.unlinkSync(<span class="string">'/path/to/file.txt'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'file deleted'</span>);</div></pre></td></tr></table></figure><p>*避免同步方法，因为它们阻止整个进程，直到执行完成。</p><h3 id="使用流将文件读入Buffer"><a href="#使用流将文件读入Buffer" class="headerlink" title="使用流将文件读入Buffer"></a>使用流将文件读入Buffer</h3><p>在使用<code>fs.readFile()</code>方法从文件读取内容已经是异步的时候，有时我们想要在一个Stream中获取数据，而不是简单的回调。 这样我们可以将这些数据管理到其他位置，或者将其处理成最后一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 使用数组存储文件数据块</span></div><div class="line"><span class="keyword">let</span> chunks = [];</div><div class="line"><span class="comment">// 使用这个变量来存储最终的数据</span></div><div class="line"><span class="keyword">let</span> fileBuffer;</div><div class="line"></div><div class="line"><span class="comment">// 将文件读入stream.Readable</span></div><div class="line"><span class="keyword">let</span> fileStream = fs.createReadStream(<span class="string">'text.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// An error occurred with the stream</span></div><div class="line">fileStream.once(<span class="string">'error'</span>, (err) =&gt; &#123;</div><div class="line">    <span class="comment">// Be sure to handle this properly!</span></div><div class="line">    <span class="built_in">console</span>.error(err); </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 文件完成读取</span></div><div class="line">fileStream.once(<span class="string">'end'</span>, () =&gt; &#123;</div><div class="line">    <span class="comment">// 从数据块中创建最终数据Buffer;</span></div><div class="line">    fileBuffer = Buffer.concat(chunks);</div><div class="line">    </div><div class="line">    <span class="comment">// Of course, you can do anything else you need to here, like emit an event!</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Data is flushed from fileStream in chunks,</span></div><div class="line"><span class="comment">// this callback will be executed for each chunk</span></div><div class="line">fileStream.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</div><div class="line">    chunks.push(chunk); <span class="comment">// push data chunk to array</span></div><div class="line"></div><div class="line">    <span class="comment">// We can perform actions on the partial data we have so far!</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="使用writeFile或writeFileSync写入文件"><a href="#使用writeFile或writeFileSync写入文件" class="headerlink" title="使用writeFile或writeFileSync写入文件"></a>使用writeFile或writeFileSync写入文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Save the string "Hello world!" in a file called "hello.txt" in</span></div><div class="line"><span class="comment">// the directory "/tmp" using the default encoding (utf8).</span></div><div class="line"><span class="comment">// This operation will be completed in background and the callback</span></div><div class="line"><span class="comment">// will be called when it is either done or failed.</span></div><div class="line">fs.writeFile(<span class="string">'/tmp/hello.txt'</span>, <span class="string">'Hello world!'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// If an error occurred, show it and return</span></div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">  <span class="comment">// Successfully wrote to the file!</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Save binary data to a file called "binary.txt" in the current</span></div><div class="line"><span class="comment">// directory. Again, the operation will be completed in background.</span></div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer([ <span class="number">0x48</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span> ]);</div><div class="line">fs.writeFile(<span class="string">'binary.txt'</span>, buffer, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// If an error occurred, show it and return</span></div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">  <span class="comment">// Successfully wrote binary contents to the file!</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>fs.writeFileSync</code>的行为类似于<code>fs.writeFile</code>，但是它不会在同步完成时执行回调，因此阻止主线程。 大多数node.js开发人员喜欢异步变量，这将在程序执行中几乎没有任何延迟。</p><p>注意：在node.js中阻塞主线程是不好的做法。 同步功能只能在调试时使用或没有其他选项可用。</p><p>在Node.js中，资源密集型操作（例如I / O）异步执行，但具有同步对应（例如存在<code>fs.readFile</code>，其对应方是<code>fs.readFileSync</code>）。 由于Node是单线程的，所以在使用同步操作时应该小心，因为它们会阻塞整个进程。</p><p>如果进程被同步操作阻塞，那么整个执行周期（包括事件循环）将被停止。 这意味着其他异步代码（包括事件和事件处理程序）将不会运行，您的程序将继续等到单个阻止操作完成。</p><p>同步和异步操作都有适当的用途，但必须注意使用它们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从文件异步读取&quot;&gt;&lt;a href=&quot;#从文件异步读取&quot; class=&quot;headerlink&quot; title=&quot;从文件异步读取&quot;&gt;&lt;/a&gt;从文件异步读取&lt;/h3&gt;
    
    </summary>
    
      <category term="Node" scheme="http://kakajing.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://kakajing.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>使用Express的Web Apps</title>
    <link href="http://kakajing.github.io/2017/05/15/%E4%BD%BF%E7%94%A8Express%E7%9A%84Web%20Apps/"/>
    <id>http://kakajing.github.io/2017/05/15/使用Express的Web Apps/</id>
    <published>2017-05-15T10:17:14.000Z</published>
    <updated>2017-05-15T10:18:01.570Z</updated>
    
    <content type="html"><![CDATA[<p>Express是一个极小而灵活的Node.js Web应用程序框架，为构建Web应用程序提供了一套强大的功能。</p><p>Express的官方网站是<a href="http://expressjs.com/" target="_blank" rel="external">expressjs.com</a>。 源可以在<a href="https://github.com/strongloop/express" target="_blank" rel="external">GitHub</a>上找到。</p><a id="more"></a><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>您将首先需要创建一个目录，在您的shell中访问它，并通过运行<code>npm install express -save</code>，使用npm安装Express</p><p>创建一个文件并将其命名为<code>app.js</code>，并添加以下代码，该代码创建一个新的Express服务器，并使用<code>app.get</code>方法向其添加一个端点（<code>/ ping</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/ping'</span>, (request, response) =&gt; &#123;</div><div class="line">    response.send(<span class="string">'pong'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8080</span>, <span class="string">'localhost'</span>);</div></pre></td></tr></table></figure><p>要运行您的脚本，请在您的shell中使用以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; node app.js</div></pre></td></tr></table></figure><p>您的应用程序将接受本地主机端口8080上的连接。如果省略了<code>app.listen</code>的hostname参数，则服务器将接受计算机的IP地址以及localhost上的连接。 如果端口值为0，则操作系统将分配可用端口。</p><p>一旦您的脚本运行，您可以在shell中测试它，以确认您从服务器获得预期响应“pong”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; curl http:<span class="comment">//localhost:8080/ping</span></div><div class="line">pong</div></pre></td></tr></table></figure><p>您也可以打开一个Web浏览器，浏览到url <a href="http://localhost:8080/ping来查看输出" target="_blank" rel="external">http://localhost:8080/ping来查看输出</a></p><h3 id="Basic-routing"><a href="#Basic-routing" class="headerlink" title="Basic routing"></a>Basic routing</h3><p>首先创建一个快速应用程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div></pre></td></tr></table></figure><p>那么你可以定义这样的routes：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/someUri'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div></pre></td></tr></table></figure><p>该结构适用于所有HTTP方法，并且期望path作为第一个参数，并且该路径的处理程序接收请求和响应对象。 所以，对于基本的HTTP方法，这些是routes</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// GET www.domain.com/myPath</span></div><div class="line">app.get(<span class="string">'/myPath'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// POST www.domain.com/myPath</span></div><div class="line">app.post(<span class="string">'/myPath'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// PUT www.domain.com/myPath</span></div><div class="line">app.put(<span class="string">'/myPath'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// DELETE www.domain.com/myPath</span></div><div class="line">app.delete(<span class="string">'/myPath'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div></pre></td></tr></table></figure><p>您可以在<a href="http://expressjs.com/en/4x/api.html#app.METHOD" target="_blank" rel="external">此处</a>查看支持的verbs 的完整列表。 如果要为路由和所有HTTP方法定义相同的行为，可以使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.all(<span class="string">'/myPath'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div></pre></td></tr></table></figure><p>or</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/myPath'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div></pre></td></tr></table></figure><p>or</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// * wildcard will route for all paths</span></div></pre></td></tr></table></figure><p>您可以链接单个路径的路由定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.route(<span class="string">'/myPath'</span>)</div><div class="line">  .get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div><div class="line">  .post(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div><div class="line">  .put(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div></pre></td></tr></table></figure><p>您还可以向任何HTTP方法添加功能。 它们将在最后回调之前运行，并将参数（req，res，next）作为参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// GET www.domain.com/myPath</span></div><div class="line">app.get(<span class="string">'/myPath'</span>, myFunction, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;&#125;)</div></pre></td></tr></table></figure><p>您的最终回调可以存储在外部文件中，以避免将过多的代码放在一个文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// other.js</span></div><div class="line">exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;<span class="comment">/* do some stuff */</span>&#125;;</div></pre></td></tr></table></figure><p>然后在包含您的routes的文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> other = <span class="built_in">require</span>(<span class="string">'./other.js'</span>);</div><div class="line">app.get(<span class="string">'/someUri'</span>, myFunction, other.doSomething);</div></pre></td></tr></table></figure><p>这将使您的代码更整洁。</p><h3 id="Modular-express-application"><a href="#Modular-express-application" class="headerlink" title="Modular express application"></a>Modular express application</h3><p>使快速Web应用模块化使用路由器工厂：</p><p>Module:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// greet.js</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">options = &#123;&#125;</span>) </span>&#123; <span class="comment">// Router factory</span></div><div class="line">    <span class="keyword">const</span> router = express.Router();</div><div class="line"></div><div class="line">    router.get(<span class="string">'/greet'</span>, (req, res, next) =&gt; &#123;</div><div class="line">        res.end(options.greeting);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> router;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>Application:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> greetMiddleware = <span class="built_in">require</span>(<span class="string">'./greet.js'</span>);</div><div class="line"></div><div class="line">express()</div><div class="line">    .use(<span class="string">'/api/v1/'</span>, greetMiddleware(&#123; <span class="attr">greeting</span>:<span class="string">'Hello world'</span> &#125;))</div><div class="line">    .listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure><p>这将使您的应用程序模块化，可定制，您的代码可重用。</p><p>当访问<code>http://&lt;hostname&gt;:8080/api/v1/greet</code>输出将是<code>Hello world</code></p><h4 id="比较复杂的例子"><a href="#比较复杂的例子" class="headerlink" title="比较复杂的例子"></a>比较复杂的例子</h4><p>具有显示中间件工厂优势的服务的示例。</p><p>Module:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// greet.js</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">options = &#123;&#125;</span>) </span>&#123; <span class="comment">// Router factory</span></div><div class="line">    <span class="keyword">const</span> router = express.Router();</div><div class="line">    <span class="comment">// Get controller</span></div><div class="line">    <span class="keyword">const</span> &#123;service&#125; = options;</div><div class="line"></div><div class="line">    router.get(<span class="string">'/greet'</span>, (req, res, next) =&gt; &#123;</div><div class="line">        res.end(</div><div class="line">            service.createGreeting(req.query.name || <span class="string">'Stranger'</span>)</div><div class="line">        );</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> router;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>Application:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> greetMiddleware = <span class="built_in">require</span>(<span class="string">'./greet.js'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingService</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(greeting || 'Hello, ') &#123;</div><div class="line">        <span class="keyword">this</span>.greeting = greeting;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createGreeting(name) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.message&#125;</span>, <span class="subst">$&#123;name&#125;</span>!`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">express()</div><div class="line">    .use(<span class="string">'/api/v1/service1'</span>, greetMiddleware(&#123;</div><div class="line">        <span class="attr">service</span>: <span class="keyword">new</span> GreetingService(<span class="string">'Hello'</span>),</div><div class="line">    &#125;))</div><div class="line">    .use(<span class="string">'/api/v1/service2'</span>, greetMiddleware(&#123;</div><div class="line">        <span class="attr">service</span>: <span class="keyword">new</span> GreetingService(<span class="string">'Hi'</span>),</div><div class="line">    &#125;))</div><div class="line">    .listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure><p>当访问<code>http://&lt;hostname&gt;:8080/api/v1/service1/greet?name=World</code>时，输出将是<code>Hello，World</code>并访问<code>http://&lt;hostname&gt;:8080/api/v1/service2/greet?name=World</code>的输出将是<code>Hello，World</code>。</p><h3 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h3><h4 id="使用模板引擎-1"><a href="#使用模板引擎-1" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h4><p>以下代码将将Jade设置为模板引擎。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);  <span class="comment">//Imports the express module</span></div><div class="line"><span class="keyword">const</span> app = express();  <span class="comment">//Creates an instance of the express module</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>; <span class="comment">//Randomly chosen port</span></div><div class="line"></div><div class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'jade'</span>); <span class="comment">//Sets jade as the View Engine / Template Engine</span></div><div class="line">app.set(<span class="string">'views'</span>,<span class="string">'src/views'</span>); <span class="comment">//Sets the directory where all the views (.jade files) are stored.</span></div><div class="line"></div><div class="line"><span class="comment">//Creates a Root Route</span></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.render(<span class="string">'index'</span>);  <span class="comment">//将index.jade文件渲染为html并作为响应返回。 渲染功能可选地将数据传递给视图。</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//启动具有回调的Express服务器</span></div><div class="line">app.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Server is running at port'</span>, PORT);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(err));</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>类似地，也可以使用其他模板引擎，例如<code>Handlebars</code>(<code>hbs</code>) 或<code>ejs</code>。 记得要安装<code>npm install</code>模板引擎。 对于Handlebars，我们使用<code>hbs</code>包，对于Jade，我们有一个 <code>jade</code>包，对于EJS，我们有一个<code>ejs</code>包。 PS：Jade最近更名为<code>pug</code>。</p><h4 id="EJS模板示例"><a href="#EJS模板示例" class="headerlink" title="EJS模板示例"></a>EJS模板示例</h4><p>使用EJS（像其他快速模板），您可以运行服务器代码并从您的HTML访问您的服务器变量。<br>在EJS中，使用“<code>&lt;%</code>”作为开始标签，将“<code>%&gt;</code>”作为结束标签，可以使用<code>&lt;%=var_name%&gt;</code>访问作为渲染参数传递的变量。</p><p>例如，如果您的服务器代码中有supplies array</p><p>你可以循环使用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">   &lt;ul&gt;</div><div class="line">&lt;% for(var i=0; i&lt;supplies.length; i++) &#123; %&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href='supplies/&lt;%= supplies[i] %&gt;'&gt;</div><div class="line">            &lt;%= supplies[i] %&gt;</div><div class="line">        &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>从示例中可以看出，每当您在服务器端代码和HTML之间切换时，都需要关闭当前的EJS标签，并在之后打开一个新的EJS标签，因此我们希望在<code>for</code>命令中创建<code>li</code>，因此我们需要关闭EJS标签 在最后，为大括号创建新标签<br>另一个例子<br>如果要将输入的默认版本从服务器端变为一个变量，我们使用<code>&lt;%=</code></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message:&lt;br&gt;</div><div class="line">&lt;input type="text" value="&lt;%= message %&gt;" name="message" required&gt;</div></pre></td></tr></table></figure><p>这里从服务器端传递的消息变量将是您的输入的默认值，请注意，如果您没有从服务器端传递消息变量，EJS将抛出异常。 您可以使用<code>res.render(&#39;index&#39;, {message: message});</code> 传递参数（对于名为index.ejs的ejs文件）。</p><p>在EJS标签中，您还可以使用<code>if</code>，<code>while</code>或任何其他JavaScript命令。</p><h3 id="提供静态文件"><a href="#提供静态文件" class="headerlink" title="提供静态文件"></a>提供静态文件</h3><p>使用Express构建Web服务器时，通常需要提供动态内容和静态文件的组合。</p><p>例如，您可能将index.html和script.js作为文件系统中保留的静态文件。</p><p>通常使用名为“public”的文件夹具有静态文件。 在这种情况下，文件夹结构可能如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">project root</div><div class="line">│   server.js</div><div class="line">│   package.json </div><div class="line">│</div><div class="line">└───public</div><div class="line">    │   index.html</div><div class="line">    │   script.js</div></pre></td></tr></table></figure><p>这是如何配置Express来提供静态文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure><p>注意：一旦文件夹被配置，index.html，script.js和“public”文件夹中的所有文件将在根路径中可用（您不能在url中指定<code>/ public /</code>）。 这是因为，express快速查找相对于配置的静态文件夹的文件。 您可以指定虚拟路径前缀，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure><p>将在<code>/ static /</code> prefix下使资源可用。</p><h4 id="多个文件夹"><a href="#多个文件夹" class="headerlink" title="多个文件夹"></a>多个文件夹</h4><p>可以同时定义多个文件夹：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line">app.use(express.static(<span class="string">'images'</span>));</div><div class="line">app.use(express.static(<span class="string">'files'</span>));</div></pre></td></tr></table></figure><p>Express服务器将以定制顺序检查文件夹。 如果具有相同名称的文件，则第一个匹配文件夹中的文件将被提供。</p><h3 id="添加中间件"><a href="#添加中间件" class="headerlink" title="添加中间件"></a>添加中间件</h3><p>中间件功能是可以访问请求对象（req），响应对象（res）以及应用程序的请求 - 响应周期中的下一个中间件函数的函数。</p><p>中间件功能可以执行任何代码，更改res和req对象，结束响应周期并调用下一个中间件。</p><p>中间件的很常见的例子是cors模块。 要添加CORS支持，只需安装它，就要求它并放置此行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(cors());</div></pre></td></tr></table></figure><p>在任何路由器或路由功能之前。</p><h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><h4 id="Basic-Error-Handling"><a href="#Basic-Error-Handling" class="headerlink" title="Basic Error Handling"></a>Basic Error Handling</h4><p>默认情况下，Express将在<code>/views</code>目录中查找“error”视图来呈现。 只需创建“error”视图并将其放在视图目录中来处理错误。 使用错误消息，状态和堆栈跟踪写入错误，例如：</p><p><em>views/error.pug</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html</div><div class="line">  body</div><div class="line">      h1= message</div><div class="line">      h2= error.status</div><div class="line">      p= error.stack</div></pre></td></tr></table></figure><h4 id="Advanced-Error-Handling"><a href="#Advanced-Error-Handling" class="headerlink" title="Advanced Error Handling"></a>Advanced Error Handling</h4><p>在中间件功能堆栈的最后定义您的错误处理中间件功能。 这些有四个参数而不是三个<code>（err，req，res，next）</code>，例如：</p><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 抓取404并转发到错误处理程序</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</div><div class="line">    err.status = <span class="number">404</span>;</div><div class="line"></div><div class="line">    <span class="comment">//将错误传递到下一个匹配路由。</span></div><div class="line">    next(err);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// handle error, print stacktrace</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</div><div class="line">    res.status(err.status || <span class="number">500</span>);</div><div class="line"></div><div class="line">    res.render(<span class="string">'error'</span>, &#123;</div><div class="line">        <span class="attr">message</span>: err.message,</div><div class="line">        <span class="attr">error</span>: err</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>您可以定义几个错误处理中间件函数，就像常规中间件功能一样。</p><h3 id="Express中的错误处理"><a href="#Express中的错误处理" class="headerlink" title="Express中的错误处理"></a>Express中的错误处理</h3><p>在Express中，您可以定义统一的错误处理程序来处理应用程序中发生的错误。 在所有路由和逻辑代码的末尾定义处理程序。</p><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">//GET /names/john</span></div><div class="line">app.get(<span class="string">'/names/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (req.params.name == <span class="string">'john'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> res.send(<span class="string">'Valid Name'</span>);</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not valid name'</span>));    <span class="comment">//pass to error handler</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err.stack);    <span class="comment">// e.g., Not valid name</span></div><div class="line">    <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Internal Server Occured'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><h3 id="从请求获取信息"><a href="#从请求获取信息" class="headerlink" title="从请求获取信息"></a>从请求获取信息</h3><p>从请求的URL获取信息（请注意，<code>req</code>是路由的处理函数中的请求对象）。 考虑这个路由定义<strong><code>/settings/:user_id</code></strong>和这个特定的例子<strong><code>/settings/32135?field=name</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get the full path</span></div><div class="line">req.originalUrl <span class="comment">// =&gt; /settings/32135?field=name</span></div><div class="line"></div><div class="line"><span class="comment">// get the user_id param</span></div><div class="line">req.params.user_id <span class="comment">// =&gt; 32135     </span></div><div class="line"></div><div class="line"><span class="comment">// get the query value of the field</span></div><div class="line">req.query.field <span class="comment">// =&gt; 'name'</span></div></pre></td></tr></table></figure><p>您也可以获取请求的标题，像这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">req.get(<span class="string">'Content-Type'</span>)</div><div class="line"><span class="comment">// "text/plain"</span></div></pre></td></tr></table></figure><p>为了简化获取其他信息，您可以使用中间件。 例如，要获取请求的身体信息，您可以使用 <a href="https://github.com/expressjs/body-parser" target="_blank" rel="external">body-parser</a> 中间件，这将将原始请求体转换为可用格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line">app.use(bodyParser.json()); <span class="comment">// for parsing application/json</span></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)); <span class="comment">// for parsing application/x-www-form-urlencoded</span></div></pre></td></tr></table></figure><p>现在假设这样的请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PUT /settings/<span class="number">32135</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Peter"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>您可以访问这样发布的名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">req.body.name</div><div class="line"><span class="comment">// "Peter"</span></div></pre></td></tr></table></figure><p>以类似的方式，您可以从请求访问Cookie，您还需要一个中间件，如 <a href="https://github.com/expressjs/cookie-parser?_ga=1.220663448.1060402334.1435240424" target="_blank" rel="external">cookie-parser</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">req.cookies.name</div></pre></td></tr></table></figure><h3 id="Hook：如何在任何req之前和之后执行代码"><a href="#Hook：如何在任何req之前和之后执行代码" class="headerlink" title="Hook：如何在任何req之前和之后执行代码"></a>Hook：如何在任何req之前和之后执行代码</h3><p><code>app.use()</code>和中间件可以用于“before”，并且 <a href="https://nodejs.org/api/http.html#http_event_close_1" target="_blank" rel="external">close</a>和 <a href="https://nodejs.org/api/stream.html#stream_event_finish" target="_blank" rel="external">finish</a>事件的组合可以用于“after”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">afterResponse</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        res.removeListener(<span class="string">'finish'</span>, afterResponse);</div><div class="line">        res.removeListener(<span class="string">'close'</span>, afterResponse);</div><div class="line"></div><div class="line">        <span class="comment">// actions after response</span></div><div class="line">    &#125;</div><div class="line">    res.on(<span class="string">'finish'</span>, afterResponse);</div><div class="line">    res.on(<span class="string">'close'</span>, afterResponse);</div><div class="line"></div><div class="line">    <span class="comment">// action before request</span></div><div class="line">    <span class="comment">// eventually calling `next()`</span></div><div class="line">    next();</div><div class="line">&#125;);</div><div class="line">...</div><div class="line">app.use(app.router);</div></pre></td></tr></table></figure><p>这个例子就是logger中间件，默认情况下它将追加到日志中。</p><p>只要确保这“中间件”是用在<code>app.router</code>为顺序无关紧要。</p><h3 id="具有ExpressJS的JSON-API"><a href="#具有ExpressJS的JSON-API" class="headerlink" title="具有ExpressJS的JSON API"></a>具有ExpressJS的JSON API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>); <span class="comment">// Use cors module for enable Cross-origin resource sharing</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(cors()); <span class="comment">// for all routes</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">8080</span>;</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> info = &#123;</div><div class="line">        <span class="string">'string_value'</span>: <span class="string">'StackOverflow'</span>,</div><div class="line">        <span class="string">'number_value'</span>: <span class="number">8476</span></div><div class="line">    &#125;</div><div class="line">    res.json(info);</div><div class="line"></div><div class="line">    <span class="comment">// or</span></div><div class="line">    <span class="comment">/* res.send(JSON.stringify(&#123;</span></div><div class="line">        string_value: 'StackOverflow',</div><div class="line">        number_value: 8476</div><div class="line">    &#125;)) */</div><div class="line"></div><div class="line">  <span class="comment">//you can add a status code to the json response</span></div><div class="line">   <span class="comment">/* res.status(200).json(info) */</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Node.js listening on port '</span> + port)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>在<code>http://localhost:8080/</code> output对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">string_value</span>: <span class="string">"StackOverflow"</span>,</div><div class="line">    <span class="attr">number_value</span>: <span class="number">8476</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="在Express定制中间件"><a href="#在Express定制中间件" class="headerlink" title="在Express定制中间件"></a>在Express定制中间件</h3><p>在Express中，您可以定义可用于检查请求或设置某些标题的中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123; &#125;);    <span class="comment">// signature</span></div></pre></td></tr></table></figure><p>例</p><p>以下代码将<code>user</code>添加到请求对象，并将控件传递给下一个匹配路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">//each request will pass through it</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">    req.user = <span class="string">'testuser'</span>;</div><div class="line">    next();    <span class="comment">// it will pass the control to next matching route</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> user = req.user;</div><div class="line">    <span class="built_in">console</span>.log(user); <span class="comment">// testuser</span></div><div class="line">    <span class="keyword">return</span> res.send(user);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><h3 id="Named-routes-in-Django-style"><a href="#Named-routes-in-Django-style" class="headerlink" title="Named routes in Django-style"></a>Named routes in Django-style</h3><p>一个大问题是Express开箱即用不支持有valuable的命名路由。 解决方案是安装支持的第三方软件包，例如 <a href="https://github.com/dizlexik/express-reverse" target="_blank" rel="external">express-reverse</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express-reverse</div></pre></td></tr></table></figure><p>将其插入到您的项目中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line"><span class="built_in">require</span>(<span class="string">'express-reverse'</span>)(app);</div></pre></td></tr></table></figure><p>然后像这样使用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'test'</span>, <span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.end(<span class="string">'hello'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这种方法的缺点是您不能使用<a href="http://stackoverflow.com/documentation/node.js/483/web-apps-with-express/4433/advanced-router-usage#t=201608011024155231028" target="_blank" rel="external">高级路由器使用</a>中所示的路由Express模块。 解决方法是将您的<code>app</code>作为参数传递给您的路由器工厂：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./middlewares/routing'</span>)(app);</div></pre></td></tr></table></figure><p>像这样使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</div><div class="line">    app.get(<span class="string">'test'</span>, <span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">      res.end(<span class="string">'hello'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>您可以从现在开始，如何定义函数将其与指定的自定义命名空间合并并指向适当的控制器。</p><h3 id="使用cookie-parser设置cookie"><a href="#使用cookie-parser设置cookie" class="headerlink" title="使用cookie-parser设置cookie"></a>使用cookie-parser设置cookie</h3><p>以下是使用 <a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="external">cookie-parser</a>模块设置和读取Cookie的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>); <span class="comment">// module for parsing cookies</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(cookieParser());</div><div class="line"></div><div class="line">app.get(<span class="string">'/setcookie'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="comment">// setting cookies</span></div><div class="line">    res.cookie(<span class="string">'username'</span>, <span class="string">'john doe'</span>, &#123; <span class="attr">maxAge</span>: <span class="number">900000</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span> &#125;);</div><div class="line">    <span class="keyword">return</span> res.send(<span class="string">'Cookie has been set'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/getcookie'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> username = req.cookies[<span class="string">'username'</span>];</div><div class="line">    <span class="keyword">if</span> (username) &#123;</div><div class="line">        <span class="keyword">return</span> res.send(username);        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res.send(<span class="string">'No cookie found'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><h3 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h3><p>基本文档可以在<a href="http://expressjs.com/en/guide/error-handling.html" target="_blank" rel="external"><strong>这里</strong></a>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/path/:id(\\d+)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123; <span class="comment">// please note: "next" is passed</span></div><div class="line">    <span class="keyword">if</span> (req.params.id == <span class="number">0</span>) <span class="comment">// validate param</span></div><div class="line">        <span class="keyword">return</span> next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Id is 0'</span>)); <span class="comment">// go to first Error handler, see below</span></div><div class="line"></div><div class="line">    <span class="comment">// Catch error on sync operation</span></div><div class="line">    <span class="keyword">var</span> data;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        data = <span class="built_in">JSON</span>.parse(<span class="string">'/file.json'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span> next(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If some critical error then stop application</span></div><div class="line">    <span class="keyword">if</span> (!data)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Smth wrong'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// If you need send extra info to Error handler</span></div><div class="line">    <span class="comment">// then send custom error (see Appendix B)</span></div><div class="line">    <span class="keyword">if</span> (smth)</div><div class="line">        next(<span class="keyword">new</span> MyError(<span class="string">'smth wrong'</span>, arg1, arg2))</div><div class="line"></div><div class="line">    <span class="comment">// Finish request by res.render or res.end</span></div><div class="line">    res.status(<span class="number">200</span>).end(<span class="string">'OK'</span>);</div><div class="line">&#125;);    </div><div class="line"></div><div class="line"><span class="comment">// Be sure: order of app.use have matter</span></div><div class="line"><span class="comment">// Error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>)) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (smth-check, e.g. req.url != <span class="string">'POST'</span>) </div><div class="line">        <span class="keyword">return</span> next(err); <span class="comment">// go-to Error handler 2.</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(req.url, err.message);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (req.xhr) <span class="comment">// if req via ajax then send json else render error-page</span></div><div class="line">        res.json(err);</div><div class="line">    <span class="keyword">else</span> </div><div class="line">        res.render(<span class="string">'error.html'</span>, &#123;<span class="attr">error</span>: err.message&#125;);  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Error handler 2</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>)) </span>&#123;</div><div class="line">    <span class="comment">// do smth here e.g. check that error is MyError</span></div><div class="line">    <span class="keyword">if</span> (err <span class="keyword">instanceof</span> MyError) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err.message, err.arg1, err.arg2);</div><div class="line">    &#125;     </div><div class="line">    ...</div><div class="line">    res.end();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Appendix A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "In Express, 404 responses are not the result of an error, </span></div><div class="line"><span class="comment">// so the error-handler middleware will not capture them." </span></div><div class="line"><span class="comment">// You can change it.</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="number">404</span>)); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Appendix B</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// How to define custom error</span></div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">...</div><div class="line">function MyError(message, arg1, arg2) &#123;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">    <span class="keyword">this</span>.arg1 = arg1;</div><div class="line">    <span class="keyword">this</span>.arg2 = arg2;</div><div class="line">    <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, MyError);</div><div class="line">&#125;</div><div class="line">util.inherits(MyError, <span class="built_in">Error</span>);</div><div class="line">MyError.prototype.name = <span class="string">'MyError'</span>;</div></pre></td></tr></table></figure><h3 id="处理POST请求"><a href="#处理POST请求" class="headerlink" title="处理POST请求"></a>处理POST请求</h3><p>就像使用<code>app.get</code>方法处理Express中的get请求一样，您可以使用<code>app.post</code>方法来处理帖子请求。</p><p>但在您可以处理POST请求之前，您将需要使用body-parser中间件。 它只是解析<code>POST</code>，<code>PUT</code>，<code>DELETE</code>和其他请求的正文。</p><p><code>Body-Parser</code>中间件解析请求的正文，并将其转换为<code>req.body</code>中可用的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// Parses the body for POST, PUT, DELETE, etc.</span></div><div class="line">app.use(bodyParser.json());</div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</div><div class="line"></div><div class="line">app.post(<span class="string">'/post-data-here'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(req.body); <span class="comment">// req.body contains the parsed body of the request.</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8080</span>, <span class="string">'localhost'</span>);</div></pre></td></tr></table></figure><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>在这里，我们使用Express创建一个基本的hello world服务器。路线：</p><ul><li>‘/‘</li><li>‘/wiki’</li></ul><p>rest 时会给出“404”，即找不到页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line">    app.listen(port);</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;res.send(<span class="string">'HelloWorld!'</span>));</div><div class="line">app.get(<span class="string">'/wiki'</span>,(req,res)=&gt;res.send(<span class="string">'This is wiki page.'</span>));</div><div class="line">app.use(<span class="function">(<span class="params">req,res</span>)=&gt;</span>res.send(<span class="string">'404-PageNotFound'</span>));</div></pre></td></tr></table></figure><p>注意：我们将404路由作为最后一条路由，作为快速堆叠路由，并按顺序对每个请求进行处理。</p><h3 id="使用中间件和next回调"><a href="#使用中间件和next回调" class="headerlink" title="使用中间件和next回调"></a>使用中间件和next回调</h3><p>Express将<code>next</code>回调传递给每个路由处理程序和中间件功能，可用于跨多个处理程序的单个路由断开逻辑。 使用no参数调用<code>next()</code>可以指示express继续下一个匹配的中间件或路由处理程序。 使用错误调用<code>next(err)</code>将触发任何错误处理程序中间件。 调用<code>next(&#39;route&#39;)</code>将绕过当前路由上的任何后续中间件，并跳转到下一个匹配路由。 这允许域逻辑被分离成可重复使用的组件，这些组件是独立的，更简单的测试，更易于维护和更改。</p><h4 id="多个匹配路由"><a href="#多个匹配路由" class="headerlink" title="多个匹配路由"></a>多个匹配路由</h4><p>对<code>/api/foo</code>或<code>/api/bar</code>的请求将运行初始处理程序来查找成员，然后将控制权传递给每个路由的实际处理程序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// Both /api/foo and /api/bar will run this</span></div><div class="line">  lookupMember(<span class="function"><span class="keyword">function</span>(<span class="params">err, member</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</div><div class="line">    req.member = member;</div><div class="line">    next();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/api/foo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// Only /api/foo will run this</span></div><div class="line">  doSomethingWithMember(req.member);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/api/bar'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// Only /api/bar will run this</span></div><div class="line">  doSomethingDifferentWithMember(req.member);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="Error-handler"><a href="#Error-handler" class="headerlink" title="Error handler"></a>Error handler</h4><p>错误处理程序是具有签名<code>function(err, req, res, next)</code>的中间件。 它们可以按路径设置（例如<code>app.get(&#39;/foo&#39;, function(err, req, res, next)</code>），但通常，呈现错误页面的单个错误处理程序就足够了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/foo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  doSomethingAsync(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</div><div class="line">    renderPage(data);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// In the case that doSomethingAsync return an error, this special</span></div><div class="line"><span class="comment">// error handler middleware will be called with the error as the </span></div><div class="line"><span class="comment">// first parameter.</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</div><div class="line">  renderErrorPage(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>上述每个功能实际上是一个中间件功能，只要请求与定义的路由匹配，就可以运行，但是可以在单个路由上定义任意数量的中间件功能。 这样就可以将中间件定义在单独的文件和常见逻辑中，以便跨多个路由重用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/bananas'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  getMember(<span class="function"><span class="keyword">function</span>(<span class="params">err, member</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</div><div class="line">    <span class="comment">// If there's no member, don't try to look</span></div><div class="line">    <span class="comment">// up data. Just go render the page now.</span></div><div class="line">    <span class="keyword">if</span> (!member) <span class="keyword">return</span> next(<span class="string">'route'</span>);</div><div class="line">    <span class="comment">// Otherwise, call the next middleware and fetch</span></div><div class="line">    <span class="comment">// the member's data.</span></div><div class="line">    req.member = member;</div><div class="line">    next();</div><div class="line">  &#125;);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  getMemberData(req.member, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</div><div class="line">    <span class="comment">// If this member has no data, don't bother</span></div><div class="line">    <span class="comment">// parsing it. Just go render the page now.</span></div><div class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span> next(<span class="string">'route'</span>);</div><div class="line">    <span class="comment">// Otherwise, call the next middleware and parse</span></div><div class="line">    <span class="comment">// the member's data. THEN render the page.</span></div><div class="line">    req.member.data = data;</div><div class="line">    next();</div><div class="line">  &#125;);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  req.member.parsedData = parseMemberData(req.member.data);</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/bananas'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  renderBananas(req.member);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>在这个例子中，每一个中间件函数都可以是它自己的文件，也可以是文件中的其他变量，这样它可以在其他的路由中被重用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Express是一个极小而灵活的Node.js Web应用程序框架，为构建Web应用程序提供了一套强大的功能。&lt;/p&gt;
&lt;p&gt;Express的官方网站是&lt;a href=&quot;http://expressjs.com/&quot;&gt;expressjs.com&lt;/a&gt;。 源可以在&lt;a href=&quot;https://github.com/strongloop/express&quot;&gt;GitHub&lt;/a&gt;上找到。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://kakajing.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://kakajing.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>node.js入门</title>
    <link href="http://kakajing.github.io/2017/05/14/nodejs%E5%85%A5%E9%97%A8/"/>
    <id>http://kakajing.github.io/2017/05/14/nodejs入门/</id>
    <published>2017-05-14T14:44:33.000Z</published>
    <updated>2017-05-14T14:57:30.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hello-World-HTTP-server"><a href="#Hello-World-HTTP-server" class="headerlink" title="Hello World HTTP server"></a>Hello World HTTP server</h3><p>首先，为您的平台安装Node.js。</p><a id="more"></a><p>在这个例子中，我们将创建一个监听端口1337的HTTP服务器，它发送<code>Hello，World！</code> 到浏览器。 请注意，您可以使用任何其他服务当前未使用的端口号，而不使用端口1337。</p><p><code>http</code>模块是一个Node.js <a href="http://stackoverflow.com/documentation/node.js/340/getting-started-with-node-js/30139/core-modules" target="_blank" rel="external"><strong>核心模块</strong></a>（Node.js源代码中包含的一个模块，不需要安装额外的资源）。 <code>http</code>模块提供使用<code>http.createServer()</code>方法创建HTTP服务器的功能。 要创建应用程序，请创建一个包含以下JavaScript代码的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); <span class="comment">// Loads the http module</span></div><div class="line"></div><div class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 1. Tell the browser everything is OK (Status code 200), and the data is in plain text</span></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 2. Write the announced text to the body of the page</span></div><div class="line">    response.write(<span class="string">'Hello, World!\n'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 3. Tell the server that all of the response headers and body have been sent</span></div><div class="line">    response.end();</div><div class="line"></div><div class="line">&#125;).listen(<span class="number">1337</span>); <span class="comment">// 4. Tells the server what port to be on</span></div></pre></td></tr></table></figure><p>使用任何文件名保存文件。 在这种情况下，如果我们将其命名为<code>hello.js</code>，则可以通过转到文件所在的目录并使用以下命令来运行应用程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node hello.js</div></pre></td></tr></table></figure><p>然后可以使用浏览器中的URL <a href="http://localhost:1337/" target="_blank" rel="external">http://localhost:1337</a>或<a href="http://127.0.0.1:1337访问创建的服务器。" target="_blank" rel="external">http://127.0.0.1:1337访问创建的服务器。</a></p><p>一个简单的网页会在顶部显示一个“Hello，World！”文本，如下面的截图所示。</p><p> <img src="http://omux103p0.bkt.clouddn.com/sp170514_214939.png" alt="sp170514_214939"></p><h3 id="Hello-World命令行"><a href="#Hello-World命令行" class="headerlink" title="Hello World命令行"></a>Hello World命令行</h3><p>Node.js也可以用来创建命令行实用程序。 下面的代码从命令行参数读取一个字符串以打印一个Hello消息。</p><p>要运行这段代码：</p><ol><li>创建一个空文件，并粘贴下面的代码。 该文件的名称不重要，但很多人会将此文件命名为app.js或main.js.</li><li>更改文件的权限，使其成为可执行文件。 示例<code>chmod 700 FILE_NAME</code></li><li>通过键入<code>./APP_NAME</code>运行应用程序</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="meta"></span></div><div class="line">'use strict';</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">    The process.argv property returns an array containing the command line</div><div class="line">    arguments passed when the Node.js process was launched. The first element</div><div class="line">    will be process.execPath. The second element will be the path to the</div><div class="line">    JavaScript file being executed. The remaining elements will be any</div><div class="line">    additional command line arguments.</div><div class="line"></div><div class="line">    Example: [ 'node', '/path/to/yourscript', 'arg1', 'arg2', ... ]</div><div class="line">    URL: https://nodejs.org/api/process.html#process_process_argv</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//    1. Extract the name of the app/file name.</span></div><div class="line"><span class="keyword">var</span> appName = process.argv[<span class="number">1</span>].split(<span class="string">'/'</span>).pop();</div><div class="line"></div><div class="line"><span class="comment">//    2. Save the first provided argument as the username.</span></div><div class="line"><span class="keyword">var</span> name = process.argv[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="comment">//    3. Check if the name was provided.</span></div><div class="line"><span class="keyword">if</span> (!name) &#123;</div><div class="line">    <span class="comment">//    1. Give the user an example how to use the app.</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Missing argument! \n\n\tExample: <span class="subst">$&#123;appName&#125;</span> YOUR_NAME\n`</span>);</div><div class="line"></div><div class="line">    <span class="comment">//    -&gt; Exit the app if error. The nr 1 tells the system that the app quit</span></div><div class="line">    <span class="comment">//       with an error, thus another command won't be executed. For example:</span></div><div class="line">    <span class="comment">//       ./hello &amp;&amp; ls -&gt; won't execute ls</span></div><div class="line">    <span class="comment">//       ./hello David &amp;&amp; ls -&gt; will execute ls</span></div><div class="line">    process.exit(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//    4. Display the message in the console.</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</div></pre></td></tr></table></figure><h3 id="Hello-World-with-Express"><a href="#Hello-World-with-Express" class="headerlink" title="Hello World with Express"></a>Hello World with Express</h3><p>以下示例使用Express创建一个监听端口3000的HTTP服务器，响应“Hello，World！”。</p><p>首先，创建一个新的文件夹，例如。对<code>myApp</code>。 进入<code>myApp</code>并制作一个包含以下代码的新的JavaScript文件（例如，我们将其命名为<code>hello.js</code>）。 然后从命令行使用“npm install –save express”安装快速模块。 请参阅<a href="http://stackoverflow.com/documentation/node.js/482/npm/1588/installing-packages#t=20170324115118574098" target="_blank" rel="external">本文档</a>了解如何安装软件包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Import the top-level function of express</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Creates an Express application using the top-level function</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// Define port number as 3000</span></div><div class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</div><div class="line"></div><div class="line"><span class="comment">// Routes HTTP GET requests to the specified path "/" with the specified callback function</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">  response.send(<span class="string">'Hello, World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Make the app listen on port 3000</span></div><div class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Server listening on http://localhost:'</span> + port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>从命令行，运行以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node hello.js</div></pre></td></tr></table></figure><p>打开浏览器并浏览 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 或<a href="http://127.0.0.1:3000查看响应。" target="_blank" rel="external">http://127.0.0.1:3000查看响应。</a></p><h3 id="安装并运行Node-js"><a href="#安装并运行Node-js" class="headerlink" title="安装并运行Node.js"></a>安装并运行Node.js</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先，在您的开发计算机上安装Node.js。</p><p>Windows：转到 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js下载站点</a>并下载/运行安装程序。</p><p>Mac：转到 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js下载站点</a>并下载/运行安装程序。 或者，您可以通过<code>brew install node</code>安装节点。 Homebrew允许您通过命令行管理包。 您可以在<a href="http://brew.sh/" target="_blank" rel="external">Homebrew 网站</a>上阅读更多信息。</p><p>Linux：按照命令行安装页面上的发行说明进行操作。</p><h4 id="运行节点程序"><a href="#运行节点程序" class="headerlink" title="运行节点程序"></a>运行节点程序</h4><p>要运行Node.js程序，只需运行节点<code>app.js</code>或<code>nodejs app.js</code>，其中<code>app.js</code>是节点应用程序源代码的文件名。</p><p>或者，节点程序可以作为脚本执行。 为此，需要从指向节点解释器的shebang开始，例如 <code>#!/usr/bin/env node</code>。 然后，该文件必须设置为可执行文件。 现在脚本可以直接从命令行运行。</p><h3 id="Hello-World基本路由"><a href="#Hello-World基本路由" class="headerlink" title="Hello World基本路由"></a>Hello World基本路由</h3><p>一旦您了解如何使用节点创建<a href="http://stackoverflow.com/documentation/node.js/340/hello-world/1169/hello-world-http-server" target="_blank" rel="external">HTTP 服务器</a>，了解如何使其根据用户导航的路径“做”事情很重要。 这种现象称为“路由”。</p><p>最基本的例子是检查 <code>if (request.url === &#39;some/path/here&#39;)</code>，然后调用一个响应一个新文件的函数。</p><p>这里可以看到一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>);</div><div class="line">    response.end(<span class="string">'Hello, World!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> index(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">404</span>);</div><div class="line">    response.end(http.STATUS_CODES[<span class="number">404</span>]);</div><div class="line"></div><div class="line">&#125;).listen(<span class="number">1337</span>);</div></pre></td></tr></table></figure><p>如果你继续定义这样的“路由”，那么你最终会得到一个大量的回调函数，我们不想像这样的大混乱，所以我们来看看我们是否可以清理它。</p><p>首先，我们将所有路由存储在一个对象中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> routes = &#123;</div><div class="line">    <span class="string">'/'</span>: <span class="function"><span class="keyword">function</span> <span class="title">index</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">        response.writeHead(<span class="number">200</span>);</div><div class="line">        response.end(<span class="string">'Hello, World!'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'/foo'</span>: <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">        response.writeHead(<span class="number">200</span>);</div><div class="line">        response.end(<span class="string">'You are now viewing "foo"'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在我们已经在一个对象中存储了2条路由，现在我们可以在我们的主要回调中检查它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (request.url <span class="keyword">in</span> routes) &#123;</div><div class="line">        <span class="keyword">return</span> routes[request.url](request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">404</span>);</div><div class="line">    response.end(http.STATUS_CODES[<span class="number">404</span>]);</div><div class="line"></div><div class="line">&#125;).listen(<span class="number">1337</span>);</div></pre></td></tr></table></figure><p>现在每次尝试浏览您的网站时，它将检查您的路线中是否存在该路径，它将调用相应的功能。 如果没有找到路由，服务器将使用404（未找到）进行响应。</p><p>在那里你有它 - 使用HTTP Server API路由非常简单。</p><h3 id="调试您的NodeJS应用程序"><a href="#调试您的NodeJS应用程序" class="headerlink" title="调试您的NodeJS应用程序"></a>调试您的NodeJS应用程序</h3><p>您可以使用节点检查器。 运行此命令通过npm进行安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g node-inspector</div></pre></td></tr></table></figure><p>然后您可以使用调试您的应用程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node-debug app.js</div></pre></td></tr></table></figure><p>Github存储库可以在这里找到：<a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">https://github.com/node-inspector/node-inspector</a></p><h4 id="调试本机"><a href="#调试本机" class="headerlink" title="调试本机"></a>调试本机</h4><p>您也可以通过如下启动来本机调试node.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node debug your-script.js</div></pre></td></tr></table></figure><p>要在您想要的代码行中完全断开调试器，请使用以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">debugger</span>;</div></pre></td></tr></table></figure><h3 id="Hello-World-in-the-REPL"><a href="#Hello-World-in-the-REPL" class="headerlink" title="Hello World in the REPL"></a>Hello World in the REPL</h3><p>当没有参数调用时，Node.js启动也称为“Node shell”的REPL（Read-Eval-Print-Loop）。</p><p>在命令提示符下键入节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node</div><div class="line">&gt;</div></pre></td></tr></table></figure><p>在Node shell提示符<code>&gt;</code>下输入“Hello World！”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node</div><div class="line">&gt; <span class="string">"Hello World!"</span></div><div class="line"><span class="string">'Hello World!'</span></div></pre></td></tr></table></figure><h3 id="在线部署您的应用程序"><a href="#在线部署您的应用程序" class="headerlink" title="在线部署您的应用程序"></a>在线部署您的应用程序</h3><p>将应用程序部署到特定于（Node.js）的托管环境时，此环境通常提供可用于运行服务器的<code>PORT</code>环境变量。 将端口号更改为<code>process.env.PORT</code>允许您访问应用程序。</p><p>例如，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">   <span class="comment">// your server code</span></div><div class="line">&#125;).listen(process.env.PORT);</div></pre></td></tr></table></figure><p>另外，如果要在调试时离线访问，可以使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">  <span class="comment">// your server code</span></div><div class="line">&#125;).listen(process.env.PORT || <span class="number">3000</span>);</div></pre></td></tr></table></figure><p>其中3000是离线端口号。</p><h3 id="Core-modules"><a href="#Core-modules" class="headerlink" title="Core modules"></a>Core modules</h3><p>Node.js是一个Javascript引擎（Google的Chrome V8引擎，用C ++编写），允许在浏览器之外运行Javascript。 虽然许多库可用于扩展Node的功能，但引擎配备了一组实现基本功能的核心模块。</p><p>节点目前包含34个核心模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'assert'</span>,</div><div class="line">  <span class="string">'buffer'</span>,</div><div class="line">  <span class="string">'c/c++_addons'</span>,</div><div class="line">  <span class="string">'child_process'</span>,</div><div class="line">  <span class="string">'cluster'</span>,</div><div class="line">  <span class="string">'console'</span>,</div><div class="line">  <span class="string">'crypto'</span>,</div><div class="line">  <span class="string">'deprecated_apis'</span>,</div><div class="line">  <span class="string">'dns'</span>,</div><div class="line">  <span class="string">'domain'</span>,</div><div class="line">  <span class="string">'Events'</span>,</div><div class="line">  <span class="string">'fs'</span>,</div><div class="line">  <span class="string">'http'</span>,</div><div class="line">  <span class="string">'https'</span>,</div><div class="line">  <span class="string">'module'</span>,</div><div class="line">  <span class="string">'net'</span>,</div><div class="line">  <span class="string">'os'</span>,</div><div class="line">  <span class="string">'path'</span>,</div><div class="line">  <span class="string">'punycode'</span>,</div><div class="line">  <span class="string">'querystring'</span>,</div><div class="line">  <span class="string">'readline'</span>,</div><div class="line">  <span class="string">'repl'</span>,</div><div class="line">  <span class="string">'stream'</span>,</div><div class="line">  <span class="string">'string_decoder'</span>,</div><div class="line">  <span class="string">'timers'</span>,</div><div class="line">  <span class="string">'tls_(ssl)'</span>,</div><div class="line">  <span class="string">'tracing'</span>,</div><div class="line">  <span class="string">'tty'</span>,</div><div class="line">  <span class="string">'dgram'</span>,</div><div class="line">  <span class="string">'url'</span>,</div><div class="line">  <span class="string">'util'</span>,</div><div class="line">  <span class="string">'v8'</span>,</div><div class="line">  <span class="string">'vm'</span>,</div><div class="line">  <span class="string">'zlib'</span> ]</div></pre></td></tr></table></figure><p>此列表是从Node文档API <a href="https://nodejs.org/api/all.html（JSON文件：https://nodejs.org/api/all.json）获得的。" target="_blank" rel="external">https://nodejs.org/api/all.html（JSON文件：https://nodejs.org/api/all.json）获得的。</a></p><p>所有核心模块一目了然</p><h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><p><code>assert</code> 模块提供了一组简单的断言测试，可用于测试不变量。</p><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><p>在ECMAScript 2015（ES6）引入<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Refer%0D%0Aence/Global_Objects/TypedArray" target="_blank" rel="external"><code>TypedArray</code></a>之前，JavaScript语言没有读取或操纵二进制数据流的机制。 <code>Buffer</code>类作为Node.js API的一部分引入，可以在TCP流和文件系统操作等上下文中与八位字节流进行交互。</p><p>现在，在ES6中添加了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArra%0D%0Ay" target="_blank" rel="external"><code>TypedArray</code></a>，<code>Buffer</code>类实现了<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="external"><code>Uint8Array</code></a>  API以更优化的方式适用于Node.js的用例。</p><h4 id="c-c-addons"><a href="#c-c-addons" class="headerlink" title="c/c++_addons"></a><strong>c/c++_addons</strong></h4><p>Node.js Addons是使用C或C ++编写的动态链接共享对象，可以使用<code>require()</code>函数加载到Node.js中，并且就像它们是普通的Node.js模块一样使用。 它们主要用于在Node.js和C / C ++库之间运行的JavaScript之间提供接口。</p><h4 id="child-process"><a href="#child-process" class="headerlink" title="child_process"></a>child_process</h4><p><code>child_process</code>模块提供了以与popen（3）相似但不完全相同的方式生成子进程的功能。</p><h4 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a><a href="http://stackoverflow.com/documentation/node.js/2817/cluster-module" target="_blank" rel="external"><strong>cluster</strong></a></h4><p>Node.js的单个实例在单个线程中运行。 为了利用多核系统，用户有时会想要启动一个Node.js进程的集群来处理负载。 集群模块允许您轻松创建所有共享服务器端口的子进程。</p><h4 id="console"><a href="#console" class="headerlink" title="console"></a><strong>console</strong></h4><p><code>console</code> 模块提供了一个简单的调试控制台，类似于Web浏览器提供的JavaScript控制台机制。</p><h4 id="crypto-加密"><a href="#crypto-加密" class="headerlink" title="crypto(加密)"></a>crypto(加密)</h4><p><code>crypto</code>模块提供加密功能，其包括用于OpenSSL的哈希，HMAC，加密，解密，签名和验证功能的一组包装器。</p><h4 id="deprecated-apis"><a href="#deprecated-apis" class="headerlink" title="deprecated_apis"></a>deprecated_apis</h4><p>当以下情况之一时，Node.js可能会弃用API：（a）API的使用被认为是不安全的，（b）改进的替代API已经可用，或者（c）在将来的主要版本中预期会发生对API的更改。</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p><code>dns</code>模块包含属于两个不同类别的功能：</p><ol><li>使用底层操作系统设施执行名称解析的功能，并且不一定执行任何网络通信。 此类别只包含一个函数：<code>dns.lookup()</code>。</li><li>连接到实际DNS服务器以执行名称解析的功能，并且始终使用网络执行DNS查询。 此类别包含除<code>dns.lookup()</code>之外的<code>dns</code>模块中的所有功能。</li></ol><h4 id="domain-域"><a href="#domain-域" class="headerlink" title="domain(域)"></a>domain(域)</h4><p><strong>此模块正在等待弃用</strong>。一旦替换API已经完成，该模块将被完全弃用。大多数终端用户不应该使用这个模块。绝对必须具有域名功能的用户可能依赖于它，但应该期望在将来迁移到不同的解决方案。</p><h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a><a href="http://stackoverflow.com/documentation/node.js/1623/event-emitters" target="_blank" rel="external"><strong>Events</strong></a></h4><p>Node.js的核心API大部分是围绕一个惯用的异步事件驱动架构构建的，其中某些类型的对象（称为“发射器”）周期性地发出命名的事件，这些事件会引起Function对象（“监听器”）的调用。</p><h4 id="FS"><a href="#FS" class="headerlink" title="FS"></a>FS</h4><p>文件I / O由标准POSIX功能的简单包装器提供。要使用这个模块请<code>require(&#39;fs&#39;)</code>。所有的方法都有异步和同步的形式。</p><h4 id="http"><a href="#http" class="headerlink" title="http"></a><a href="http://stackoverflow.com/documentation/node.js/2973/http" target="_blank" rel="external"><strong>http</strong></a></h4><p>Node.js中的HTTP接口旨在支持传统上很难使用的协议的许多功能。特别地，大的，可能的块编码的消息。界面注意不要缓冲整个请求或响应 - 用户能够流式传输数据。</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>HTTPS是TLS / SSL上的HTTP协议。 在Node.js中，这是作为单独的模块实现的。</p><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>Node.js有一个简单的模块加载系统。 在Node.js中，文件和模块是一一对应的（每个文件被视为单独的模块）。</p><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><p><code>net</code>模块为您提供了一个异步网络包装器。 它包含用于创建服务器和客户端（称为流）的功能。 您可以将此模块与<code>require(&#39;net&#39;);</code>包含在一起。</p><h4 id="os"><a href="#os" class="headerlink" title="os"></a>os</h4><p><code>os</code>模块提供了许多与操作系统相关的实用方法。</p><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><p>路径模块提供用于处理文件和目录路径的实用程序。</p><h4 id="punycode"><a href="#punycode" class="headerlink" title="punycode"></a>punycode</h4><p><strong>Node.js中捆绑的punycode模块的版本已被弃用。</strong></p><h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h4><p><code>querystring</code>模块提供用于解析和格式化URL查询字符串的实用程序。</p><h4 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h4><p><code>readline</code>模块提供一个从Readable流读取数据的接口（如<code>process.stdin</code>），一行一行。</p><h4 id="repl"><a href="#repl" class="headerlink" title="repl"></a>repl</h4><p><code>repl</code>模块提供Read-Eval-Print-Loop（REPL）实现，该实现既可以作为独立程序使用，也可以包含在其他应用程序中。</p><h4 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h4><p><code>Stream</code>是用于在Node.js中处理流数据的抽象界面。 流模块提供了一个基本API，可以轻松构建实现流接口的对象。</p><p>Node.js提供了许多流对象。 例如，对HTTP服务器和<code>process.stdout</code>的请求都是流实例。</p><h4 id="string-decoder"><a href="#string-decoder" class="headerlink" title="string_decoder"></a>string_decoder</h4><p><code>string_decode</code>r模块提供了一种API，用于将<code>Buffer</code>对象解码为字符串，以保留编码的多字节UTF-8和UTF-16字符。</p><h4 id="timers"><a href="#timers" class="headerlink" title="timers"></a>timers</h4><p><code>timer</code> 模块暴露了一个全局API，用于在将来某个时间段调用的调度功能。 因为定时器功能是全局变量，所以不需要调用 <code>require(&#39;timers&#39;)</code>来使用API。</p><p>Node.js中的定时器功能实现与Web浏览器提供的timers API类似的API，但使用围绕 <a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick" target="_blank" rel="external">Node.js事件循环</a>构建的不同内部实现。</p><h4 id="tls-ssl"><a href="#tls-ssl" class="headerlink" title="tls_(ssl)"></a>tls_(ssl)</h4><p><code>tls</code>模块提供了构建在OpenSSL之上的传输层安全（TLS）和安全套接层（SSL）协议的实现。</p><h4 id="tracing"><a href="#tracing" class="headerlink" title="tracing"></a>tracing</h4><p>跟踪事件提供了一种机制，用于集中由V8，节点核心和用户空间代码生成的跟踪信息。</p><p>可以通过在启动Node.js应用程序时传递启用了<code>--trace-events-enabled</code>来启用跟踪。</p><h4 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h4><p><code>tty</code>模块提供了<code>tty.ReadStream</code>和<code>tty.WriteStream</code>类。 在大多数情况下，直接使用本模块是没有必要或可能的。</p><h4 id="dgram"><a href="#dgram" class="headerlink" title="dgram"></a>dgram</h4><p><code>dgram</code>模块提供UDP数据报套接字的实现。</p><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p><code>url</code>模块提供用于URL解析和解析的实用程序。</p><h4 id="util"><a href="#util" class="headerlink" title="util"></a>util</h4><p>util模块主要用于支持Node.js自己的内部API的需求。 然而，许多实用程序对于应用程序和模块开发人员也是有用的。</p><h4 id="v8"><a href="#v8" class="headerlink" title="v8"></a>v8</h4><p><code>v8</code>模块公开了特定于Node.js二进制内置的V8版本的API。</p><p>注意：API和实现可随时更改。</p><h4 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h4><p><code>vm</code>模块提供用于在V8虚拟机上下文中编译和运行代码的API。 JavaScript代码可以编译并立即运行或编译，保存并稍后运行。</p><p>注意：vm模块不是安全机制。 <strong>不要使用它来运行不受信任的代码。</strong></p><h4 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h4><p><code>zlib</code>模块提供使用Gzip和Deflate / Inflate实现的压缩功能。</p><h3 id="TLS-Socket：服务器和客户端"><a href="#TLS-Socket：服务器和客户端" class="headerlink" title="TLS Socket：服务器和客户端"></a>TLS Socket：服务器和客户端</h3><p>此与常规TCP连接之间的唯一主要区别是私钥和公共证书，您必须将其设置为选项对象。</p><h4 id="如何创建密钥和证书"><a href="#如何创建密钥和证书" class="headerlink" title="如何创建密钥和证书"></a>如何创建密钥和证书</h4><p>此安全过程的第一步是创建私钥。这个私钥是什么？基本上，它是用于加密信息的一组随机噪声。在理论上，你可以创建一个键，并使用它来加密任何你想要的。但最好的做法是为特定的东西使用不同的键。因为如果有人偷你的私钥，就像有人偷你的钥匙一样。想象一下，如果你使用相同的钥匙来锁定你的车，车库，办公室等</p><p><code>openssl genrsa -out private-key.pem 1024</code></p><p>一旦我们有了私钥，我们就可以创建一个CSR（证书签名请求），这是我们要求私人密钥由一个花哨的权威机构签署的。这就是为什么你必须输入与贵公司有关的信息。此信息将由签名机构查看，并用于验证您。在我们的情况下，您输入的内容并不重要，因为在下一步中，我们将自己签署证书。</p><p><code>openssl req -new -key private-key.pem -out csr.pem</code></p><p>现在我们已经填写了我们的文件，现在是假装我们是一个很酷的签名机构的时候了。</p><p><code>openssl x509 -req -in csr.pem -signkey private-key.pem -out public-cert.pem</code></p><p>现在您拥有私钥和公共证书，可以建立两个NodeJS应用之间的安全连接。 而且可以在示例代码中看到，这是一个非常简单的过程。</p><h4 id="重要！"><a href="#重要！" class="headerlink" title="重要！"></a>重要！</h4><p>由于我们自己创建了公开的证书，所以我们的证书是无价值的，因为我们是无私的。 NodeJS服务器默认不会信任这样的证书，这就是为什么我们需要告诉它实际上信任我们的证书，并使用以下选项rejectUnauthorized：false。 非常重要：在生产环境中，不要将此变量设置为true。</p><h4 id="TLS-Socket-Server"><a href="#TLS-Socket-Server" class="headerlink" title="TLS Socket Server"></a>TLS Socket Server</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> PORT = <span class="number">1337</span>;</div><div class="line"><span class="keyword">const</span> HOST = <span class="string">'127.0.0.1'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="attr">key</span>: fs.readFileSync(<span class="string">'private-key.pem'</span>),</div><div class="line">    <span class="attr">cert</span>: fs.readFileSync(<span class="string">'public-cert.pem'</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = tls.createServer(options, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Send a friendly message</span></div><div class="line">    socket.write(<span class="string">"I am the server sending you a message."</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Print the data that we received</span></div><div class="line">    socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Received: %s [it is %d bytes long]'</span>,</div><div class="line">            data.toString().replace(<span class="regexp">/(\n)/gm</span>,<span class="string">""</span>),</div><div class="line">            data.length);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// Let us know when the transmission is over</span></div><div class="line">    socket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'EOT (End Of Transmission)'</span>);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Start listening on a specific port and address</span></div><div class="line">server.listen(PORT, HOST, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm listening at %s, on port %s"</span>, HOST, PORT);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// When an error occurs, show it.</span></div><div class="line">server.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line"></div><div class="line">    <span class="comment">// Close the connection after the error occurred.</span></div><div class="line">    server.destroy();</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="TLS-Socket-Client"><a href="#TLS-Socket-Client" class="headerlink" title="TLS Socket Client"></a>TLS Socket Client</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> PORT = <span class="number">1337</span>;</div><div class="line"><span class="keyword">const</span> HOST = <span class="string">'127.0.0.1'</span></div><div class="line"></div><div class="line"><span class="comment">// Pass the certs to the server and let it know to process even unauthorized certs.</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="attr">key</span>: fs.readFileSync(<span class="string">'private-key.pem'</span>),</div><div class="line">    <span class="attr">cert</span>: fs.readFileSync(<span class="string">'public-cert.pem'</span>),</div><div class="line">    <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> client = tls.connect(PORT, HOST, options, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Check if the authorization worked</span></div><div class="line">    <span class="keyword">if</span> (client.authorized) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Connection authorized by a Certificate Authority."</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Connection not authorized: "</span> + client.authorizationError)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Send a friendly message</span></div><div class="line">    client.write(<span class="string">"I am the client sending you a message."</span>);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">client.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Received: %s [it is %d bytes long]'</span>,</div><div class="line">        data.toString().replace(<span class="regexp">/(\n)/gm</span>,<span class="string">""</span>),</div><div class="line">        data.length);</div><div class="line"></div><div class="line">    <span class="comment">// Close the connection after receiving the message</span></div><div class="line">    client.end();</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">client.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Connection closed"</span>);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// When an error ocoures, show it.</span></div><div class="line">client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line"></div><div class="line">    <span class="comment">// Close the connection after the error occurred.</span></div><div class="line">    client.destroy();</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hello-World-HTTP-server&quot;&gt;&lt;a href=&quot;#Hello-World-HTTP-server&quot; class=&quot;headerlink&quot; title=&quot;Hello World HTTP server&quot;&gt;&lt;/a&gt;Hello World HTTP server&lt;/h3&gt;&lt;p&gt;首先，为您的平台安装Node.js。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://kakajing.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://kakajing.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>显式的锁机制</title>
    <link href="http://kakajing.github.io/2017/04/10/%E6%98%BE%E5%BC%8F%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://kakajing.github.io/2017/04/10/显式的锁机制/</id>
    <published>2017-04-10T07:41:39.000Z</published>
    <updated>2017-04-10T13:39:13.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="与线程同步以及线程调度相关的方法"><a href="#与线程同步以及线程调度相关的方法" class="headerlink" title="与线程同步以及线程调度相关的方法"></a>与线程同步以及线程调度相关的方法</h3><a id="more"></a><p>­ <code>wait()</code>：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</p><p><code>sleep()</code>：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；</p><p><code>notify()</code>：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；</p><p><code>notityAll()</code>：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态； </p><blockquote><p>补充：Java 5通过Lock接口提供了显式的锁机制（explicit lock），增强了灵活性以及对线程的协调。Lock接口中定义了加锁（<code>lock()</code>）和解锁（<code>unlock()</code>）的方法，同时还提供了<code>newCondition()</code>方法来产生用于线程之间通信的Condition对象；此外，Java 5还提供了信号量机制（semaphore），信号量可以用来限制对某个共享资源进行访问的线程的数量。在对资源进行访问之前，线程必须得到信号量的许可（调用Semaphore对象的<code>acquire()</code>方法）；在完成对资源的访问后，线程必须向信号量归还许可（调用Semaphore对象的<code>release()</code>方法）。 </p></blockquote><h3 id="显示锁"><a href="#显示锁" class="headerlink" title="显示锁"></a>显示锁</h3><p>基于synchronized关键字的锁机制有以下问题：</p><ul><li>锁只有一种类型，而且对所有同步操作都是一样的作用</li><li>锁只能在代码块或方法开始的地方获得，在结束的地方释放</li><li>线程要么得到锁，要么阻塞，没有其他的可能性</li></ul><p>Java 5对锁机制进行了重构，提供了显示的锁，这样可以在以下几个方面提升锁机制：</p><ul><li>可以添加不同类型的锁，例如读取锁和写入锁</li><li>可以在一个方法中加锁，在另一个方法中解锁</li><li>可以使用tryLock方式尝试获得锁，如果得不到锁可以等待、回退或者干点别的事情，当然也可以在超时之后放弃操作</li></ul><p>显示的锁都实现了java.util.concurrent.Lock接口，主要有两个实现类：</p><ul><li>ReentrantLock - 比synchronized稍微灵活一些的重入锁</li><li>ReentrantReadWriteLock - 在读操作很多写操作很少时性能更好的一种重入锁</li></ul><p>只有一点需要提醒，解锁的方法unlock的调用最好能够在finally块中，因为这里是释放外部资源最好的地方，当然也是释放锁的最佳位置，因为不管正常异常可能都要释放掉锁来给其他线程以运行的机会。</p><h3 id="如何使用显示锁"><a href="#如何使用显示锁" class="headerlink" title="如何使用显示锁"></a>如何使用显示锁</h3><p>下面的例子演示了100个线程同时向一个银行账户中存入1元钱，在没有使用同步机制和使用同步机制情况下的执行情况。 </p><p><strong>银行账户类：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 银行账户</div><div class="line">* *</div><div class="line">/</div><div class="line">public class Account &#123;</div><div class="line">  private double balance; // 账户余额</div><div class="line">  /**</div><div class="line">  * 存款</div><div class="line">  * <span class="doctag">@param</span> money 存入金额</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> newBalance = balance + money;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    Thread.sleep(<span class="number">10</span>); <span class="comment">// 模拟此业务需要一段处理时间</span></div><div class="line">    &#125; <span class="keyword">catch</span>(InterruptedException ex) &#123;</div><div class="line">    ex.printStackTrace();</div><div class="line">    &#125; </div><div class="line">    balance = newBalance;</div><div class="line">  &#125; /</div><div class="line">  **</div><div class="line">  * 获得账户余额</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> balance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>存钱线程类：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 存钱线程</div><div class="line">**/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> Account account; <span class="comment">// 存入账户</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> money; <span class="comment">// 存入金额</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AddMoneyThread</span><span class="params">(Account account, <span class="keyword">double</span> money)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.account = account;</div><div class="line">    <span class="keyword">this</span>.money = money;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">  account.deposit(money);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>测试类：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Account account = <span class="keyword">new</span> Account();</div><div class="line">    ExecutorService service = Executors.newFixedThreadPool(<span class="number">100</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line">    service.execute(<span class="keyword">new</span> AddMoneyThread(account, <span class="number">1</span>));</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    service.shutdown();</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(!service.isTerminated()) &#123;&#125;</div><div class="line">    </div><div class="line">    System.out.println(<span class="string">"账户余额: "</span> + account.getBalance());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在没有同步的情况下，执行结果通常是显示账户余额在10元以下，出现这种状况的原因是，当一个线程A试图存入1元的时候，另外一个线程B也能够进入存款的方法中，线程B读取到的账户余额仍然是线程A存入1元钱之前的账户余额，因此也是在原来的余额0上面做了加1元的操作，同理线程C也会做类似的事情，所以最后100个线程执行结束 ，本来期望账户余额为100元，但实际得到的通常在10元以下（很可能是1元哦）。解决这个问题的办法就是同步，当一个线程对银行账户存钱时，需要将此账户锁定，待其操作完成后才允许其他的线程进行操作，代码有如下几种调整方案： </p><ul><li><p>在银行账户的存款（deposit）方法上同步（synchronized）关键字 </p><p>synchronized关键字可以将对象或者方法标记为同步，以实现对对象和方法的互斥访问，可以用<br>synchronized(对象) { … }定义同步代码块，或者在声明方法时将synchronized作为方法的修饰符。 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 银行账户</div><div class="line">* */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> balance; <span class="comment">// 账户余额</span></div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 存款</div><div class="line">  * <span class="doctag">@param</span> money 存入金额</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> newBalance = balance + money;</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    Thread.sleep(<span class="number">10</span>); <span class="comment">// 模拟此业务需要一段处理时间</span></div><div class="line">    &#125; <span class="keyword">catch</span>(InterruptedException ex) &#123;</div><div class="line">    ex.printStackTrace();</div><div class="line">    &#125; </div><div class="line">    balance = newBalance;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 获得账户余额</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> balance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在线程调用存款方法时对银行账户进行同步 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 存钱线程</div><div class="line">* </div><div class="line">* */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> Account account; <span class="comment">// 存入账户</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> money; <span class="comment">// 存入金额</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AddMoneyThread</span><span class="params">(Account account, <span class="keyword">double</span> money)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.account = account;</div><div class="line">    <span class="keyword">this</span>.money = money;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (account) &#123;</div><div class="line">      account.deposit(money);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过Java 5显式的锁机制，为每个银行账户创建一个锁对象，在存款操作进行加锁和解锁的操作 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 银行账户</div><div class="line">**/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> Lock accountLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> balance; <span class="comment">// 账户余额</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 存款</div><div class="line">  * <span class="doctag">@param</span> money</div><div class="line">  * 存入金额</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</div><div class="line">    </div><div class="line">    accountLock.lock();</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">double</span> newBalance = balance + money;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">      Thread.sleep(<span class="number">10</span>); <span class="comment">// 模拟此业务需要一段处理时间</span></div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">      ex.printStackTrace();</div><div class="line">      &#125; </div><div class="line">        balance = newBalance;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    accountLock.unlock();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 获得账户余额</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> balance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>按照上述三种方式对代码进行修改后，重写执行测试代码Test01，将看到最终的账户余额为100元。当然也可以使<br>用Semaphore或CountdownLatch来实现同步。 </p><h3 id="编写多线程程序的几种实现方式"><a href="#编写多线程程序的几种实现方式" class="headerlink" title="编写多线程程序的几种实现方式"></a>编写多线程程序的几种实现方式</h3><p>Java 5以前实现多线程有两种实现方法：一种是继承Thread类；另一种是实现Runnable接口。两种方式都要通过重写run()方法来定义线程的行为，推荐使用后者，因为Java中的继承是单继承，一个类有一个父类，如果继承了Thread类就无法再继承其他类了，显然使用Runnable接口更为灵活。 </p><blockquote><p>补充：Java 5以后创建线程还有第三种方式：实现Callable接口，该接口中的call方法可以在线程执行结束时<br>产生一个返回值，代码如下所示： </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> upperBounds;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> upperBounds)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.upperBounds = upperBounds;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= upperBounds; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">  &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    </div><div class="line">    List&lt;Future&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">      list.add(service.submit(<span class="keyword">new</span> MyTask((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>))));</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(Future&lt;Integer&gt; future : list) &#123;</div><div class="line">      <span class="comment">// while(!future.isDone()) ;</span></div><div class="line">      sum += future.get();</div><div class="line">    &#125; </div><div class="line">    System.out.println(sum);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;与线程同步以及线程调度相关的方法&quot;&gt;&lt;a href=&quot;#与线程同步以及线程调度相关的方法&quot; class=&quot;headerlink&quot; title=&quot;与线程同步以及线程调度相关的方法&quot;&gt;&lt;/a&gt;与线程同步以及线程调度相关的方法&lt;/h3&gt;
    
    </summary>
    
      <category term="多线程" scheme="http://kakajing.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://kakajing.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Netty实现WebSocket聊天功能</title>
    <link href="http://kakajing.github.io/2017/04/04/Netty%E5%AE%9E%E7%8E%B0WebSocket%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/"/>
    <id>http://kakajing.github.io/2017/04/04/Netty实现WebSocket聊天功能/</id>
    <published>2017-04-03T16:42:30.000Z</published>
    <updated>2017-04-05T13:47:22.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><a id="more"></a><p>WebSocket 通过“Upgrade handshake（升级握手）”从标准的 HTTP 或HTTPS 协议转为 WebSocket。因此，使用 WebSocket 的应用程序将始终以 HTTP/S 开始，然后进行升级。在什么时候发生这种情况取决于具体的应用;它可以是在启动时，或当一个特定的 URL 被请求时。</p><p>在我们的应用中，当 URL 请求以“/ws”结束时，我们才升级协议为WebSocket。否则，服务器将使用基本的HTTP/S。一旦升级连接将使用的WebSocket 传输所有数据。</p><p>整个服务器逻辑如下： </p><p> <img src="http://omux103p0.bkt.clouddn.com/sp170404_231503.png" alt="sp170404_231503"></p><ol><li>客户端/用户连接到服务器并加入聊天</li><li>HTTP 请求页面或 WebSocket 升级握手</li><li>服务器处理所有客户端/用户</li><li>响应 URI “/”的请求，转到默认 html 页面</li><li>如果访问的是 URI“/ws” ，处理 WebSocket 升级握手</li><li>升级握手完成后 ，通过 WebSocket 发送聊天消息 </li></ol><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>让我们从处理 HTTP 请求的实现开始。 </p><h4 id="处理-HTTP-请求"><a href="#处理-HTTP-请求" class="headerlink" title="处理 HTTP 请求"></a>处理 HTTP 请求</h4><h5 id="HttpRequestHandler-java"><a href="#HttpRequestHandler-java" class="headerlink" title="HttpRequestHandler.java"></a><code>HttpRequestHandler.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.netty.demo.websocketchat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.*;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.http.*;</div><div class="line"><span class="keyword">import</span> io.netty.handler.ssl.SslHandler;</div><div class="line"><span class="keyword">import</span> io.netty.handler.stream.ChunkedNioFile;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理 Http 请求</div><div class="line"> *</div><div class="line"> * Author 卡卡</div><div class="line"> * Created by jing on 2017/4/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">FullHttpRequest</span>&gt; </span>&#123;  <span class="comment">//1</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String wsUri;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File INDEX;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        URL location = HttpRequestHandler.class.getProtectionDomain().getCodeSource().getLocation();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String path = location.toURI() + <span class="string">"WebsocketChatCLient.html"</span>;</div><div class="line">            path = !path.contains(<span class="string">"file:"</span>) ? path : path.substring(<span class="number">5</span>);</div><div class="line">            INDEX = <span class="keyword">new</span> File(path);</div><div class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unable to locate WebsocketChatClient.html"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpRequestHandler</span><span class="params">(String wsUri)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.wsUri = wsUri;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, FullHttpRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (wsUri.equalsIgnoreCase(request.getUri()))&#123;</div><div class="line">            ctx.fireChannelRead(request.retain());  <span class="comment">//2</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (HttpHeaders.is100ContinueExpected(request))&#123;</div><div class="line">                send100Continue(ctx);   <span class="comment">//3</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//4 读取默认的 WebsocketChatClient.html 页面</span></div><div class="line">            RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(INDEX, <span class="string">"r"</span>);</div><div class="line"></div><div class="line">            HttpResponse response = <span class="keyword">new</span> DefaultHttpResponse(request.getProtocolVersion(), HttpResponseStatus.OK);</div><div class="line">            response.headers().set(HttpHeaders.Names.CONTENT_TYPE, <span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> keepAlive = HttpHeaders.isKeepAlive(request);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (keepAlive)&#123;  <span class="comment">//5</span></div><div class="line">                response.headers().set(HttpHeaders.Names.CONTENT_LENGTH, file.length());</div><div class="line">                response.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.KEEP_ALIVE);</div><div class="line">            &#125;</div><div class="line">            ctx.write(response);   <span class="comment">//6</span></div><div class="line">           </div><div class="line">            <span class="keyword">if</span> (ctx.pipeline().get(SslHandler.class) == <span class="keyword">null</span>)&#123;  <span class="comment">//7 </span></div><div class="line">                ctx.write(<span class="keyword">new</span> DefaultFileRegion(file.getChannel(), <span class="number">0</span>, file.length()));</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                ctx.write(<span class="keyword">new</span> ChunkedNioFile(file.getChannel()));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//8 写并刷新 LastHttpContent 到客户端，标记响应完成</span></div><div class="line">            ChannelFuture future = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);</div><div class="line">            <span class="keyword">if</span> (!keepAlive)&#123;</div><div class="line">                future.addListener(ChannelFutureListener.CLOSE);   <span class="comment">//9</span></div><div class="line">            &#125;</div><div class="line">            file.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send100Continue</span><span class="params">(ChannelHandlerContext ctx)</span></span>&#123;</div><div class="line">        FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE);</div><div class="line">        ctx.writeAndFlush(response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Channel channel = ctx.channel();</div><div class="line">        System.out.println(<span class="string">"Client: "</span> + channel.remoteAddress() + <span class="string">"异常"</span>);</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>扩展 <code>SimpleChannelInboundHandler</code> 用于处理 <code>FullHttpRequest</code>信息</li><li>如果请求是 WebSocket 升级，递增引用计数器（保留）并且将它传递给在 <code>ChannelPipeline</code> 中的下个 <code>ChannelInboundHandler</code></li><li>处理符合`` HTTP 1.1的 “100 Continue” 请求</li><li>读取默认的 WebsocketChatClient.html 页面</li><li>判断 <code>keepalive</code> 是否在请求头里面</li><li>写 <code>HttpResponse</code> 到客户端 </li><li>写 index.html 到客户端，判断 <code>SslHandler</code> 是否在 <code>ChannelPipeline</code> 来决定是使用 <code>DefaultFileRegion</code> 还是<code>ChunkedNioFile</code></li><li>写并刷新 <code>LastHttpContent</code> 到客户端，标记响应完成</li><li>如果 <code>keepalive</code> 没有要求，当写完成时，关闭 <code>Channel</code> </li></ol><p>HttpRequestHandler 做了下面几件事： </p><ul><li><p>如果该 HTTP 请求被发送到URI “/ws”，调用 <code>FullHttpRequest</code> 上的 <code>retain()</code>，并通过调用 <code>fireChannelRead(msg)</code> 转发到下一个 <code>ChannelInboundHandler</code>。<code>retain()</code> 是必要的，因为 <code>channelRead()</code> 完成后，它会调用 <code>FullHttpRequest</code> 上的 <code>release()</code> 来释放其资源。</p></li><li><p>如果客户端发送的 HTTP 1.1 头是“Expect: 100-continue” ，将发送“100 Continue”的响应。</p></li><li><p>在 头被设置后，写一个 <code>HttpResponse</code> 返回给客户端。注意，这是不是 <code>FullHttpResponse</code>，唯一的反应的第一部分。此外，我们不使用 <code>writeAndFlush()</code> 在这里 - 这个是在最后完成。</p></li><li><p>如果没有加密也不压缩，要达到最大的效率可以是通过存储 index.html 的内容在一个 <code>DefaultFileRegion</code>实现。这将利用零拷贝来执行传输。出于这个原因，我们检查，看看是否有一个 <code>SslHandler</code> 在 <code>ChannelPipeline</code> 中。另外，我们使用 ChunkedNioFile。</p></li><li><p>写 <code>LastHttpContent</code> 来标记响应的结束，并终止它</p></li><li><p>如果不要求 <code>keepalive</code> ，添加 ChannelFutureListener 到 <code>ChannelFuture</code> 对象的最后写入，并关闭连接。注意，这里我们调用 <code>writeAndFlush()</code> 来刷新所有以前写的信息。 </p><p>​</p></li></ul><h4 id="处理-WebSocket-frame"><a href="#处理-WebSocket-frame" class="headerlink" title="处理 WebSocket frame"></a>处理 WebSocket frame</h4><p>WebSockets 在“帧”里面来发送数据，其中每一个都代表了一个消息的一部分。一个完整的消息可以利用了多<br>个帧。 WebSocket “Request for Comments” (RFC) 定义了六中不同的 frame; Netty 给他们每个都提供了一<br>个 POJO 实现 ，而我们的程序只需要使用下面4个帧类型： </p><ul><li>CloseWebSocketFrame</li><li>PingWebSocketFrame</li><li>PongWebSocketFrame</li><li>TextWebSocketFrame </li></ul><p>在这里我们只需要显示处理 TextWebSocketFrame，其他的会由 WebSocketServerProtocolHandler 自动处理 </p><p>下面代码展示了 ChannelInboundHandler 处理 TextWebSocketFrame，同时也将跟踪在 ChannelGroup中所有活动的 WebSocket 连接 </p><h5 id="TextWebSocketFrameHandler-java"><a href="#TextWebSocketFrameHandler-java" class="headerlink" title="TextWebSocketFrameHandler.java"></a><code>TextWebSocketFrameHandler.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.netty.demo.websocketchat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.Channel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</div><div class="line"><span class="keyword">import</span> io.netty.channel.group.ChannelGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.group.DefaultChannelGroup;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;</div><div class="line"><span class="keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理TextWebSocketFrame</div><div class="line"> *</div><div class="line"> * Author 卡卡</div><div class="line"> * Created by jing on 2017/4/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;  <span class="comment">//1</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChannelGroup channels = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//4</span></div><div class="line">        Channel incoming = ctx.channel();</div><div class="line">        <span class="keyword">for</span> (Channel channel : channels) &#123;</div><div class="line">            <span class="keyword">if</span> (channel != incoming)&#123;</div><div class="line">                channel.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">"["</span> + incoming.remoteAddress() + <span class="string">"]"</span> + msg.text()));</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                channel.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">"[you]"</span> + msg.text()));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//2</span></div><div class="line">        Channel incoming = ctx.channel();</div><div class="line"></div><div class="line">        <span class="comment">//将消息广播到多个Channels</span></div><div class="line">        channels.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">"[SERVER] - "</span> + incoming.remoteAddress() + <span class="string">"加入"</span>));</div><div class="line"></div><div class="line">        channels.add(incoming);</div><div class="line">        System.out.println(<span class="string">"Client: "</span> + incoming.remoteAddress() + <span class="string">"加入"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//3</span></div><div class="line">        Channel incoming = ctx.channel();</div><div class="line"></div><div class="line">        channels.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">"[SERVER] - "</span> + incoming.remoteAddress() + <span class="string">"离开"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Client: "</span> + incoming.remoteAddress() + <span class="string">"离开"</span>);</div><div class="line">        channels.remove(ctx.channel());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//5</span></div><div class="line">        Channel incoming = ctx.channel();</div><div class="line">        System.out.println(<span class="string">"Client: "</span> + incoming.remoteAddress() + <span class="string">"在线"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//6</span></div><div class="line">        Channel incoming = ctx.channel();</div><div class="line">        System.out.println(<span class="string">"Client: "</span> + incoming.remoteAddress() + <span class="string">"掉线"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//7</span></div><div class="line">        Channel incoming = ctx.channel();</div><div class="line">        System.out.println(<span class="string">"Client: "</span> + incoming.remoteAddress() + <span class="string">"异常"</span>);</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><code>TextWebSocketFrameHandler</code> 继承自 <code>SimpleChannelInboundHandler</code>，这个类实现了<code>ChannelInboundHandler</code>接口，<code>ChannelInboundHandler</code> 提供了许多事件处理的接口方法，然后你可以覆盖这些方法。现在仅仅只需要继承 <code>SimpleChannelInboundHandler</code> 类而不是你自己去实现接口方法。</li><li>覆盖了 <code>handlerAdded()</code> 事件处理方法。每当从服务端收到新的客户端连接时，客户端的 Channel 存入ChannelGroup列表中，并通知列表中的其他客户端 Channel</li><li>覆盖了 <code>handlerRemoved()</code> 事件处理方法。每当从服务端收到客户端断开时，客户端的 Channel 移除 ChannelGroup 列表中，并通知列表中的其他客户端 Channel</li><li>覆盖了 <code>channelRead0()</code> 事件处理方法。每当从服务端读到客户端写入信息时，将信息转发给其他客户端的 Channel。其中如果你使用的是 Netty 5.x 版本时，需要把 <code>channelRead0()</code> 重命名为<code>messageReceived()</code></li><li>覆盖了 <code>channelActive()</code> 事件处理方法。服务端监听到客户端活动</li><li>覆盖了 <code>channelInactive()</code> 事件处理方法。服务端监听到客户端不活动</li><li><code>exceptionCaught()</code> 事件处理方法是当出现 Throwable 对象才会被调用，即当 Netty 由于 IO 错误或者处理器在处理事件时抛出的异常时。在大部分情况下，捕获的异常应该被记录下来并且把关联的 channel 给关闭掉。然而这个方法的处理方式会在遇到不同异常的情况下有不同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。 </li></ol><p>上面显示了 TextWebSocketFrameHandler 仅作了几件事： </p><ul><li>当WebSocket 与新客户端已成功握手完成，通过写入信息到 ChannelGroup 中的 Channel 来通知所有连接的客户端，然后添加新 Channel 到 ChannelGroup</li><li>如果接收到 TextWebSocketFrame，调用 <code>retain()</code> ，并将其写、刷新到 ChannelGroup，使所有连接的WebSocket Channel 都能接收到它。和以前一样，retain() 是必需的，因为当 <code>channelRead0()</code>返回时，TextWebSocketFrame 的引用计数将递减。由于所有操作都是异步的，<code>writeAndFlush()</code> 可能会在以后完成，我们不希望它来访问无效的引用 </li></ul><p>由于 Netty 处理了其余大部分功能，唯一剩下的我们现在要做的是初始化 ChannelPipeline 给每一个创建的新的Channel 。做到这一点，我们需要一个ChannelInitializer </p><h5 id="WebsocketChatServerInitializer-java"><a href="#WebsocketChatServerInitializer-java" class="headerlink" title="WebsocketChatServerInitializer.java"></a><code>WebsocketChatServerInitializer.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.netty.demo.websocketchat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</div><div class="line"><span class="keyword">import</span> io.netty.handler.stream.ChunkedWriteHandler;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 服务端 ChannelInitializer</div><div class="line"> *</div><div class="line"> * Author 卡卡</div><div class="line"> * Created by jing on 2017/4/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketChatServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;  <span class="comment">//1</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;   <span class="comment">//2</span></div><div class="line">        ChannelPipeline pipeline = channel.pipeline();</div><div class="line">        pipeline.addLast(<span class="keyword">new</span> HttpServerCodec())</div><div class="line">                .addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">64</span> * <span class="number">1024</span>))</div><div class="line">                .addLast(<span class="keyword">new</span> ChunkedWriteHandler())</div><div class="line">                .addLast(<span class="keyword">new</span> HttpRequestHandler(<span class="string">"/ws"</span>))</div><div class="line">                .addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws"</span>))</div><div class="line">                .addLast(<span class="keyword">new</span> TextWebSocketFrameHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>扩展 ChannelInitializer</li><li>添加 ChannelHandler到<code>ChannelPipeline.initChannel()</code> 方法设置 ChannelPipeline 中所有新注册的 Channel,安装所有需要的ChannelHandler。 </li></ol><h5 id="WebsocketChatServer-java"><a href="#WebsocketChatServer-java" class="headerlink" title="WebsocketChatServer.java"></a><code>WebsocketChatServer.java</code></h5><p>编写一个 <code>main()</code> 方法来启动服务端。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.netty.demo.websocketchat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</div><div class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author 卡卡</div><div class="line"> * Created by jing on 2017/4/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketChatServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebsocketChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();  <span class="comment">//1</span></div><div class="line">        EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();  <span class="comment">//2</span></div><div class="line">            bootstrap.group(bossGroup, workGroup)</div><div class="line">                    .channel(NioServerSocketChannel.class)  <span class="comment">//3</span></div><div class="line">                    .childHandler(<span class="keyword">new</span> WebsocketChatServerInitializer())  <span class="comment">//4</span></div><div class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)              <span class="comment">//5</span></div><div class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);    <span class="comment">//6</span></div><div class="line"></div><div class="line">            System.out.println(<span class="string">"WebsocketChatServer启动了"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 绑定端口，开始接收进来的连接</span></div><div class="line">            ChannelFuture future = bootstrap.bind(port).sync();    <span class="comment">//7</span></div><div class="line">            <span class="comment">// 等待服务器 socket 关闭 。</span></div><div class="line">            <span class="comment">// 在这个例子中，这不会发生，但你可以优雅地关闭你的服务器</span></div><div class="line">            future.channel().closeFuture().sync();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            workGroup.shutdownGracefully();</div><div class="line">            bossGroup.shutdownGracefully();</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"WebsocketChatServer关闭了"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> port;</div><div class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            port = <span class="number">8080</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">new</span> WebsocketChatServer(port).run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>NioEventLoopGroup是用来处理I/O操作的多线程事件循环器，Netty 提供了许多不同的EventLoopGroup的实现用来处理不同的传输。在这个例子中我们实现了一个服务端的应用，因此会有2个 NioEventLoopGroup 会被使用。第一个经常被叫做‘boss’，用来接收进来的连接。第二个经常被叫做‘worker’，用来处理已经被接收的连接，一旦‘boss’接收到连接，就会把连接信息注册到‘worker’上。如何知道多少个线程已经被使用，如何映射到已经创建的 Channel上都需要依赖于 EventLoopGroup 的实现，并且可以通过构造函数来配置他们的关系。</li><li>ServerBootstrap是一个启动 NIO 服务的辅助启动类。你可以在这个服务中直接使用 Channel，但是这会是一个复杂的处理过程，在很多情况下你并不需要这样做。</li><li>这里我们指定使用NioServerSocketChannel类来举例说明一个新的 Channel 如何接收进来的连接。</li><li>这里的事件处理类经常会被用来处理一个最近的已经接收的 Channel。SimpleChatServerInitializer 继承自ChannelInitializer是一个特殊的处理类，他的目的是帮助使用者配置一个新的 Channel。也许你想通过增加一些处理类比如 SimpleChatServerHandler 来配置一个新的 Channel 或者其对应的ChannelPipeline来实现你的网络程序。当你的程序变的复杂时，可能你会增加更多的处理类到 pipline 上，然后提取这些匿名类到最顶层的类上。</li><li>你可以设置这里指定的 Channel 实现的配置参数。我们正在写一个TCP/IP 的服务端，因此我们被允许设置 socket 的参数选项比如<code>tcpNoDelay</code> 和 <code>keepAlive</code>。请参考ChannelOption和详细的ChannelConfig实现的接口文档以此可以对ChannelOption 的有一个大概的认识。</li><li>option() 是提供给NioServerSocketChannel用来接收进来的连接。<code>childOption()</code> 是提供给由父管道ServerChannel接收到的连接，在这个例子中也是 NioServerSocketChannel。</li><li>我们继续，剩下的就是绑定端口然后启动服务。这里我们在机器上绑定了机器所有网卡上的 8080 端口。当然现在你可以多次调用 <code>bind()</code> 方法(基于不同绑定地址)。</li></ol><p>恭喜！你已经完成了基于 Netty 聊天服务端程序。 </p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>在程序的 resources 目录下，我们创建一个 WebsocketChatClient.html 页面来作为客户端 </p><h4 id="WebsocketChatClient-html"><a href="#WebsocketChatClient-html" class="headerlink" title="WebsocketChatClient.html"></a><code>WebsocketChatClient.html</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocketChat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> socket;</div><div class="line">        <span class="keyword">if</span> (!<span class="built_in">window</span>.WebSocket)&#123;</div><div class="line">            <span class="built_in">window</span>.WebSocket = <span class="built_in">window</span>.MozWebSocket;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.WebSocket)&#123;</div><div class="line">            socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/ws"</span>);</div><div class="line">            socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> ta = <span class="built_in">document</span>.getElementById(<span class="string">'responseText'</span>);</div><div class="line">                ta.value = ta.value + <span class="string">'\n'</span> + event.data</div><div class="line">            &#125;;</div><div class="line">            socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> ta = <span class="built_in">document</span>.getElementById(<span class="string">'responseText'</span>);</div><div class="line">                ta.value = <span class="string">"连接开启!"</span>;</div><div class="line">            &#125;;</div><div class="line">            socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> ta = <span class="built_in">document</span>.getElementById(<span class="string">'responseText'</span>);</div><div class="line">                ta.value = ta.value + <span class="string">"连接被关闭"</span>;</div><div class="line">            &#125;;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"你的浏览器不支持 WebSocket！"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!<span class="built_in">window</span>.WebSocket)&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN)&#123;</div><div class="line">                socket.send(message);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                alert(<span class="string">"连接没有开启。"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>WebSocket 聊天室：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"responseText"</span> <span class="attr">style</span>=<span class="string">"width: 500px; height: 300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span> <span class="attr">value</span>=<span class="string">"Webcome to www.waylau.com"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"发送消息"</span> <span class="attr">onclick</span>=<span class="string">"send(this.form.message.value)"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"javascript:document.getElementById('responseText').value=''"</span> <span class="attr">value</span>=<span class="string">"清空聊天记录"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://waylau.com/"</span> &gt;</span>更多例子请访问  waylau.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>逻辑比较简单，不累述。 </p><p>先运行 WebsocketChatServer，再打开多个浏览器页面实现多个 客户端访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> </p><p> <img src="http://omux103p0.bkt.clouddn.com/sp170404_225746.png" alt="sp170404_225746"></p><p>查看源码：</p><p><a href="https://github.com/kakajing/netty4-demos/tree/master/src/main/java/com/netty/demo/websocketchat" target="_blank" rel="external">https://github.com/kakajing/netty4-demos/tree/master/src/main/java/com/netty/demo/websocketchat</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h3&gt;
    
    </summary>
    
      <category term="Netty" scheme="http://kakajing.github.io/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://kakajing.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL锁的用法</title>
    <link href="http://kakajing.github.io/2017/04/01/MYSQL%E9%94%81%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://kakajing.github.io/2017/04/01/MYSQL锁的用法/</id>
    <published>2017-04-01T12:54:33.000Z</published>
    <updated>2017-04-05T13:47:43.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>表级锁可以作为<code>ENGINE = MyISAM</code>的重要工具，但对于<code>ENGINE = InnoDB</code>很少有用。 如果您试图用InnoDB使用表级锁，您应该重新思考如何处理事务。</p><a id="more"></a><p>MySQL允许客户端会话明确地获取表级锁，以便与其他会话进行协作以访问表，或者阻止其他会话在会话需要独占访问期间修改表。 会话只能为自己获取或释放锁。 一个会话无法获取另一个会话的锁或释放由另一个会话持有的锁。</p><p>可以使用锁来模拟事务，或者在更新表时获得更多的速度。 这将在本节后面更详细地解释。</p><p>命令：<code>LOCK TABLES table_name READ|WRITE;</code></p><p>你只能将锁类型分配给单个表;</p><p>示例（READ LOCK）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LOCK TABLES table_name READ;</div></pre></td></tr></table></figure><p>示例 (WRITE LOCK):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LOCK TABLES table_name WRITE;</div></pre></td></tr></table></figure><p>要看到锁是否被应用，请使用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW OPEN TABLES;</div></pre></td></tr></table></figure><p>要刷新/删除所有锁，请使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UNLOCK TABLES;</div></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LOCK TABLES products WRITE:  </div><div class="line">INSERT INTO products(id,product_name) SELECT id,old_product_name FROM old_products;</div><div class="line">UNLOCK TABLES;</div></pre></td></tr></table></figure><p>以上示例任何外部连接都无法将任何数据写入products表，直到解锁表products</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LOCK TABLES products READ:  </div><div class="line">INSERT INTO products(id,product_name) SELECT id,old_product_name FROM old_products;</div><div class="line">UNLOCK TABLES;</div></pre></td></tr></table></figure><p>以上示例任何外部连接都无法从products表中读取任何数据，直到解锁表products</p><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>如果表使用InnoDB，MySQL会自动使用行级锁定，以便多个事务可以同时使用同一个表进行读取和写入，而不会使对方等待。</p><p>如果两个事务尝试修改同一行，并且都使用行级别锁定，其中一个事务将等待其他事务完成。</p><p>对于预期要修改的每行，可以通过使用<code>SELECT ... FOR UPDATE</code>语句获得行级别锁定。</p><p>考虑两个连接来详细说明行级锁定</p><p>连接1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">START TRANSACTION;</div><div class="line">SELECT ledgerAmount FROM accDetails WHERE id = 1 FOR UPDATE;</div></pre></td></tr></table></figure><p>在连接1中，通过<code>SELECT ... FOR UPDATE</code>语句获取行级锁。</p><p>连接2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE accDetails SET ledgerAmount = ledgerAmount + 500 WHERE id=1;</div></pre></td></tr></table></figure><p>当有人尝试更新连接2中的同一行时，将等待连接1完成事务，否则将根据<code>innodb_lock_wait_timeout</code>设置显示错误消息，默认值为50秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error Code: 1205. Lock wait timeout exceeded; try restarting transaction</div></pre></td></tr></table></figure><p>要查看有关此锁的详细信息，请运行<code>SHOW ENGINE INNODB STATUS</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---TRANSACTION 1973004, ACTIVE 7 sec updating</div><div class="line">mysql tables in use 1, locked 1</div><div class="line">LOCK WAIT 2 lock struct(s), heap size 360, 1 row lock(s)</div><div class="line">MySQL thread id 4, OS thread handle 0x7f996beac700, query id 30 localhost root update</div><div class="line">UPDATE accDetails SET ledgerAmount = ledgerAmount + 500 WHERE id=1</div><div class="line">------- TRX HAS BEEN WAITING 7 SEC FOR THIS LOCK TO BE GRANTED:</div></pre></td></tr></table></figure><p>连接2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UPDATE accDetails SET ledgerAmount = ledgerAmount + 250 WHERE id=2;</div><div class="line">1 row(s) affected</div></pre></td></tr></table></figure><p>但是，更新连接2中的其他一行将被执行而没有任何错误。</p><p>连接1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UPDATE accDetails SET ledgerAmount = ledgerAmount + 750 WHERE id=1;</div><div class="line">COMMIT;</div><div class="line">1 row(s) affected</div></pre></td></tr></table></figure><p>现在行锁被释放，因为在连接1中提交事务。<br>连接2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UPDATE accDetails SET ledgerAmount = ledgerAmount + 500 WHERE id=1;</div><div class="line">1 row(s) affected</div></pre></td></tr></table></figure><p>通过完成事务，连接1释放行锁之后，更新在连接2中执行，没有任何错误。</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>锁定用于解决并发问题。仅在运行事务时才需要锁定，首先从数据库读取值，然后将该值写入数据库。 自包含的插入，更新或删除操作不需要锁定。</p><p>有两种可用的锁</p><p><code>READ LOCK</code> - 用户只读表时。</p><p><code>WRITE LOCK</code> - 当用户正在读取和写入表格时。</p><p>当用户在表上持有<code>WRITE LOCK</code>时，没有其他用户可以读取或写入该表。 当用户在表上持有<code>READ LOCK</code>时，其他用户也可以读取或保持<code>READ LOCK</code>，但是没有用户可以在该表上写入或保持<code>WRITE LOCK</code>。</p><p>如果默认存储引擎是InnoDB，MySQL会自动使用行级锁定，以便多个事务可以同时使用同一个表进行读取和写入，而不会使对方等待。</p><p>对于InnoDB以外的所有存储引擎，MySQL使用表锁定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;表级锁&quot;&gt;&lt;a href=&quot;#表级锁&quot; class=&quot;headerlink&quot; title=&quot;表级锁&quot;&gt;&lt;/a&gt;表级锁&lt;/h3&gt;&lt;p&gt;表级锁可以作为&lt;code&gt;ENGINE = MyISAM&lt;/code&gt;的重要工具，但对于&lt;code&gt;ENGINE = InnoDB&lt;/code&gt;很少有用。 如果您试图用InnoDB使用表级锁，您应该重新思考如何处理事务。&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://kakajing.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://kakajing.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>对Netty加密和HTTP HTTPS应用</title>
    <link href="http://kakajing.github.io/2017/03/08/%E5%AF%B9Netty%E5%8A%A0%E5%AF%86%E5%92%8CHTTP-HTTPS%E5%BA%94%E7%94%A8/"/>
    <id>http://kakajing.github.io/2017/03/08/对Netty加密和HTTP-HTTPS应用/</id>
    <published>2017-03-08T13:36:03.000Z</published>
    <updated>2017-03-15T14:20:14.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-SSL-TLS-加密-Netty-程序"><a href="#使用-SSL-TLS-加密-Netty-程序" class="headerlink" title="使用 SSL/TLS 加密 Netty 程序"></a>使用 <strong>SSL/TLS </strong>加密 <strong>Netty </strong>程序</h3><a id="more"></a><p>今天数据隐私是一个十分关注的问题,作为开发人员,我们需要准备好解决这个问题。至少我们需要熟悉加密协议 SSL 和 TLS 等之上的其他协议实现数据安全。作为一个 HTTPS 网站的用户,你是安全。当然,这些协议是广泛不基于 http 的应用程序,例如安全SMTP(SMTPS)邮件服务,甚至关系数据库系统。</p><p>为了支持 SSL/TLS,Java 提供了 javax.net.ssl API 的类SslContext 和 SslEngine 使它相对简单的实现解密和加密。Netty 的利用该 API 命名 SslHandler 的 ChannelHandler 实现, 有一个内部 SslEngine 做实际的工作。</p><p>图1显示了一个使用 SslHandler 数据流图。</p><p> <img src="http://omux103p0.bkt.clouddn.com/15.png" alt="15"></p><ol><li>加密的入站数据被 SslHandler 拦截，并被解密</li><li>前面加密的数据被 SslHandler 解密</li><li>平常数据传过 SslHandler</li><li>SslHandler 加密数据并它传递出站</li></ol><p>代码<strong>2.0</strong>所示一个 SslHandler 使用 ChannelInitializer 添加到 ChannelPipeline。(回想一下,<br>当 Channel 注册时 ChannelInitializer 用于设置 ChannelPipeline 。)</p><p>代码<strong>2.0</strong> Add SSL/TLS support</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SslChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SslContext context;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> startTls;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SslChannelInitializer</span><span class="params">(SslContext context, <span class="keyword">boolean</span> client, <span class="keyword">boolean</span> startTls)</span> </span>&#123; <span class="comment">//1</span></div><div class="line">    <span class="keyword">this</span>.context = context;</div><div class="line">    <span class="keyword">this</span>.startTls = startTls;</div><div class="line">  &#125; </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    SSLEngine engine = context.newEngine(ch.alloc()); <span class="comment">//2</span></div><div class="line">    engine.setUseClientMode(client); <span class="comment">//3</span></div><div class="line">    ch.pipeline().addFirst(<span class="string">"ssl"</span>, <span class="keyword">new</span> SslHandler(engine, startTls)); <span class="comment">//4</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>使用构造函数来传递 SSLContext 用于使用(startTls 是否启用)</li><li>从 SslContext 获得一个新的 SslEngine 。给每个 SslHandler 实例使用一个新的SslEngine</li><li>设置 SslEngine 是 client 或者是 server 模式</li><li>添加 SslHandler 到 pipeline 作为第一个处理器</li></ol><p>在大多数情况下,SslHandler 将成为 ChannelPipeline 中的第一个 ChannelHandler 。这将确保所有其他 ChannelHandler 应用他们的逻辑到数据后加密后才发生,从而确保他们的变化是安全的。</p><p>SslHandler 有很多有用的方法。例如,在握手阶段两端相互验证,商定一个加密方法。您可以配置 SslHandler 修改其行为或提供 在SSL/TLS 握手完成后发送通知,这样所有数据都将被加密。 SSL/TLS 握手将自动执行。</p><h3 id="构建-Netty-HTTP-HTTPS-应用"><a href="#构建-Netty-HTTP-HTTPS-应用" class="headerlink" title="构建 Netty HTTP/HTTPS 应用"></a>构建 <strong>Netty HTTP/HTTPS </strong>应用</h3><h4 id="HTTP-Decoder-Encoder-和-Codec"><a href="#HTTP-Decoder-Encoder-和-Codec" class="headerlink" title="HTTP Decoder, Encoder 和 Codec"></a>HTTP Decoder, Encoder 和 Codec</h4><p>HTTP 是请求-响应模式，客户端发送一个 HTTP 请求，服务就响应此请求。Netty 提供了简单的编码、解码器来简化基于这个协议的开发工作。图8.2和图8.3显示 HTTP 请求和响应的方法是如何生产和消费的</p><p> <img src="http://omux103p0.bkt.clouddn.com/16.png" alt="16"></p><ol><li>HTTP Request 第一部分是包含的头信息</li><li>HttpContent 里面包含的是数据，可以后续有多个 HttpContent 部分</li><li>LastHttpContent 标记是 HTTP request 的结束，同时可能包含头的尾部信息</li><li>完整的 HTTP request</li></ol><p>HTTP 请求/响应可能包含不止一个数据部分,它总是终止于LastHttpContent 部分。FullHttpRequest 和FullHttpResponse 消息是特殊子类型,分别表示一个完整的请求和响应。所有类型的 HTTP 消息(FullHttpRequest ，LastHttpContent 等)实现 HttpObject 接口。</p><p>代码<strong>2.1</strong>所示的是将支持 HTTP 添加到您的应用程序是多么简单。仅仅添加正确的ChannelHandler 到 ChannelPipeline 中</p><p>代码<strong>2.1</strong> Add support for HTTP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPipelineInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> client;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpPipelineInitializer</span><span class="params">(<span class="keyword">boolean</span> client)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.client = client;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ChannelPipeline pipeline = ch.pipeline();</div><div class="line">    <span class="keyword">if</span> (client) &#123;</div><div class="line">      pipeline.addLast(<span class="string">"decoder"</span>, <span class="keyword">new</span> HttpResponseDecoder()); <span class="comment">//1</span></div><div class="line">      pipeline.addLast(<span class="string">"encoder"</span>, <span class="keyword">new</span> HttpRequestEncoder()); <span class="comment">//2</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      pipeline.addLast(<span class="string">"decoder"</span>, <span class="keyword">new</span> HttpRequestDecoder()); <span class="comment">//3</span></div><div class="line">      pipeline.addLast(<span class="string">"encoder"</span>, <span class="keyword">new</span> HttpResponseEncoder()); <span class="comment">//4</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>client: 添加 HttpResponseDecoder 用于处理来自 server 响应</li><li>client: 添加 HttpRequestEncoder 用于发送请求到 server</li><li>server: 添加 HttpRequestDecoder 用于接收来自 client 的请求</li><li>server: 添加 HttpResponseEncoder 用来发送响应给 client</li></ol><h4 id="HTTP消息聚合"><a href="#HTTP消息聚合" class="headerlink" title="HTTP消息聚合"></a><strong>HTTP</strong>消息聚合</h4><p>安装 ChannelPipeline 中的初始化之后,你能够对不同 HttpObject 消息进行操作。但由于HTTP 请求和响应可以由许多部分组合而成，你需要聚合他们形成完整的消息。为了消除这种繁琐任务， Netty 提供了一个聚合器,合并消息部件到 FullHttpRequest 和 FullHttpResponse消息。这样您总是能够看到完整的消息内容。</p><p>这个操作有一个轻微的成本,消息段需要缓冲,直到完全可以将消息转发到下一个ChannelInboundHandler 管道。但好处是,你不必担心消息碎片。</p><p>实现自动聚合只需添加另一个 ChannelHandler 到 ChannelPipeline。代码<strong>2.2</strong>显示了这是如何实现的。</p><p>代码<strong>2.2</strong> 自动聚合HTTP消息片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpAggregatorInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> client;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpAggregatorInitializer</span><span class="params">(<span class="keyword">boolean</span> client)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.client = client;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ChannelPipeline pipeline = ch.pipeline();</div><div class="line">    <span class="keyword">if</span> (client) &#123;</div><div class="line">    pipeline.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpClientCodec()); <span class="comment">//1</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    pipeline.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpServerCodec()); <span class="comment">//2</span></div><div class="line">    &#125; </div><div class="line">    pipeline.addLast(<span class="string">"aggegator"</span>, <span class="keyword">new</span> HttpObjectAggregator(<span class="number">512</span> * <span class="number">1024</span>)); <span class="comment">//3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>client: 添加 HttpClientCodec</li><li>server: 添加 HttpServerCodec 作为我们是 server 模式时</li><li>添加 HttpObjectAggregator 到 ChannelPipeline, 使用最大消息值是 512kb</li></ol><h4 id="HTTP-压缩"><a href="#HTTP-压缩" class="headerlink" title="HTTP 压缩"></a><strong>HTTP </strong>压缩</h4><p>使用 HTTP 时建议压缩数据以减少传输流量，压缩数据会增加 CPU 负载，现在的硬件设施都很强大，大多数时候压缩数据时一个好主意。Netty 支持“gzip”和“deflate”，为此提供了两个ChannelHandler 实现分别用于压缩和解压。看下面代码：</p><p><strong>HTTP Request Header</strong><br>客户端可以通过提供下面的头显示支持加密模式。然而服务器不是,所以不得不压缩它发送的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /encrypted-area HTTP/<span class="number">1.1</span></div><div class="line">Host: www.example.com</div><div class="line">Accept-Encoding: gzip, deflate</div></pre></td></tr></table></figure><p>例子：</p><p>代码<strong>2.3</strong> 自动压缩HTTP消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpAggregatorInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isClient;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpAggregatorInitializer</span><span class="params">(<span class="keyword">boolean</span> isClient)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.isClient = isClient;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ChannelPipeline pipeline = ch.pipeline();</div><div class="line">    <span class="keyword">if</span> (isClient) &#123;</div><div class="line">      pipeline.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpClientCodec()); <span class="comment">//1</span></div><div class="line">      pipeline.addLast(<span class="string">"decompressor"</span>,<span class="keyword">new</span> HttpContentDecompressor()); <span class="comment">//2</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      pipeline.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpServerCodec()); <span class="comment">//3</span></div><div class="line">      pipeline.addLast(<span class="string">"compressor"</span>,<span class="keyword">new</span> HttpContentCompressor()); <span class="comment">//4</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>client: 添加 HttpClientCodec</li><li>client: 添加 HttpContentDecompressor 用于处理来自服务器的压缩的内容</li><li>server: HttpServerCodec</li><li>server: HttpContentCompressor 用于压缩来自 client 支持的 HttpContentCompressor</li></ol><p>压缩与依赖<br>注意，<em>Java 6</em>或者更早版本，如果要压缩数据，需要添加 jzlib 到 classpath</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.jcraft&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;jzlib&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;1.1.3&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><h4 id="使用-HTTPS"><a href="#使用-HTTPS" class="headerlink" title="使用 HTTPS"></a>使用 <strong>HTTPS</strong></h4><p>启用 HTTPS，只需添加 SslHandler</p><p>代码<strong>2.4</strong>  使用 HTTPS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsCodecInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SslContext context;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> client;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpsCodecInitializer</span><span class="params">(SslContext context, <span class="keyword">boolean</span> client)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.context = context;</div><div class="line">    <span class="keyword">this</span>.client = client;</div><div class="line">  &#125; </div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ChannelPipeline pipeline = ch.pipeline();</div><div class="line">    SSLEngine engine = context.newEngine(ch.alloc());</div><div class="line">    pipeline.addFirst(<span class="string">"ssl"</span>, <span class="keyword">new</span> SslHandler(engine)); <span class="comment">//1</span></div><div class="line">    <span class="keyword">if</span> (client) &#123;</div><div class="line">    pipeline.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpClientCodec()); <span class="comment">//2</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    pipeline.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpServerCodec()); <span class="comment">//3</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>添加 SslHandler 到 pipeline 来启用 HTTPS</li><li>client: 添加 HttpClientCodec</li><li>server: 添加 HttpServerCodec ，如果是 server 模式的话</li></ol><p>上面的代码就是一个很好的例子，解释了 Netty 的架构是如何让“重用”变成了“杠杆”。我们可以添加一个新的功能,甚至是一样重要的加密支持,几乎没有工作量,只需添加一个ChannelHandler 到 ChannelPipeline。</p><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a><strong>WebSocket</strong></h4><p>HTTP 是不错的协议，但是如果需要实时发布信息怎么做？有个做法就是客户端一直轮询请求服务器，这种方式虽然可以达到目的，但是其缺点很多，也不是优秀的解决方案，为了解决这个问题，便出现了 WebSocket。</p><p>WebSocket 允许数据双向传输，而不需要请求-响应模式。简单的说, 一个WebSocket 提供一个 TCP 连接两个方向的交通。结合 WebSocket API 它提供了一个替代 HTTP 轮询双向通信从页面到远程服务器。也就是说,WebSocket 提供真正的双向客户机和服务器之间的数据交换。</p><p>代码<strong>2.5</strong> 在服务器上支持WebSocket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  ch.pipeline().addLast(<span class="keyword">new</span> HttpServerCodec(), </div><div class="line">                        <span class="keyword">new</span> HttpObjectAggregator(<span class="number">65536</span>), <span class="comment">//1</span></div><div class="line">                        <span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/websocket"</span>), <span class="comment">//2</span></div><div class="line">                        <span class="keyword">new</span> TextFrameHandler(), <span class="comment">//3</span></div><div class="line">                        <span class="keyword">new</span> BinaryFrameHandler(), <span class="comment">//4</span></div><div class="line">                        <span class="keyword">new</span> ContinuationFrameHandler()); <span class="comment">//5</span></div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFrameHandler</span> <span class="keyword">extends</span></span></div><div class="line">    <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> </span></div><div class="line">      <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">// Handle text frame</span></div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryFrameHandler</span> <span class="keyword">extends</span> </span></div><div class="line">    <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">BinaryWebSocketFrame</span>&gt; &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, BinaryWebSocketFrame msg)</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">// Handle binary frame</span></div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinuationFrameHandler</span> <span class="keyword">extends</span> </span></div><div class="line">    <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ContinuationWebSocketFrame</span>&gt; &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ContinuationWebSocketFrame msg)</span> </span></div><div class="line">      <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">// Handle continuation frame</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>添加 HttpObjectAggregator 用于提供在握手时聚合 HttpRequest</li><li>添加 WebSocketServerProtocolHandler 用于处理色好给你寄握手如果请求是发送到”/websocket.” 端点，当升级完成后，它将会处理Ping, Pong 和 Close 帧</li><li>TextFrameHandler 将会处理 TextWebSocketFrames</li><li>BinaryFrameHandler 将会处理 BinaryWebSocketFrames</li><li>ContinuationFrameHandler 将会处理ContinuationWebSocketFrames</li></ol><p>加密 WebSocket 只需插入 SslHandler 到作为 pipline 第一个 ChannelHandler</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用-SSL-TLS-加密-Netty-程序&quot;&gt;&lt;a href=&quot;#使用-SSL-TLS-加密-Netty-程序&quot; class=&quot;headerlink&quot; title=&quot;使用 SSL/TLS 加密 Netty 程序&quot;&gt;&lt;/a&gt;使用 &lt;strong&gt;SSL/TLS &lt;/strong&gt;加密 &lt;strong&gt;Netty &lt;/strong&gt;程序&lt;/h3&gt;
    
    </summary>
    
      <category term="Netty" scheme="http://kakajing.github.io/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://kakajing.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Oracle-Hints</title>
    <link href="http://kakajing.github.io/2017/03/06/Oracle-Hints/"/>
    <id>http://kakajing.github.io/2017/03/06/Oracle-Hints/</id>
    <published>2017-03-06T11:16:42.000Z</published>
    <updated>2017-03-12T15:02:41.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Parallel-Hint-平行提示"><a href="#Parallel-Hint-平行提示" class="headerlink" title="Parallel Hint(平行提示)"></a>Parallel Hint(平行提示)</h3><p>语句级并行提示是最简单的：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT <span class="comment">/*+ PARALLEL(8) */</span> first_name, last_name FROM employee emp;</div></pre></td></tr></table></figure><p>对象级并行提示提供更多的控制，但更容易出错; 开发人员经常忘记使用别名来代替对象名称，或者他们忘记包含一些对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT <span class="comment">/*+ PARALLEL(emp,8) */</span> first_name, last_name FROM employee emp;</div></pre></td></tr></table></figure><p><code>SELECT /*+ PARALLEL(table_alias,Degree of Parallelism) */ FROM table_name table_alias;</code></p><p>比方说，一个查询需要100秒内没有使用并行提示来执行。 如果我们改变DOP为2相同的查询，则最好用并行提示相同的查询将需要50秒。 同样使用DOP作为4将需要25秒。</p><p>在实践中，并行执行取决于许多其他因素，并且不线性缩放。 这对于小的运行时间尤其如此，其中并行开销可能大于在多个并行服务器中运行的增益。</p><h3 id="USE-NL"><a href="#USE-NL" class="headerlink" title="USE_NL"></a>USE_NL</h3><p>使用嵌套循环。</p><p>用法：<code>use_nl(A B)</code></p><p>这个提示会要求引擎使用嵌套循环方法来连接表A和B.这是逐行比较。 提示不强制连接的顺序，只是要求NL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT <span class="comment">/*+use_nl(e d)*/</span> *</div><div class="line">FROM Employees E</div><div class="line">JOIN Departments D on E.DepartmentID = D.ID</div></pre></td></tr></table></figure><h3 id="附录提示"><a href="#附录提示" class="headerlink" title="附录提示"></a>附录提示</h3><p>“使用DIRECT PATH方法插入新行”。</p><p><code>APPEND</code>提示指示引擎使用直接路径负载。 这意味着引擎不会使用使用内存结构和标准锁的常规插入，而是将直接写入表空间的数据。 始终创建附加到表的段的新块。 这将更快，但有一些限制：</p><ul><li>在你启动或回滚事务之前，你不能从同一会话中附加的表中读取。</li><li>如果在表上定义了触发器，Oracle将不会使用直接路径（sqlldr加载的另一个情节）。</li><li>其他</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INSERT <span class="comment">/*+append*/</span> INTO Employees</div><div class="line">SELECT *</div><div class="line">FROM Employees;</div></pre></td></tr></table></figure><h3 id="FULL-充分"><a href="#FULL-充分" class="headerlink" title="FULL(充分)"></a>FULL(充分)</h3><p>FULL提示告诉Oracle对指定的表执行全表扫描，无论是否可以使用索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">create table <span class="title">fullTable</span><span class="params">(id)</span> as select level from dual connect by level &lt; 100000</span>;</div><div class="line"><span class="function">create index idx on <span class="title">fullTable</span><span class="params">(id)</span></span>;</div></pre></td></tr></table></figure><p>没有提示，使用索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">select <span class="title">count</span><span class="params">(<span class="number">1</span>)</span> from fullTable f where id between 10 and 100</span>;</div><div class="line">--------------------------------------------------------------------------</div><div class="line">| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |</div><div class="line">--------------------------------------------------------------------------</div><div class="line">|   <span class="number">0</span> | SELECT STATEMENT  |      |     <span class="number">1</span> |    <span class="number">13</span> |     <span class="number">3</span>   (<span class="number">0</span>)| <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> |</div><div class="line">|   <span class="number">1</span> |  SORT AGGREGATE   |      |     <span class="number">1</span> |    <span class="number">13</span> |            |          |</div><div class="line">|*  <span class="number">2</span> |   INDEX RANGE SCAN| IDX  |     <span class="number">2</span> |    <span class="number">26</span> |     <span class="number">3</span>   (<span class="number">0</span>)| <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> |</div><div class="line">--------------------------------------------------------------------------</div></pre></td></tr></table></figure><p>FULL提示强制进行全面扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">select <span class="comment">/*+ full(f) */</span> count(<span class="number">1</span>) from fullTable f where id between <span class="number">10</span> and <span class="number">100</span>;</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">| Id  | Operation          | Name      | Rows  | Bytes | Cost (%CPU)| Time     |</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">|   <span class="number">0</span> | SELECT STATEMENT   |           |     <span class="number">1</span> |    <span class="number">13</span> |    <span class="number">47</span>   (<span class="number">3</span>)| <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> |</div><div class="line">|   <span class="number">1</span> |  SORT AGGREGATE    |           |     <span class="number">1</span> |    <span class="number">13</span> |            |          |</div><div class="line">|*  <span class="number">2</span> |   TABLE ACCESS FULL| FULLTABLE |     <span class="number">2</span> |    <span class="number">26</span> |    <span class="number">47</span>   (<span class="number">3</span>)| <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> |</div><div class="line">--------------------------------------------------------------------------------</div></pre></td></tr></table></figure><h3 id="Result-Cache-结果缓存"><a href="#Result-Cache-结果缓存" class="headerlink" title="Result Cache(结果缓存)"></a>Result Cache(结果缓存)</h3><p>Oracle（11g及更高版本）允许SQL查询在SGA中缓存，并重用以提高性能。 它从缓存而不是数据库查询数据。 后续执行相同的查询更快，因为现在正从缓存中提取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT <span class="comment">/*+ result_cache */</span> number FROM main_table;</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Number</div><div class="line">------</div><div class="line">   <span class="number">1</span></div><div class="line">   <span class="number">2</span></div><div class="line">   <span class="number">3</span></div><div class="line">   <span class="number">4</span></div><div class="line">   <span class="number">5</span></div><div class="line">   <span class="number">6</span></div><div class="line">   <span class="number">7</span></div><div class="line">   <span class="number">8</span></div><div class="line">   <span class="number">9</span></div><div class="line">   <span class="number">10</span></div><div class="line"></div><div class="line">Elapsed: <span class="number">00</span>:<span class="number">00</span>:<span class="number">02.20</span></div></pre></td></tr></table></figure><p>如果我现在再次运行相同的查询，执行的时间将减少，因为数据现在从缓存获取，在第一次执行期间设置。</p><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Number</div><div class="line">------</div><div class="line">   <span class="number">1</span></div><div class="line">   <span class="number">2</span></div><div class="line">   <span class="number">3</span></div><div class="line">   <span class="number">4</span></div><div class="line">   <span class="number">5</span></div><div class="line">   <span class="number">6</span></div><div class="line">   <span class="number">7</span></div><div class="line">   <span class="number">8</span></div><div class="line">   <span class="number">9</span></div><div class="line">   <span class="number">10</span></div><div class="line"></div><div class="line">Elapsed: <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.10</span></div></pre></td></tr></table></figure><p>注意已用时间从2.20秒减少到0.10秒。</p><blockquote><p>结果缓存保存缓存，直到数据库中的数据被更新/更改/删除。 任何更改都将释放缓存。</p></blockquote><h3 id="USE-HASH"><a href="#USE-HASH" class="headerlink" title="USE_HASH"></a>USE_HASH</h3><p>指示引擎使用散列法连接参数中的表。</p><p>用法：<code>use_hash(TableA [TableB] ... [TableN])</code></p><p>正如许多地方所解释的，“在HASH连接中，Oracle访问一个表（通常是较小的连接结果），并在内存中的连接键上构建一个哈希表，然后扫描连接中的另一个表（通常是较大 一个）并探测哈希表匹配它。</p><p>当表很大，没有索引等时，它优先于嵌套循环方法。</p><p>注意：提示不强制连接的顺序，只是请求HASH JOIN方法。</p><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT <span class="comment">/*+use_hash(e d)*/</span> *</div><div class="line">FROM Employees E</div><div class="line">JOIN Departments D on E.DepartmentID = D.ID</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Parallel-Hint-平行提示&quot;&gt;&lt;a href=&quot;#Parallel-Hint-平行提示&quot; class=&quot;headerlink&quot; title=&quot;Parallel Hint(平行提示)&quot;&gt;&lt;/a&gt;Parallel Hint(平行提示)&lt;/h3&gt;&lt;p&gt;语句级并行提示是最简单的：&lt;/p&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://kakajing.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://kakajing.github.io/tags/Oracle/"/>
    
  </entry>
  
</feed>
